# Workflow Syntax: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
# Example: https://github.com/github/VisualStudio/blob/263aac11f57d53c5f9fe64ba9916f77c058974d7/.github/workflows/main.yml

name: Continuous Integration
env:
  config: Release
  solution: EDDI.sln

# Define our triggers
# Since we are configuring the triggers, we need to specify each set of triggering conditions separately
on:
  push:
    branches: [ develop, beta, stable ]
    paths-ignore:
    - docs/*        # Every file in the root docs folder
    - '**.html'     # HTML files anywhere in the repo
    - '**.md'       # Markdown files anywhere in the repo
    - '**.resx'     # RESX files anywhere in the repo
  pull_request:
    branches: [ develop ]
    paths-ignore:
    - docs/*        # Every file in the root docs folder
    - '**.html'     # HTML files anywhere in the repo
    - '**.md'       # Markdown files anywhere in the repo
    - '**.resx'     # RESX files anywhere in the repo
  schedule:
    #        ┌───────────── minute (0 - 59)
    #        │  ┌───────────── hour (0 - 23)
    #        │  │ ┌───────────── day of the month (1 - 31)
    #        │  │ │ ┌───────────── month (1 - 12 or JAN-DEC)
    #        │  │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
    #        │  │ │ │ │  * indicates 'all'
    #        │  │ │ │ │  Ref. https://docs.github.com/en/actions/reference/events-that-trigger-workflows#schedule
    #        │  │ │ │ │
    #        *  * * * *
    - cron: '30 2 * * 0' # Runs at 2:30 AM UTC, any day of the month, any month of the year, on Sundays

# Build and Test (ref. https://docs.github.com/en/actions/guides/building-and-testing-net)
jobs:
  analyze:
    name: Analyze
    runs-on: windows-latest

    steps:
    - name: Check out the repository on the workflow runner
      uses: actions/checkout@v2.3.4

    # Setup our PATH
    - name: Add msbuild.exe to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Add VSTest.console.exe to PATH
      uses: darenm/Setup-VSTest@v1.1.1
    - uses: nuget/setup-nuget@v1.0.5
      with:
        nuget-version: 'latest'

    # Setup our dependencies
    - name: Retrieve any cached copies of dependencies (these may be stored for up to a week)
      uses: actions/cache@main
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget
    - name: Restore or install any missing any dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: nuget restore ${{ env.solution }} -NonInteractive

    # Build
    - name: Build our solution (using the environment variables configured above)
      run: msbuild ${{ env.solution }} /p:Configuration=${{ env.config }} /verbosity:minimal

    # Test and generate coverage report
    - name: Make a TestResults directory (if it does not already exist)
      run: mkdir -p ./TestResults
    - name: Test our solution and generate a coverage report using OpenCover
      uses: ./.github/actions/TestWithCoverage
      with:
        opencover-console-path: \.nuget\packages\OpenCover\4.6.519\tools\OpenCover.Console.exe
        opencover-console-args: -mergebyhash -skipautoprops -excludebyattribute:*.ExcludeFromCodeCoverage*,*.GeneratedCodeAttribute* -excludebyfile:*\*.Designer.cs,*.xaml -filter:"+[Eddi*]* +[Utilities*]* +[Tests*]UnitTests*" -register:Path32
        target-path: vstest.console.exe
        target-args: Tests/bin/Release/Tests.dll /tests:UnitTests /Parallel /InIsolation /Blame
        output-path: ./TestResults/coverage.xml

    # Upload coverage results
    - name: Upload coverage to CodeCov (ref. https://github.com/codecov/codecov-action)
      uses: codecov/codecov-action@master
      with:
        files: TestResults/coverage.xml
