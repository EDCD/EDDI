<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="api_key_label" xml:space="preserve">
    <value>EDSM API key:</value>
  </data>
  <data name="cmd_name_label" xml:space="preserve">
    <value>EDSM Commander Name:</value>
  </data>
  <data name="desc" xml:space="preserve">
    <value>Senden Sie Ihre Reiseinformationen an EDSM. EDSM ist ein Drittanbieter-Tool, das Informationen über die Standorte von Sternensystemen liefert und ein Protokoll der von Ihnen besuchten Sternensysteme führt. Es benutzt die Daten, um eine Karte der Galaxie zu erstellen</value>
  </data>
  <data name="log_button" xml:space="preserve">
    <value>EDSM log abrufen</value>
  </data>
  <data name="log_button_companion_unconfigured" xml:space="preserve">
    <value>EDSM API nicht konfiguriert; Protokolle können nicht abgerufen werden.</value>
  </data>
  <data name="log_button_empty_api_key" xml:space="preserve">
    <value>Bitte geben Sie den EDSM-API-Schlüssel ein, um das Protokoll zu erhalten</value>
  </data>
  <data name="log_button_error_received" xml:space="preserve">
    <value>EDSM-Fehler empfangen: </value>
  </data>
  <data name="log_button_fetched" xml:space="preserve">
    <value>Protokoll erhalten</value>
  </data>
  <data name="log_button_fetching" xml:space="preserve">
    <value>Protokoll abrufen...</value>
  </data>
  <data name="log_button_fetching_progress" xml:space="preserve">
    <value>Protokoll abrufen </value>
  </data>
  <data name="name" xml:space="preserve">
    <value>_Info an EDSM</value>
  </data>
  <data name="p1" xml:space="preserve">
    <value>Um sich mit EDSM zu verbinden, müssen Sie bei EDSM registriert sein und ein Konto eingerichtet haben. Haben Sie dies getan, erhalten Sie Ihren API-Schlüssel, indem Sie auf Ihr Portrait in der oberen rechten Ecke des Bildschirms klicken und "Mein API-Schlüssel" auswählen</value>
  </data>
  <data name="p2" xml:space="preserve">
    <value>Wenn Sie einen anderen Commander-Namen als Ihren aktuellen registriert haben, geben Sie ihn bitte unten ein</value>
  </data>
  <data name="p3" xml:space="preserve">
    <value>Nachdem Sie Ihre Daten oben eingegeben haben, können Sie Ihre vorhandenen Protokolle von EDSM abrufen, sodass EDDI weiß, wie oft Sie in jedem System waren. Sie müssen dies nur beim ersten Einrichten von EDSM tun. Beachten Sie, dass dies eine Weile dauern kann</value>
  </data>
</root>