<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="api_key_label" xml:space="preserve">
    <value>Mi API EDSM:</value>
  </data>
  <data name="cmd_name_label" xml:space="preserve">
    <value>Nombre de Comandante en EDSM:</value>
  </data>
  <data name="desc" xml:space="preserve">
    <value>Envíe los detalles de sus viajes a EDSM. EDSM es una herramienta de terceros que proporciona información sobre las ubicaciones de los sistemas de estrellas y mantiene un registro de los sistemas de estrellas que ha visitado. Utiliza los datos proporcionados a un mapa de la galaxia "crowd-source"</value>
  </data>
  <data name="log_button" xml:space="preserve">
    <value>Obtener log de EDSM</value>
  </data>
  <data name="log_button_companion_unconfigured" xml:space="preserve">
    <value>La API de EDSM no está configurada; no se podrán obtener registros. </value>
  </data>
  <data name="log_button_empty_api_key" xml:space="preserve">
    <value>Por favor, añada la clave API de EDSM para obtener los logs. </value>
  </data>
  <data name="log_button_error_received" xml:space="preserve">
    <value>Error EDSM recibido: </value>
  </data>
  <data name="log_button_fetched" xml:space="preserve">
    <value>Log obtenido</value>
  </data>
  <data name="log_button_fetching" xml:space="preserve">
    <value>Obteniendo logs... </value>
  </data>
  <data name="log_button_fetching_progress" xml:space="preserve">
    <value>Obteniendo log␣ </value>
  </data>
  <data name="name" xml:space="preserve">
    <value>Asistente EDSM</value>
  </data>
  <data name="p1" xml:space="preserve">
    <value>Para conectarse a EDSM, debe haber registrado una cuenta con ellos. Una vez que haya hecho esto, puede obtener su clave de API haciendo clic en su retrato en la esquina superior derecha de la pantalla y seleccionando 'Mi API'</value>
  </data>
  <data name="p2" xml:space="preserve">
    <value>Si registró un nombre de comandante diferente al actual, ingrese el nombre de su comandante a continuación.</value>
  </data>
  <data name="p3" xml:space="preserve">
    <value>Una vez que haya ingresado sus datos arriba, puede extraer los registros existentes de EDSM para que EDDI sepa cuántas veces ha estado en cada sistema. Solo necesita hacerlo la primera vez que configure EDSM. Tenga en cuenta que esto puede tardar un tiempo en ejecutarse</value>
  </data>
</root>
