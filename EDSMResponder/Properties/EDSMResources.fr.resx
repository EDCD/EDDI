<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="api_key_label" xml:space="preserve">
    <value>Clé API EDSM:</value>
  </data>
  <data name="cmd_name_label" xml:space="preserve">
    <value>Nom du commandant sur EDSM:</value>
  </data>
  <data name="desc" xml:space="preserve">
    <value>Envoie le détail de vos déplacements à EDSM, un outil tierce qui fournit des informations sur l'emplacement des systèmes stellaires et garde une trace de ceux que vous avez déjà visités. EDSM utilise les données fournies par ses utilisateurs pour construire une carte participative de la galaxie.</value>
  </data>
  <data name="log_button" xml:space="preserve">
    <value>Récupérer les journaux EDSM</value>
  </data>
  <data name="log_button_companion_unconfigured" xml:space="preserve">
    <value>L'API EDSM n'est pas configuré; impossible de récupérer les journaux.</value>
  </data>
  <data name="log_button_empty_api_key" xml:space="preserve">
    <value>Veuillez entrer votre clé API EDSM pour récupérer les journaux</value>
  </data>
  <data name="log_button_error_received" xml:space="preserve">
    <value>Erreur EDSM reçue: </value>
  </data>
  <data name="log_button_fetched" xml:space="preserve">
    <value>Journaux récupérés</value>
  </data>
  <data name="log_button_fetching" xml:space="preserve">
    <value>Récupération des journaux...</value>
  </data>
  <data name="log_button_fetching_progress" xml:space="preserve">
    <value>Récupération des journaux </value>
  </data>
  <data name="name" xml:space="preserve">
    <value>Répondeur EDSM</value>
  </data>
  <data name="p1" xml:space="preserve">
    <value>Pour vous connecter à EDSM, vous devez posséder un compte sur leur site. Une fois le compte créé, récupérez votre clé API en cliquant sur votre portrait dans le coin supérieur droit du site puis en sélectionnant 'Clé API'.</value>
  </data>
  <data name="p2" xml:space="preserve">
    <value>Si vous avez enregistré un nom de commandant différent de celui renseigné actuellement, veuillez le renseigner ci-dessous.</value>
  </data>
  <data name="p3" xml:space="preserve">
    <value>Une fois que vous avez renseigné vos informations ci-dessus, vous pouvez récupérer les journaux existants depuis EDSM pour qu'EDDI sache le nombre de fois où vous êtes allés dans chaque système. Vous pouvez effectuer cette action une seule fois lors de la première configuration d'EDSM. A noter que cette action peu prendre un certain temps.</value>
  </data>
</root>