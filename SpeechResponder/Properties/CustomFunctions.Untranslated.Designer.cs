//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EddiSpeechResponder.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class CustomFunctions_Untranslated {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal CustomFunctions_Untranslated() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("EddiSpeechResponder.Properties.CustomFunctions.Untranslated", typeof(CustomFunctions_Untranslated).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for a blueprint, given its name and grade.
        ///
        ///BlueprintDetails() takes two mandatory arguments: the name of the blueprint and the grade to retrieve. 
        ///
        ///Common usage of this is to provide further information about a blueprint, for example:
        ///
        ///    {set blueprint to BlueprintDetails(&quot;Dirty Drive Tuning&quot;, 5)}
        ///    {len(blueprint.materials)} {if len(blueprint.materials) &gt; 1: different materials are |else: material is} required to produce {blueprint.localizedName}.&quot;;.
        /// </summary>
        public static string BlueprintDetails {
            get {
                return ResourceManager.GetString("BlueprintDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for a body given its name.
        ///
        ///BodyDetails() takes a single mandatory argument of the name of the body for which you want more information.  If the body is not in the current system then it can be provided with a second parameter of the name of the system.
        ///
        ///Common usage of this is to provide further information about a body, for example:
        ///
        ///    {set body to BodyDetails(&quot;Earth&quot;, &quot;Sol&quot;)}
        ///    Earth is {body.distancefromstar} light years from the system&apos;s main star..
        /// </summary>
        public static string BodyDetails {
            get {
                return ResourceManager.GetString("BodyDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for a cargo, carried in the commander&apos;s hold.
        ///
        ///CargoDetails() takes one mandatory argument, of two possible forms. 
        ///- The first form, a commodity name of the cargo. If the commodity is not in the hold, a &apos;null&apos; is returned.
        ///- The second form, a mission ID associated with the cargo, as haulage. If the mission ID is not associated with haulage, a &apos;null&apos; is returned.
        ///
        ///Common usage of this is to provide further information about a particular cargo, for example:        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CargoDetails {
            get {
                return ResourceManager.GetString("CargoDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for a combat rating given its name.
        ///
        ///CombatRatingDetails() takes a single argument of the combat rating for which you want more information.
        ///
        ///Common usage of this is to provide further information about your rating, for example:
        ///
        ///    You have been promoted {CombatRatingDetails(&quot;Expert&quot;).rank} times..
        /// </summary>
        public static string CombatRatingDetails {
            get {
                return ResourceManager.GetString("CombatRatingDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide the name of your commander.
        ///
        ///If you have set up a phonetic name for your commander it will return that, otherwise if your commander name has been set it will return that. The phonetic name uses SSML tags..
        /// </summary>
        public static string CommanderName {
            get {
                return ResourceManager.GetString("CommanderName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for a commodity, including information that is specific to a market, given the commodity name.
        ///
        ///CommodityMarketDetails() takes one mandatory argument and two optional arguments. 
        ///- The first argument, the name of the commodity for which you want more information, is mandatory.
        ///- The second argument, the name of the station to reference for market data, is optional. If not given then EDDI will default to the current station (if the current station is not set an [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CommodityMarketDetails {
            get {
                return ResourceManager.GetString("CommodityMarketDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide the distance (in light years) between two systems.
        ///
        ///Distance() takes either two or six arguments.
        ///- Two argurments, the names of the two systems.
        ///- Six arguments, the x, y, z coordinates of the two systems.
        ///
        ///Examples of each usage:
        ///
        ///    {set distance to Distance(&quot;Sol&quot;, &quot;Betelgeuse&quot;)}
        ///    {set distance to Distance(from.x, from.y, from.z, to.x, to.y, to.z)}.
        /// </summary>
        public static string Distance {
            get {
                return ResourceManager.GetString("Distance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for an economy given its name.
        ///
        ///EconomyDetails() takes a single argument of the economy for which you want more information.
        ///
        ///At current this does not have a lot of use as the economy object only contains its name, but expect it to be expanded in future..
        /// </summary>
        public static string EconomyDetails {
            get {
                return ResourceManager.GetString("EconomyDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function allows you to give emphasis to specific words (to the extent supported by the voice you are using - your mileage may vary). This function uses SSML tags.
        ///
        ///Emphasize() takes one mandatory argument: the text to speak with emphasis. If no secondary argument is specified, it shall default to a strong emphasis.
        ///
        ///Emphasize() also takes one optional argument: the degree of emphasis to place on the text (legal values for the degree of emphasis include &quot;strong&quot;, &quot;moderate&quot;, &quot;none&quot; and &quot;reduced&quot;).
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Emphasize {
            get {
                return ResourceManager.GetString("Emphasize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for an empire rating given its name.
        ///
        ///EmpireRatingDetails() takes a single argument of the empire rating for which you want more information.
        ///
        ///Common usage of this is to provide further information about your rating, for example:
        ///
        ///    You have been promoted {EmpireRatingDetails(&quot;Lord&quot;).rank} times..
        /// </summary>
        public static string EmpireRatingDetails {
            get {
                return ResourceManager.GetString("EmpireRatingDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for an Engineer given either the engineer&apos;s name or the star system where the engineer resides (including current progress information if you are in game).
        ///
        ///EngineerDetails() takes a single argument of either the engineer&apos;s name for which you want more information or the star system where the engineer resides. It returns an Engineer object..
        /// </summary>
        public static string EngineerDetails {
            get {
                return ResourceManager.GetString("EngineerDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for an exploration rating given its name.
        ///
        ///ExplorationRatingDetails() takes a single argument of the exploration rating for which you want more information.
        ///
        ///Common usage of this is to provide further information about your rating, for example:
        ///
        ///    You have been promoted {ExplorationRatingDetails(&quot;Surveyor&quot;).rank} times..
        /// </summary>
        public static string ExplorationRatingDetails {
            get {
                return ResourceManager.GetString("ExplorationRatingDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function is used inside a script to invoke another script.
        ///
        ///F() takes a single parameter that is the name of the script to invoke.
        ///
        ///One example of its use is in the script for the event `Trade Promotion`:
        ///
        ///    You have been recognised for your trading ability, {F(\&quot;Honorific\&quot;)}.
        ///
        ///Here the call to script `Honorific` will generate the right title for the player, according to their allegiance..
        /// </summary>
        public static string F {
            get {
                return ResourceManager.GetString("F", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for a minor faction given its name.
        ///
        ///FactionDetails() typically takes a single argument of the faction name, but may add a system name for filtering.
        ///
        ///Common usage of this is to obtain a `Faction` object, providing current specifics of a minor faction, for example:
        ///
        ///    {set faction to FactionDetails(&quot;Lavigny&apos;s Legion&quot;)}
        ///    {if faction.name != &quot;&quot;:
        ///        {faction.name} is present in the
        ///        {for presence in faction.presences:
        ///            {presence. [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FactionDetails {
            get {
                return ResourceManager.GetString("FactionDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for an federation rating given its name.
        ///
        ///FederationRatingDetails() takes a single argument of the Federation rating for which you want more information.
        ///
        ///Common usage of this is to provide further information about your rating, for example:
        ///
        ///    You have been promoted {FederationRatingDetails(&quot;Post Commander&quot;).rank} times..
        /// </summary>
        public static string FederationRatingDetails {
            get {
                return ResourceManager.GetString("FederationRatingDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EDDI&apos;s Speech Responder uses [Cottle templating language](https://cottle.readthedocs.io/en/stable/) to generate verbal responses to various events.
        ///
        ///Cottle&apos;s library is extended with several functions listed below ([detailed documentation](https://github.com/EDCD/EDDI/wiki/Help)):.
        /// </summary>
        public static string FunctionsHeader {
            get {
                return ResourceManager.GetString("FunctionsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for a Galnet article given its uuid.
        ///
        ///GalnetNewsArticle() takes a single argument of the article uuid for which you want more information..
        /// </summary>
        public static string GalnetNewsArticle {
            get {
                return ResourceManager.GetString("GalnetNewsArticle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for a collection of Galnet articles.
        ///
        ///GalnetNewsArticles() takes up to two optional arguments. By default it returns a collection of unread articles. 
        ///    - The first optional argument is a string to filter the results and only return those from a named category (You may use &quot;All&quot; if you&apos;d like to omit this filter).
        ///    - The second optional argument is a boolean value which should be set to true if you&apos;d like to retrieve all articles rather than all unread ar [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GalnetNewsArticles {
            get {
                return ResourceManager.GetString("GalnetNewsArticles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will delete a Galnet article from local storage.
        ///
        ///It takes a single mandatory argument, the article uuid to delete..
        /// </summary>
        public static string GalnetNewsDelete {
            get {
                return ResourceManager.GetString("GalnetNewsDelete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will mark a Galnet article as read.
        ///
        ///It takes a single mandatory argument, the article uuid to mark as read..
        /// </summary>
        public static string GalnetNewsMarkRead {
            get {
                return ResourceManager.GetString("GalnetNewsMarkRead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will mark a Galnet article as unread.
        ///
        ///It takes a single mandatory argument, the article uuid to mark as unread..
        /// </summary>
        public static string GalnetNewsMarkUnread {
            get {
                return ResourceManager.GetString("GalnetNewsMarkUnread", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for a government given its name.
        ///
        ///GovernmentDetails() takes a single argument of the government for which you want more information.
        ///
        ///At current this does not have a lot of use as the government object only contains its name, but expect it to be expanded in future..
        /// </summary>
        public static string GovernmentDetails {
            get {
                return ResourceManager.GetString("GovernmentDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide &apos;haulage&apos; information for a mission-related cargo. See the &apos;haulage&apos; object for variable details.
        ///
        ///HaulageDetails() takes one mandatory argument, a mission ID associated with the haulage. If the mission ID is not associated with haulage, a &apos;null&apos; is returned.
        ///
        ///Common usage of this is to provide further information about a particular mission haulage, for example:
        ///
        ///    {set haulage to HaulageDetails(event.missionid)}
        ///    {if haulage &amp;&amp; haulage.deleivered &gt; 0:
        ///        {set to [rest of string was truncated]&quot;;.
        /// </summary>
        public static string HaulageDetails {
            get {
                return ResourceManager.GetString("HaulageDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # Templating with EDDI
        ///
        ///EDDI&apos;s speech responder uses Cottle for templating.  Cottle has a number of great features, including:
        ///
        ///* Ability to set and update variables, including arrays
        ///* Loops
        ///* Conditionals
        ///* Subroutines
        ///
        ///Information on how to write Cottle templates is available at https://cottle.readthedocs.io/en/stable/, and EDDI&apos;s default templates use a lot of the functions available.
        ///
        ///## State Variables
        ///
        ///Cottle does not retain state between templates, but EDDI provides a way of doing this  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string HelpHeader {
            get {
                return ResourceManager.GetString("HelpHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will turn its argument into a more human number, for example turning 31245 in to \&quot;just over thirty thousand\&quot;.
        ///
        ///Humanise() takes one argument: the number to humanise.
        ///
        ///Common usage of this is to provide human-sounding numbers when speaking rather than saying every digit, for example:
        ///
        ///    You have {Humanise(cmdr.credits)} credits..
        /// </summary>
        public static string Humanise {
            get {
                return ResourceManager.GetString("Humanise", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will turn its argument into an ICAO spoken value, for example &quot;NCC&quot; becomes &quot;November Charlie Charlie&quot;.
        ///
        ///ICAO() takes one argument: the value to turn in to ICAO.
        ///
        ///Common usage of this is to provide clear callsigns and idents for ships, for example:
        ///
        ///    Ship ident is {ICAO(ship.ident)}..
        /// </summary>
        public static string ICAO {
            get {
                return ResourceManager.GetString("ICAO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide records from https://inara.cz for commanders with profiles on that website. Some values may be missing, depending on the completeness of the records and on the commander&apos;s sharing settings on https://inara.cz.
        ///
        ///InaraDetails() takes one argument: the name of the commander to look up on Inara.cz.
        ///
        ///Common usage of this is to provide details about other commanders. See the &apos;inaracmdr&apos; object for variable details..
        /// </summary>
        public static string InaraDetails {
            get {
                return ResourceManager.GetString("InaraDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide jump information based on your ship loadout and current fuel level, dependent on the following types:
        ///
        ///* `next` range of next jump at current fuel mass and current laden mass
        ///* `max` maximum jump range at minimum fuel mass and current laden mass
        ///* `total` total range of multiple jumps from current fuel mass and current laden mass
        ///* `full` total range of multiple jumps from maximum fuel mass and current laden mass
        ///
        ///The returned `JumpDetail` object contains properties `distan [rest of string was truncated]&quot;;.
        /// </summary>
        public static string JumpDetails {
            get {
                return ResourceManager.GetString("JumpDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will return a humanised list of items from an array (e.g. this, that, and the other thing).
        ///
        ///List() takes a single argument, the array variable with items you want listed.
        ///
        ///Common usage is to convert an array to a list, for example:
        ///
        ///    {set systemsrepaired to [&apos;the hull&apos;, &apos;the cockpit&apos;, &apos;corroded systems&apos;]}
        ///    The limpet has repaired {List(systemsrepaired)}..
        /// </summary>
        public static string List {
            get {
                return ResourceManager.GetString("List", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will write the supplied text to EDDI&apos;s log.
        ///
        ///Log() takes a single argument of the string to log..
        /// </summary>
        public static string Log {
            get {
                return ResourceManager.GetString("Log", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for a material given its name.
        ///
        ///MaterialDetails() takes either one or two arguments. 
        ///
        ///The first argument is the name of the material for which you want more information. 
        ///
        ///Common usage of this is to provide further information about a material, for example:
        ///
        ///    Iron is a {MaterialDetails(&quot;Iron&quot;).rarity.name} material.
        ///
        ///The second argument, the name of a star system, is optional. If provided then the `bodyname` and `bodyshortname` properties in the resu [rest of string was truncated]&quot;;.
        /// </summary>
        public static string MaterialDetails {
            get {
                return ResourceManager.GetString("MaterialDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for a mission given its mission ID.
        ///
        ///MissionDetails() takes a single argument of the mission ID for which you want more information.
        ///
        ///Common usage of this is to provide detailed information about a previously accepted mission, for example:
        ///
        ///    {set mission to MissionDetails(event.missionid)}.
        /// </summary>
        public static string MissionDetails {
            get {
                return ResourceManager.GetString("MissionDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will take its argument 1/*n*th of the time, the rest of time discarding it.
        ///
        ///Occasionally() takes two arguments: n, and the text argument.
        ///
        ///Note that Occasionally() works on random numbers rather than counters, so in the below example the additional text will not show up every 7th time you boost but will show up on average 1/7 of the times that you boost.
        ///
        ///Common usage of this is to provide additional text that is said now and again but would become irritating if said all the time, for e [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Occasionally {
            get {
                return ResourceManager.GetString("Occasionally", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will take one of the arguments available to it, picking randomly.
        ///
        ///OneOf() takes as many arguments are you want to give it.
        ///
        ///Common usage of this is to provide variation to spoken text, for example:
        ///
        ///    You have {OneOf(\&quot;docked\&quot;, \&quot;finished docking\&quot;, \&quot;completed docking procedures\&quot;)}..
        /// </summary>
        public static string OneOf {
            get {
                return ResourceManager.GetString("OneOf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide the orbital velocity in meters per second which is required to maintain orbit at the current altitude.
        ///
        ///OrbitalVelocity() takes up to three arguments. If no arguments are provided, it&apos;ll try to return the velocity needed to maintain orbit around the current body at the current altitude. 
        ///- The first optional argument is the altitude in meters to use for the calculation. If no other arguments are provided, the function will provide the orbital velocity relative to the current bo [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OrbitalVelocity {
            get {
                return ResourceManager.GetString("OrbitalVelocity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will attempt to provide phonetic pronunciation for the supplied text. This function uses SSML tags.
        ///
        ///P() takes one mandatory and one optional argument. The first argument is the string to be pronounced. The second optional argument describes which set of pronunciation overrides should be applied. Recognized values are: &quot;power&quot;, &quot;planettype&quot;, &quot;shipmodel&quot;, &quot;shipmanufacturer&quot;, &quot;body&quot;, &quot;starsystem&quot;, &quot;station&quot;, or &quot;faction&quot;.
        ///
        ///Common usage of this is to wrap the names of planets, powers, ships e [rest of string was truncated]&quot;;.
        /// </summary>
        public static string P {
            get {
                return ResourceManager.GetString("P", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will pause the speech for a given amount of time. This function uses SSML tags.
        ///
        ///Pause() takes one argument: the number of milliseconds to pause.
        ///
        ///Common usage of this is to allow speech to sync up with in-game sounds, for example to wait for a known response to a phrase before continuing, for example:
        ///
        ///    Hello.  {Pause(2000)} Yes..
        /// </summary>
        public static string Pause {
            get {
                return ResourceManager.GetString("Pause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will play an audio file as supplied in the argument. This function uses SSML tags.
        ///
        ///Play() takes one mandatory argument: the path to the file to play.  Various common Windows file formats are supported.  Any backslashes for path separators must be escaped, so &apos;\\&apos; must be written as &apos;\\\\&apos;
        ///
        ///Play() also takes two optional arguments. The first optional argument is a boolean value which if true will play the audio file asynchronously. The second optional argument is a number representing the  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Play {
            get {
                return ResourceManager.GetString("Play", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will refresh the Frontier API profile.
        ///
        ///It takes a single optional argument, a boolean indicating whether whether to refresh station data..
        /// </summary>
        public static string RefreshProfile {
            get {
                return ResourceManager.GetString("RefreshProfile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will produce a destination/route for valid mission destinations.
        ///
        ///RouteDetails takes one mandatory argument, the `routetype`, and up to two optional arguments.
        ///
        ///The following `routetype` values are valid:
        ///
        ///* `cancel` Cancel the currently stored route.
        ///* `encoded` Nearest encoded materials trader.
        ///* `expiring` Destination of your next expiring mission.
        ///* `facilitator` Nearest &apos;Legal Facilities&apos; contact.
        ///* `farthest` Mission destination farthest from your current location.
        ///* `guardian [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RouteDetails {
            get {
                return ResourceManager.GetString("RouteDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide the number of seconds since a given timestamp.
        ///
        ///SecondsSince() takes a single argument of a UNIX timestamp.
        ///
        ///Common usage of this is to check how long it has been since a given time, for example:
        ///
        ///    Station data is {SecondsSince(station.updatedat) / 3600} hours old..
        /// </summary>
        public static string SecondsSince {
            get {
                return ResourceManager.GetString("SecondsSince", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for a security level given its name.
        ///
        ///SecurityLevelDetails() takes a single argument of the security level for which you want more information.
        ///
        ///At current this does not have a lot of use as the security level object only contains its name, but expect it to be expanded in future..
        /// </summary>
        public static string SecurityLevelDetails {
            get {
                return ResourceManager.GetString("SecurityLevelDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will set a session state value.  The value will be available as a property of the &apos;state&apos; object in future templates within the same EDDI session.
        ///
        ///SetState takes two arguments: the name of the state value to set, and its value.  The name of the state value will be converted to lower-case and spaces changed to underscores.  The value must be either a boolean, a number, or a string; other values will be ignored.
        ///
        ///Common usage of this is to keep track of the cumulative or persistent informat [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SetState {
            get {
                return ResourceManager.GetString("SetState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide your ship&apos;s callsign in the same way that Elite provides it (i.e. manufacturer followed by first three letters of your commander name).
        ///
        ///ShipCallsign() takes an optional ship ID for which to provide the callsign. If no argument is supplied then it provides the callsign for your current ship.
        ///
        ///ShipCallsign() takes an optional second argument to permit variations in callsign format. If no second argument is provided then it will provide a callsign from the ship manufacturer and  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ShipCallsign {
            get {
                return ResourceManager.GetString("ShipCallsign", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for a ship given its name.
        ///
        ///ShipDetails() takes a single argument of the model of the ship for which you want more information.
        ///
        ///Common usage of this is to provide further information about a ship, for example:
        ///
        ///    The Vulture is made by {ShipDetails(&quot;Vulture&quot;).manufacturer}..
        /// </summary>
        public static string ShipDetails {
            get {
                return ResourceManager.GetString("ShipDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide the name of your ship.
        ///
        ///If you have set up a phonetic name for your ship it will return that, otherwise if you have set up a name for your ship it will return that. The phonetic name uses SSML tags.
        ///
        ///ShipName() takes an optional ship ID for which to provide the name. If no argument is supplied then it provides the name for your current ship.
        ///
        ///ShipName() also takes an optional ship model. If the optional ship ID is not found then this provides a ship name based on the ship mo [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ShipName {
            get {
                return ResourceManager.GetString("ShipName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will allow letters and numbers in a string to be pronounced individually. If SSML is enabled, this function will render the text using SSML. If not, it will add spaces between letters in a string &amp; convert to uppercase to assist the voice with achieving the proper pronunciation. 
        ///
        ///Spacialise() takes one argument: the string of characters to Spacialise.
        ///
        ///Common usage of this is to provide a more human-sounding reading of a string of letters that are not a part of known word:
        ///
        ///    Star lum [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Spacialise {
            get {
                return ResourceManager.GetString("Spacialise", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function allows you to dynamically adjust the pitch of the spoken speech. This function uses SSML tags.
        ///
        ///SpeechPitch() takes two mandatory arguments: the text to speak and the pitch at which to speak it (legal values for the pitch include &quot;x-low&quot;, &quot;low&quot;, &quot;medium&quot;, &quot;high&quot;, &quot;x-high&quot;, &quot;default&quot;, as well as percentage values like &quot;-20%&quot; or &quot;+10%&quot;).
        ///
        ///Common usage of this is to provide a more human-sounding reading of text with variation in the speech pitch:
        ///
        ///    {SpeechPitch(&apos;Ok, who added helium to t [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SpeechPitch {
            get {
                return ResourceManager.GetString("SpeechPitch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function allows you to dynamically adjust the rate of the spoken speech. This function uses SSML tags.
        ///
        ///SpeechRate() takes two mandatory arguments: the text to speak and the speech rate at which to speak it (legal values for the speech rate include &quot;x-slow&quot;, &quot;slow&quot;, &quot;medium&quot;, &quot;fast&quot;, &quot;x-fast&quot;, &quot;default&quot;, as well as percentage values like &quot;-20%&quot; or &quot;+20%&quot;).
        ///
        ///Common usage of this is to provide a more human-sounding reading of text with variation in the speech rate:
        ///
        ///    {SpeechRate(&apos;The quick brown [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SpeechRate {
            get {
                return ResourceManager.GetString("SpeechRate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function allows you to dynamically adjust the volume of the spoken speech. This function uses SSML tags.
        ///
        ///##### Please take care with decibel values. If you accidentally blow out your speakers, that&apos;s totally on you. 
        ///SpeechRate() takes two mandatory arguments: the text to speak and the valume at which to speak it (legal values for the speech volume include &quot;silent&quot;, &quot;x-soft&quot;, &quot;soft&quot;, &quot;medium&quot;, &quot;loud&quot;, &quot;x-loud&quot;, &quot;default&quot;, as well as relative decibel values like &quot;-6dB&quot;).
        ///A value of &quot;+0dB&quot; means no  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SpeechVolume {
            get {
                return ResourceManager.GetString("SpeechVolume", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function returns true or false depending on whether the first letter in a string is a vowel.
        ///
        ///StartsWithVowel() takes one argument: the string that may or may not start with a vowel.
        ///
        ///Common usage of this is to select the word that should proceed the string (e.g. **a** Adaptive Encryptors Capture vs **an** Adaptive Encryptors Capture).
        ///               
        ///    {if StartsWithVowel(event.name): an |else: a } {event.name}.
        /// </summary>
        public static string StartsWithVowel {
            get {
                return ResourceManager.GetString("StartsWithVowel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for a state given its name.
        ///
        ///StateDetails() takes a single argument of the state for which you want more information.
        ///
        ///At current this does not have a lot of use as the state object only contains its name, but expect it to be expanded in future..
        /// </summary>
        public static string StateDetails {
            get {
                return ResourceManager.GetString("StateDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for a station given its name and optional system.
        ///
        ///StationDetails() takes a single mandatory argument of the name of the station for which you want more information.  If the station is not in the current system then it can be provided with a second parameter of the name of the system.
        ///
        ///Common usage of this is to provide further information about a station, for example:
        ///
        ///    {set station to StationDetails(&quot;Jameson Memorial&quot;, &quot;Shinrarta Dezhra&quot;)}
        ///    Jameson  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string StationDetails {
            get {
                return ResourceManager.GetString("StationDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for a superpower given its name.
        ///
        ///SuperpowerDetails() takes a single argument of the superpower for which you want more information.
        ///
        ///At current this does not have a lot of use as the superpower object only contains its name, but expect it to be expanded in future..
        /// </summary>
        public static string SuperpowerDetails {
            get {
                return ResourceManager.GetString("SuperpowerDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for a star system given its name.
        ///
        ///SystemDetails() takes a single argument of the star system for which you want more information.
        ///
        ///Common usage of this is to provide further information about a star system, for example:
        ///
        ///    Sol has {len(SystemDetails(&quot;Sol&quot;).bodies)} bodies..
        /// </summary>
        public static string SystemDetails {
            get {
                return ResourceManager.GetString("SystemDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide full information for a trade rating given its name.
        ///
        ///TradeRatingDetails() takes a single argument of the trade rating for which you want more information.
        ///
        ///Common usage of this is to provide further information about your rating, for example:
        ///
        ///    You have been promoted {TradeRatingDetails(&quot;Peddler&quot;).rank} times..
        /// </summary>
        public static string TradeRatingDetails {
            get {
                return ResourceManager.GetString("TradeRatingDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function will provide information on traffic and hostilities in a star system.
        ///
        ///TrafficDetails() takes one mandatory argument and one optional argument.
        ///
        ///The first mandatory argument is the name of the star system. The second optional argument defines different data sets that are available:
        ///
        ///* `traffic` the number of ships that have passed through the star system (this is the default if no second argument is provided)
        ///* `deaths` the number of ships passing through the star system which have been [rest of string was truncated]&quot;;.
        /// </summary>
        public static string TrafficDetails {
            get {
                return ResourceManager.GetString("TrafficDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function allows you to add a radio effect to speech.
        ///
        ///Transmit() takes one argument: the text to speak. For example: 
        ///             
        ///    {Transmit(&quot;{ShipName()} returning from orbit.&quot;)}.
        /// </summary>
        public static string Transmit {
            get {
                return ResourceManager.GetString("Transmit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function allows you to include a different voice in your script than then one currently selected. This function uses SSML tags.
        ///
        ///Voice() takes two mandatory arguments: the text to speak and the voice to speak it (legal values for the voice should match one of the voices listed by EDDI&apos;s `Text-to-Speech` tab.&quot;). For Example:
        ///
        ///    {Voice(&quot;Now I can speak&quot;, &quot;Microsoft Zira Desktop&quot;)}
        ///    {Voice(&quot;And I can listen&quot;, &quot;Microsoft David Desktop&quot;)}.
        /// </summary>
        public static string Voice {
            get {
                return ResourceManager.GetString("Voice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function allows you to discover details about the voices installed on your system. It is intended for use with `Voice()` to allow for more dynamic voice selection.
        ///
        ///VoiceDetails takes either zero or one arguments.
        ///
        ///With zero arguments, the function returns a list of `VoiceDetail` objects. For example:
        ///
        ///{for voice in VoiceDetails(): \{voice.name\} speaks \{voice.culturename\},}
        ///
        ///With one argument, the function returns a single `VoiceDetail` object. For example:
        ///
        ///    {VoiceDetails(&quot;Microsoft Zi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string VoiceDetails {
            get {
                return ResourceManager.GetString("VoiceDetails", resourceCulture);
            }
        }
    }
}
