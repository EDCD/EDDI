{
  "name": "EDDI",
  "description": "Shirka v3.3.6-1b",
  "scripts": {
    "AFMU repairs": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.item}\r\n\r\n{_ ****** BUSCA GENERO Y NUMERO DE event.item ****** _}\r\n\r\n{_ coge la primera palabra}\r\n{set itemobj to token(event.item, \" \",0)} \r\n\r\n{_ mira si es femenino}\r\n{if find(itemobj,\"a\",len(itemobj)-2)!=-1: {set o to \"a\"}\r\n|else: {set o to \"o\"}\r\n}\r\n\r\n{_ mira si es plural}\r\n{if find(itemobj,\"s\",len(itemobj)-1)!=-1: {set s to \"s\"}{set n to \"n\"}\r\n|else: {set s to \"\"}{set n to \"\"}\r\n}\r\n\r\n{_ ************************************************** _}\r\n\r\n\r\n{if event.repairedfully:\r\n    totalmente reparad{o}{s}\r\n|else:\r\n    partially repaired \r\n    {Occasionally(2, cat(\r\n        OneOf(\"al \", \"en un \"),\r\n        Humanise(event.health * 100),\r\n        \" porciento de su capacidad\"\r\n    ))}\r\n}\r\n\r\n{Occasionally(2, \r\n    cat(OneOf(\". \", \"y está{n}\"), \" List{o}{s} para su activación\"))}. \r\n{Occasionally(2,\"Recuerde activarl{o}\")}",
      "default": true,
      "name": "AFMU repairs",
      "description": "Activado al reparar módulos utilizando la Unidad de automantenimiento (AFMU)"
    },
    "Blueprint make report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain current inventory of a material}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch blueprint from state }\r\n{set blueprintname to state.blueprint}\r\n{if blueprintname:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'blueprint')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n}\r\n\r\n{if !blueprint:\r\n    {_ Fetch from context }\r\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name)}\r\n}\r\n\r\n{set canbemade to 999}\r\n\r\n{if blueprint:\r\n    {_ Find the smallest number of this blueprint that can be made }\r\n    \r\n    {set cur to 0}\r\n    {while cur < len(blueprint.materials):\r\n        {set inventory to _inventory(blueprint.materials[cur].material)}\r\n        {if !inventory:\r\n            {set canbemade to 0}\r\n        |else:\r\n            {if inventory.amount < canbemade:\r\n                {set canbemade to inventory.amount}\r\n            }\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {if canbemade = 0:\r\n        No puedes fabricar ningún {blueprintname}\r\n    |elif canbemade = 1:\r\n        Podrías fabricar un {blueprintname}\r\n    |else:\r\n        Podrías fabricar {canbemade} {blueprintname}\r\n    }\r\n|else:\r\n    No dispongo de información para {blueprintname}\r\n}.\r\n",
      "default": true,
      "name": "Blueprint make report",
      "description": "Informa de la cantidad que puedes hacer de un plano en particular"
    },
    "Blueprint material report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch blueprint from state }\n{set blueprintname to state.blueprint}\n{if blueprintname:\n    {_ Fetch full blueprint details }\n    {set blueprint to BlueprintDetails(blueprintname)}\n\n    {_ Context }\n    {SetState('eddi_context_last_subject', 'blueprint')}\n    {SetState('eddi_context_blueprint_name', blueprintname)}\n}\n\n{if !blueprint:\n    {_ Fetch from context }\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name)}\n}\n\n{if blueprint:\n    {set materials to len(blueprint.materials)}\n    {blueprintname} requiere \n    {if materials = 1:\n        {blueprint.materials[0].material}\n    |elif materials = 2:\n        {blueprint.materials[0].material} y {blueprint.materials[1].material}\n    |else:\n        {set cur to 0}\n        {while cur < len(blueprint.materials):\n            {if cur = 0:\n                {blueprint.materials[cur].material}\n            |elif cur < len(blueprint.materials) - 1:\n                , {blueprint.materials[cur].material}\n            |else:\n                , and {blueprint.materials[cur].material}\n            }\n            {set cur to cur + 1}\n        }\n    }\n|else:\n    No hay información disponible sobre los materiales necesarios para hacer {blueprintname}\n}.\n",
      "default": true,
      "name": "Blueprint material report",
      "description": "Informa de los materiales requeridos de un plano"
    },
    "Bodies mapped": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from Context _}\r\n{set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n\r\n{_ Build a list of scanned bodies _}\r\n\r\n{set mappedList to []}\r\n\r\n{for body in reportSystem.bodies:\r\n   {if body.mapped:\r\n       {cat(mappedList, [body])} \r\n   }\r\n}\r\n\r\n{_ Begin speaking _}\r\n\r\n{if len(mappedList) > 0:\r\n\r\n    {if len(mappedList) = 1: Body |else: Bodies}\r\n\r\n    {set cur to 0}\r\n    {while cur < len(mappedList):\r\n        {mappedList[cur].shortname}\r\n        {set cur to cur + 1}\r\n        {if cur = len(mappedList) - 1: and\r\n        |elif cur < len(mappedList) - 1:,\r\n        }\r\n    }\r\n\r\n    {if len(mappedList) = 1: has |else: have }\r\n    {set already to Occasionall(2, \"already\")}\r\n    {OneOf(\"{already} been mapped\", \"been mapped {already}\")}.\r\n\r\n|else:\r\n    You have yet to map any bodies in this system.\r\n}\r\n",
      "default": true,
      "name": "Bodies mapped",
      "description": "Reports all the bodies mapped in this system so far"
    },
    "Bodies to map": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences: _}\r\n\r\n{set reportTerraformables to true}   {_ Reports all terraformable and terraformed bodies _}\r\n{set highValueThreshold to 80000}   {_ The minimum threshold for estimated exploration value worth mapping _}\r\n{set reportPlanetTypes to [\r\n    \"Ammonia world\": true,\r\n    \"Earth-like world\": true,\r\n    \"Gas giant with ammonia based life\": false,\r\n    \"Gas giant with water based life\": false,\r\n    \"Helium gas giant\": false,\r\n    \"Helium-rich gas giant\": false,\r\n    \"High metal content world\": false,\r\n    \"Icy body\": false,\r\n    \"Metal-rich body\": false,\r\n    \"Rocky body\": false,\r\n    \"Rocky ice world\": false,\r\n    \"Class I gas giant\": false,\r\n    \"Class II gas giant\": false,\r\n    \"Class III gas giant\": false,\r\n    \"Class IV gas giant\": false,\r\n    \"Class V gas giant\": false,\r\n    \"Water giant\": false,\r\n    \"Water giant with life\": false,\r\n    \"Water world\": true,\r\n]}\r\n\r\n{_ Fetch from Context _}\r\n{set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n\r\n{_ Identify bodies worth mapping _}\r\n\r\n{set toMapList to []}\r\n{set mappedBodies to 0}\r\n{set totalBodies to 0}\r\n\r\n{for body in reportSystem.bodies:\r\n    {set totalBodies to totalBodies + 1}\r\n    {if body.mapped:\r\n        {set mappedBodies to mappedBodies + 1}\r\n    |else:\r\n        {if body.bodyType.invariantName != \"Star\":\r\n            {if body.terraformState.invariantName = \"Candidate for terraforming\" \r\n             || body.terraformState.invariantName = \"Terraformed\":\r\n                {if reportTerraformables:\r\n                    {if !toMapList[body.shortname]: \r\n                        {set toMapList to cat(toMapList, [body.shortname])}\r\n                    } \r\n                }\r\n            |elif reportPlanetTypes[body.planetClass.invariantName]:\r\n                {if !toMapList[body.shortname]: \r\n                    {set toMapList to cat(toMapList, [body.shortname])}\r\n                }\r\n            |elif body.estimatedvalue > highValueThreshold:\r\n                {if !toMapList[body.shortname]: \r\n                    {set toMapList to cat(toMapList, [body.shortname])}\r\n                } \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{_ Begin speaking _}\r\n\r\n{if len(toMapList) > 0:\r\n\r\n    {if len(toMapList) = 1: Body |else: Bodies}\r\n\r\n    {set cur to 0}\r\n    {while cur < len(toMapList):\r\n        {P(toMapList[cur])}\r\n        {set cur to cur + 1}\r\n        {if cur = len(toMapList) - 1: and\r\n        |elif cur < len(toMapList) - 1:,\r\n        }\r\n    }\r\n\r\n    {if len(toMapList) = 1: is |else: are }\r\n    {if event.type = \"Body mapped\": {OneOf(\"also\")} }\r\n    {if len(toMapList) = 1: a }\r\n    {OneOf(\"recommended\", \"good\")}\r\n    {set candidates to:\r\n        {if len(toMapList) > 1: candidates |else: candidate}\r\n    }\r\n    {OneOf('{candidates} for mapping', '{candidates} to map', 'mapping {candidates}')}.\r\n\r\n|elif mappedBodies > 0:\r\n\r\n    {OneOf(\r\n        \"You have mapped all {if mappedBodies < totalBodies: {OneOf(\\\"worthwhile\\\", \\\"interesting\\\")}} bodies.\",\r\n        \"All {OneOf( \\\"{if mappedBodies < totalBodies: worthwhile} bodies\\\", \\\"bodies of interest\\\" )} {OneOf( \\\"have been mapped.\\\", \\\"are now mapped.\\\" )}\"\r\n    )}\r\n}",
      "default": true,
      "name": "Bodies to map",
      "description": "Reports all the unmapped bodies in the system that are worth mapping"
    },
    "Body atmosphere report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{set reportAtmoPressure to 1}   {_ configúralo a 1 si quieres escuchar acerca de la presión atmosférica. _}\r\n\r\n{set reportAtmoTempScale to 1}  {_ configúralo a 0 si quieres escuchar las temperaturas en Kelvin _}\r\n                                {_ configúralo a 1 si quieres escuchar las temperaturas en Celsius _}\r\n                                {_ configúralo a 2 si quieres escuchar las temperaturas en Fahrenheit _}\r\n                                {_ configúralo a 3 si no quieres escuchar las temperaturas de los cuerpos _}\r\n\r\n{_ Define functions for converting temperature scales _}\r\n{set ToCelsius(kelvin) to: {round(kelvin - 273, 0)}}\r\n{set ToFahrenheit(kelvin) to: {round((kelvin-273)*9/5 + 32 , 0)}}\r\n{set TempCalc(kelvin) to: \r\n    {if reportAtmoTempScale = 0: {kelvin}}\r\n    {if reportAtmoTempScale = 1: {ToCelsius(kelvin)}}\r\n    {if reportAtmoTempScale = 2: {ToFahrenheit(kelvin)}}\r\n}\r\n\r\n{_ Name our temperature scale _}\r\n{if reportAtmoTempScale = 0: {set tempscale to: Kelvin}}\r\n{if reportAtmoTempScale = 1: {set tempscale to: grados centígrados}}\r\n{if reportAtmoTempScale = 2: {set tempscale to: grados Fahrenheit}}\r\n\r\n{_ Fetch from context }\r\n{if event: \r\n    {set reportbody to event} \r\n}\r\n{if !event.name || event.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    Lo siento, no me queda claro a que cuerpo estelar se refiere\r\n\r\n|else:\r\n\r\n    {if find(reportbody.planettype, \"Gigante\") >= 0:\r\n        {if find(reportbody.planettype, \"Clase\") >= 0: \r\n            {set sudarsky to Occasionally(3, \"Sud-dar-eskai\")}\r\n        }\r\n        {set planetdesc to OneOf(\"Los gigantes gaseosos {sudarsky} como este, tienen\", \"Este gigante gaseoso {sudarsky} tiene \")}\r\n        {if find(reportbody.planettype, \"Clase 5\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(1373)}}\r\n                temperaturas por encima de {Humanise(tempmin)} {tempscale}, {OneOf(\"y\", \"con\", \"formando\")}\r\n            }\r\n            una densa capa de nubes de {OneOf(\"hierro y silicatos en forma de vapor\", \"vapores de hierro y silicatos\")}.\r\n        |elif find(reportbody.planettype, \"Clase 4\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(354)}}\r\n                {set tempmax to: {TempCalc(903)}}\r\n                temperaturas {OneOf(\"de\", \"que oscilan\")} entre {Humanise(tempmin)} y {Humanise(tempmax)} {tempscale}, {OneOf(\"y\", \"con\", \"formando\")}\r\n            }\r\n            una densa capa de nubes de {OneOf(\"vapores metálicos alcalinos\", \"metales alcalinos en forma de vapor\")}.   \r\n        |elif find(reportbody.planettype, \"Clase 3\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(251)}}\r\n                {set tempmax to: {TempCalc(353)}}\r\n                temperaturas de superficie {OneOf(\"de\", \"que oscilan\")} entre {Humanise(tempmin)} y {Humanise(tempmax)} {tempscale},\r\n            }\r\n            una temperatura a la que {OneOf(\"ningún elemento gaseoso forma nubes\", \"no hay químicos adecuados para que en la atmósfera se pueda sustentar una capa de nubes\", \"a la atmósfera no se sostiene ninguna capa persistente de nubes\")}.\r\n\r\n        |elif find(reportbody.planettype, \"Clase 2\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(154)}}\r\n                {set tempmax to: {TempCalc(250)}}\r\n                temperaturas de superficie {OneOf(\"de\", \"que oscilan\")} entre los\r\n  \r\n            {if find(tempmin, \"-\") >= 0: {tempmin*-1}\r\n            |else: {Humanise(tempmin)}\r\n            } y\r\n\r\n            {if find(tempmax, \"-\") >= 0: {tempmax*-1} {tempscale} bajocero}\r\n            |else: {Humanise(tempmax)}{tempscale}\r\n            }, \r\n            \r\n            {OneOf(\"con\", \"formando\")} una densa capa de nubes de vapor de agua.  \r\n\r\n        |elif find(reportbody.planettype, \"Clase 1\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(153)}}\r\n                {set tempmax to: {TempCalc(83)}}\r\n                temperaturas de superficie de \r\n            \r\n            {if find(tempmax, \"-\") >= 0: {tempmax*-1} {tempscale} bajocero}\r\n            |else: {Humanise(tempmax)}{tempscale}\r\n            } \r\n            {Occasionally(2, OneOf(\" o menos\", \"como máximo\"))}, {OneOf(\"y\", \"con\", \"formando\")}\r\n             \r\n             una densa capa de nubes de amoníaco.  \r\n        }\r\n\r\n    |elif reportbody.atmosphere = \"Sin atmósfera\" || !reportbody.atmosphere:\r\n        {Occasionally(4, OneOf(\"No hay atmósfera.\", \"está carente de cualquier tipo de atmósfera.\", \"los años han limpiado cualquier rastro de atmósfera.\"))}\r\n\r\n        {if reportbody.temperature && reportAtmoTempScale < 3:\r\n            Las temperaturas de superficie se mueven en los\r\n            {set temp to: {TempCalc(reportbody.temperature)}}\r\n            \r\n            {if find(temp, \"-\")>=0: {temp*-1} {tempscale} bajocero}}\r\n            {if find(temp, \"-\")=-1: {temp} {tempscale}}\r\n        .\r\n\r\n    |elif reportbody.pressure: \r\n        {if reportbody.pressure < 0.1:\r\n            {set pressdesc to OneOf(\"casi inapreciable\", \"extremadamente delgada\")}\r\n        |elif reportbody.pressure < 0.25:\r\n            {set pressdesc to \"muy delgada\"}\r\n        |elif reportbody.pressure < 0.5:\r\n            {set pressdesc to \"delgada\"}\r\n        |elif reportbody.pressure < 2:\r\n            {set pressdesc to \"afable\"}\r\n        |elif reportbody.pressure < 10:\r\n            {set pressdesc to \"amplia\"}\r\n        |elif reportbody.pressure < 50:\r\n            {set pressdesc to OneOf(\"densa\", \"muy amplia\")}\r\n        |elif reportbody.pressure < 100:\r\n            {set pressdesc to OneOf(\"muy densa\", \"extremadamente amplia\")}\r\n        |elif reportbody.pressure >= 100:\r\n            {set pressdesc to OneOf(\"aplastante\", \"extremadamente densa\")}\r\n        }\r\n        {if find(reportbody.atmosphere, \"Rico\") >= 0:\r\n            {set element to token(reportbody.atmosphere, \" \", \"2\")}\r\n            {set desc to OneOf(\"Se ha detectado una \", \"Hay una \", \"Los sensores indican de la presencia de una\")}\r\n            {OneOf(\"{desc} {pressdesc} atmósfera {reportbody.atmosphere}\", \"La atmósfera de este planeta es {pressdesc} y {reportbody.atmosphere}\", \"La {pressdesc} atmósfera de este planeta es rica en {element}\")}\r\n\r\n        |elif find(atmo, \"vapor\") >= 0:\r\n            {OneOf(\"Su {pressdesc} atmósfera es de {reportbody.atmosphere}\", \"Su atmósfera es {pressdesc} y está compuesta de {reportbody.atmosphere}\", \"Su {pressdesc} atmósfera se compone de {reportbody.atmosphere}\")}\r\n\r\n        |else:\r\n            {set mostly to OneOf(\"principalmente\", \"sobre todo\", \"esencialmente\")}\r\n            {OneOf(\"La atmósfera de este planeta es {pressdesc}, y su composición es {mostly}\", \"Este planeta tiene una {pressdesc} atmósfera compuesta\")} \r\n            de {reportbody.atmosphere},\r\n        }\r\n        { if reportAtmoPressure > 0:\r\n            con una presión en superficie de {round(reportbody.pressure,1)} atmósferas terrestres,\r\n        }\r\n        {if reportbody.temperature && reportAtmoTempScale < 3:\r\n            {set temp to: {TempCalc(reportbody.temperature)}}\r\n            y una media de temperatura en superficie de \r\n            {if find(temp, \"-\")>=0: {temp*-1} {tempscale} bajocero}}\r\n            {if find(temp, \"-\")=-1: {temp} {tempscale}}\r\n    }\r\n}.\r\n",
      "default": true,
      "name": "Body atmosphere report",
      "description": "Informa de la atmósfera del cuerpo contextual"
    },
    "Body mapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Mapeado\", \"Mapeo {Occasionally(2, \\\"de superficie\\\")}\")}\r\n{Occasionally(2, \"del cuerpo estelar {P(event.name)}\")}\r\n{OneOf(\"finalizado\",\"completado\")}.\r\n\r\n{if event.probesused <= event.efficiencytarget:\r\n    Bonificación de eficiencia {OneOf(\"concedido\", \"garantizado\")}.\r\n}",
      "default": true,
      "name": "Body mapped",
      "description": "Se activa después de mapear un cuerpo con el EAAS"
    },
    "Body materials report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{set reportMats to 2} {_ Pon 0 si quieres escuchar los materiales que tienes por debajo de tu nivel mínimo de inventario _}\r\n                      {_ Pon 1 si quieres escuchar los materiales que tienes por debajo del nivel deseado _}\r\n                      {_ Pon 2 si quieres escuchar todos los materiales del cuerpo estelar _}\r\n\r\n{set reportMatConc to 2} {_ Pon 0 si no quieres escuchar los % de los materiales _}\r\n                         {_ Pon 1 si sólo deseas escuchar los % altos de materiales _}\r\n                         {_ Pon 2 si quieres escuchar desde los % buenos de materiales _}\r\n                         {_ Pon 3 si quieres escuchar todos los % de materiales _}\r\n\r\n\r\n{_ Fetch from context }\r\n{if event:\r\n    {set reportbody to event} \r\n}\r\n{if !event.name || event.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    {_ si todavía no se puede obtener el nombre del cuerpo...  _}\r\n    {Occasionally(2,\"Lo siento. \")}\r\n    {OneOf(\"Hay interferencias en el sistema electrónico, y no consigo resultados óptimos en el escaneo de este cuerpo estelar\",\r\n           \"No consigo datos claros del escáner\",\r\n           \"Los datos del escáner se han corrompido antes de su recepción\",\r\n           \"Parece que hay interferencias solares que no nos permiten el correcto escaneo de este planeta\"\r\n    )}\r\n\r\n\r\n|else:\r\n    {_ Define a function to obtain a material from inventory}\r\n    {set _inventory(required) to:\r\n        {for material in materials:\r\n            {if material.material = required:\r\n                {return material}\r\n            }\r\n        }\r\n    }\r\n\r\n    {if reportbody.landable:\r\n\r\n        {set goodmaterials to []}\r\n        {set greatmaterials to []}\r\n        {set allmaterials to []}\r\n        {for material in reportbody.materials:\r\n            {set inventoryMat to _inventory(material.material)}\r\n            {if (reportMats >= 0 && inventoryMat.amount < inventoryMat.minimum && inventoryMat.minimum > 0)\r\n              || (reportMats >= 1 && inventoryMat.amount < inventoryMat.desired && inventoryMat.desired > 0)\r\n              || (reportMats >= 2):\r\n                {if material.percentage >= material.definition.greatpctbody:\r\n                    {set greatmaterials to cat(greatmaterials, [material])}\r\n                |elif material.percentage >= material.definition.goodpctbody:\r\n                    {set goodmaterials to cat(goodmaterials, [material])}\r\n                |else:\r\n                    {set allmaterials to cat(allmaterials, [material])}\r\n                }\r\n            }\r\n        }\r\n\r\n        {if len(goodmaterials) > 0 || len(greatmaterials) > 0 || len(allmaterials) > 0:\r\n            {if !body:\r\n                Este planeta {F(\"Body Name Tidy\")}\r\n                {body}\r\n            |else:\r\n                Este cuerpo\r\n            }\r\n            contiene\r\n\r\n            {if len(greatmaterials) > 0:\r\n                niveles muy altos \r\n                {set cur to 0}\r\n                {set length to len(greatmaterials) - 1} de\r\n                {while cur < len(greatmaterials):\r\n                    {P(greatmaterials[cur].definition.name)}\r\n                    {if reportMatConc > 0: en un {round(greatmaterials[cur].percentage, 1)}% }\r\n                    {set cur to cur + 1}\r\n                    {if cur = length: y de\r\n                    |elif cur < length:,\r\n                    }\r\n                }\r\n            }\r\n\r\n            {if len(goodmaterials) > 0:\r\n                {if len(greatmaterials) > 0: y }\r\n                altos niveles\r\n                {set cur to 0}\r\n                {set length to len(goodmaterials) - 1} de\r\n                {while cur < len(goodmaterials):\r\n                    {P(goodmaterials[cur].definition.name)}\r\n                    {if reportMatConc > 1: en un {round(goodmaterials[cur].percentage, 1)}% }\r\n                    {set cur to cur + 1}\r\n                    {if cur = length: y de\r\n                    |elif cur < length:,\r\n                    }\r\n                }\r\n            }\r\n\r\n            {if len(greatmaterials) > 0 || len(goodmaterials) > 0:. }\r\n\r\n            {if len(allmaterials) > 0 && reportMats >= 2:\r\n                {if len(greatmaterials) > 0 || len(goodmaterials) > 0:\r\n                    Además, {OneOf(\"puede que encuentre\",\"el escaner también detecta\")} algo\r\n                |else:\r\n                    niveles considerables \r\n                }\r\n                {set cur to 0}\r\n                {set length to len(allmaterials) - 1} de \r\n                {while cur < len(allmaterials):\r\n                    {P(allmaterials[cur].definition.name)}\r\n                    {if reportMatConc > 2: en un {round(allmaterials[cur].percentage, 1)}% }\r\n                    {set cur to cur + 1}\r\n                    {if cur = length: y de\r\n                    |elif cur < length:,\r\n                    }\r\n                }.\r\n            }\r\n        }\r\n    }\r\n}",
      "default": true,
      "name": "Body materials report",
      "description": "Informa de los materiales disponibles en el cuerpo objetivo"
    },
    "Body report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{set reportGravity to 1}        {_ Set to 0 if you don't want to hear about the body's gravity. _} \r\n{set reportTerraformState to 1} {_ Set to 0 if you don't want to hear about the terraform state of the body. _}\r\n{set reportRings to 1}          {_ Set to 0 if you don't want to hear about the body's rings. _}\r\n{set reportRotation to 1}       {_ Set to 1 if you want to hear about the body's rotation. _}\r\n{set reportVolcanism to 1}      {_ Set to 0 if you don't want to hear about the body's volcanism. _}\r\n{set reportAtmosphere to 1}     {_ Set to 0 if you don't want to hear about the body's atmosphere. _}\r\n{set reportMaterials to 1}      {_ Set to 0 if you don't want to hear about the body's materials. _}\r\n{set reportScanValue to 1}      {_ Set to 1 if you want to hear about the body's estimated value. _}\r\n\r\n{_ Fetch from context }\r\n{if event: \r\n    {set reportbody to event} \r\n}\r\n{if !event.name || event.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\n{if !reportbody.name || reportbody.name = \"\":\n    No consigo entender a que cuerpo estelar se refiere\r\n\n|else:\n    El {if reportbody.shortname != reportbody.name: { OneOf(\"cuerpo\", \"cuerpo estelar\", \"objeto\")} }\r\n    {reportbody.shortname}, es un {reportbody.planettype}\r\n\r\n{_ F(\"Body Name Tidy\") _} {_ Cuando consiga que funcione se substituiría por el nombre del cuerpo. _}\r\n\n    {if reportbody.gravity < 0.5:\n        de baja gravedad\n    |elif reportbody.gravity <2:\n        de media gravedad\n    |elif reportbody.gravity <4:\n        de alta gravedad\n    |else:\n        de extrema gravedad\n    }\r\n\r\n    {if len(reportbody.rings) = 1: \n       {OneOf(\"con anillo de asteroides\",\"y anillado\")}\r\n    \r\n    |elif len(reportbody.rings) > 1:\r\n       con {len(reportbody.rings)} anillos de asteroides\n    },\n\n    {if reportbody.terraformstate = \"No terraformable\": \n\r\n    |else {reportbody.terraformstate}\n    },\n\n    {if type(reportbody.landable) != \"void\": \n        {Ocasionally(2,\"que es\")}\n        \r\n        {if reportbody.landable:\n            adecuado\n        |else:\n            inadecuado\n        }\n        para aterrizar\n    }\n    .\n\n\n\n    {if reportbody.landable :\n        Tiene un período de rotación\n        {if reportbody.rotationalperiod < -20.0:\n            retrógrado bajo\n        |elif reportbody.rotationalperiod < -0.5:\n            retrógrado\n        |elif reportbody.rotationalperiod < 0:\n            retrógrado alto\n        |elif reportbody.rotationalperiod <= 0.5:\n            alto\n        |elif reportbody.rotationalperiod > 20.0:\n            bajo\n        }\n        de \r\n        {if reportbody.rotationalperiod < 1: {round(24 * (reportbody.rotationalperiod))} horas\n        |else: {round(reportbody.rotationalperiod)} día{if round(reportbody.rotationalperiod) != 1:s} y {round(24 * ((reportbody.rotationalperiod) - round(reportbody.rotationalperiod)))} horas\r\n         } terrestres,\r\n\r\n    {if reportbody.tidallylocked = true:\n        con {OneOf(\"acoplamiento de marea\",\"rotación sincrónica\")}\n    }.\r\n\r\n\r\n{if len(allmaterials) != \"\": {F(\"Body materials report\")}\r\n\r\n}}\r\n\r\n {if reportVolcanism: {F(\"Body volcanism report\")} }\r\n {if reportAtmosphere: {F(\"Body atmosphere report\")} }\r\n {if reportMaterial: {F(\"Body materials report\")} }\r\n {if reportScanValue: {F(\"Report last scan value\")} }\r\n\r\n}\r\n{SetState('scanned_yet', reportbody.name)}",
      "default": true,
      "name": "Body report",
      "description": "Informa sobre el contenido del cuerpo estelar"
    },
    "Body report summary": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n\r\n{set reportTerraformables to 1}         {_ Reports terraformable and terraformed bodies _}\r\n{set reportPlanetTypes to 1}            {_ Reports Earth-like and water worlds _}\r\n{set reportMass to 1}                   {_ Reports notable masses (relative to Earth's) _}\r\n{set reportRadius to 1}                 {_ Reports notable radii (in kilometers) _}\r\n{set reportDensity to 0}                {_ Reports notable densities (in kilograms per cubic meter) _}\r\n{set reportGravity to 1}                {_ Reports notable gravity (in G's) for landable bodies _}\r\n{set reportTemperature to 1}            {_ Reports notable temperatures (in Kelvin) _}\r\n{set reportMaterials to 1}              {_ Reports materials per preferences in the `Body materials` script. _}\r\n{set reportLandableVolcanism to 0}      {_ Reports volcanism on landable worlds _}\r\n{set reportRings to 1}                  {_ Reports ring details _}\r\n{set reportInterestingOrbits to 1}      {_ Reports notable orbital characteristics _}\r\n{set reportRapidRotation to 1}          {_ Reports very fast rotating bodies _}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody: \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{_ Begin processing _}\r\n\r\n{set notables to []}\r\n\r\n{if reportInterestingOrbits:\r\n\r\n    {set orbitNotables to []}\r\n\r\n    {if reportbody.eccentricityprobability > 99.9:\r\n        {set orbitNotables to cat(orbitNotables, [cat(\"incredibly \", OneOf(\"elliptical\", \"oblong\", \"elongated\"))])}\r\n    |elif reportbody.eccentricityprobability > 99:\r\n        {set orbitNotables to cat(orbitNotables, [cat(\"extremely \", OneOf(\"elliptical\", \"oblong\", \"elongated\"))])}\r\n    |elif reportbody.eccentricityprobability > 97:\r\n        {set orbitNotables to cat(orbitNotables, [cat(\"unusually \", OneOf(\"elliptical\", \"oblong\", \"elongated\"))])}\r\n    }\r\n\r\n    {if reportbody.inclinationprobability > 99.9:\r\n        {set orbitNotables to cat(orbitNotables, [cat(\"incredibly inclined\")])}\r\n    |elif reportbody.inclinationprobability > 99:\r\n        {set orbitNotables to cat(orbitNotables, [cat(\"extremely inclined\")])}\r\n    |elif reportbody.inclinationprobability > 97:\r\n        {set orbitNotables to cat(orbitNotables, [cat(\"unusually inclined\")])}\r\n    }\r\n\r\n    {if reportbody.orbitalperiod < 0: {set retrograde to cat(\" \", \"retrograde\", \" \")} }\r\n    {if reportbody.orbitalperiodprobability < 0.1:\r\n        {set orbitNotables to cat(orbitNotables, [cat(\"incredibly fast\", retrograde)])}\r\n    |elif reportbody.orbitalperiodprobability < 1:\r\n        {set orbitNotables to cat(orbitNotables, [cat(\"extremely fast\", retrograde)])}\r\n    |elif reportbody.orbitalperiodprobability < 3:\r\n        {set orbitNotables to cat(orbitNotables, [cat(\"unusually fast\", retrograde)])}\r\n    }\r\n\r\n    {if len(orbitNotables) > 0:\r\n        {if StartsWithVowel(orbitNotables[0]): {set a to \"an\"} |else: {set a to \"a\"} }\r\n        {set cur to 0}\r\n        {set length to len(orbitNotables) - 1}\r\n        {while cur < len(orbitNotables):\r\n            {set orbitdescription to cat(orbitdescription, orbitNotables[cur])}\n            {set cur to cur + 1}\n            {if cur = length: \r\n                {set orbitdescription to cat(orbitdescription, \" and \")}\n            |elif cur < length:\r\n                {set orbitdescription to cat(orbitdescription, \", \")}\n            }\n        }\r\n        {set notables to cat(notables, [cat(a, \" \", orbitdescription, \" \", \"orbit\")])}\r\n    }\r\n}\r\n\r\n{if reportbody.rotationalperiod < 0: {set retrograde to cat(\" \", \"retrograde\", \" \")} }\r\n{if reportRapidRotation:\r\n    {if !retrograde && reportbody.rotationalperiodprobability < 0.1:\r\n        {set notables to cat(notables, [cat(\"an incredibly short rotational period of \", Humanise(reportbody.rotationalperiod), \" days\")])}\r\n    |elif !retrograde && reportbody.rotationalperiodprobability < 1:\r\n        {set notables to cat(notables, [cat(\"an extremely short rotational period of \", Humanise(reportbody.rotationalperiod), \" days\")])}\r\n    |elif !retrograde && reportbody.rotationalperiodprobability < 3:\r\n        {set notables to cat(notables, [cat(\"an unusually short rotational period of \", Humanise(reportbody.rotationalperiod), \" days\")])}\r\n    }\r\n}\r\n\r\n{if reportMass:\r\n    {if reportbody.massprobability < 0.1:\r\n        {set notables to cat(notables, [cat(\"an incredibly low mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n    |elif reportbody.massprobability < 1:\r\n        {set notables to cat(notables, [cat(\"an extremely low mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n    |elif reportbody.massprobability < 3:\r\n        {set notables to cat(notables, [cat(\"an unusually low mass at \", Humanise(reportbody.earthmass), \" times Earth's \")])}\r\n    |elif reportbody.massprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"an incredibly high mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n    |elif reportbody.massprobability > 99:\r\n        {set notables to cat(notables, [cat(\"an extremely high mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n    |elif reportbody.massprobability > 97:\r\n        {set notables to cat(notables, [cat(\"an unusually high mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n    }\r\n}\r\n\r\n{if reportRadius:\r\n    {if reportbody.radiusprobability < 0.1:\r\n        {set notables to cat(notables, [cat(\"an incredibly low radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n    |elif reportbody.radiusprobability < 1:\r\n        {set notables to cat(notables, [cat(\"an extremely low radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n    |elif reportbody.radiusprobability < 3:\r\n        {set notables to cat(notables, [cat(\"an unusually low radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n    |elif reportbody.radiusprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"an extremely high radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n    |elif reportbody.radiusprobability > 99:\r\n        {set notables to cat(notables, [cat(\"an incredibly large radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n    |elif reportbody.radiusprobability > 97:\r\n        {set notables to cat(notables, [cat(\"an unusually high radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n    }\r\n}\r\n\r\n{if reportTemperature:\r\n    {if reportbody.tempprobability < 0.1:\r\n        {set notables to cat(notables, [cat(\"an incredibly low surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n    |elif reportbody.tempprobability < 1:\r\n        {set notables to cat(notables, [cat(\"an extremely low surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n    |elif reportbody.tempprobability < 3:\r\n        {set notables to cat(notables, [cat(\"an unusually low surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n    |elif reportbody.tempprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"an extremely high surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n    |elif reportbody.tempprobability > 99:\r\n        {set notables to cat(notables, [cat(\"an incredibly high surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n    |elif reportbody.tempprobability > 97:\r\n        {set notables to cat(notables, [cat(\"an unusually high surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n    }\r\n}\r\n\r\n{if reportGravity && reportbody.landable:\r\n    {if reportbody.gravityprobability < 0.1:\r\n        {set notables to cat(notables, [cat(\"an incredibly low gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n    |elif reportbody.gravityprobability < 1:\r\n        {set notables to cat(notables, [cat(\"an extremely low gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n    |elif reportbody.gravityprobability < 3:\r\n        {set notables to cat(notables, [cat(\"an unusually low gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n    |elif reportbody.gravityprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"an incredibly high gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n    |elif reportbody.gravityprobability > 99:\r\n        {set notables to cat(notables, [cat(\"an extremely high gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n    |elif reportbody.gravityprobability > 97:\r\n        {set notables to cat(notables, [cat(\"an unusually high gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n    }\r\n}\r\n\r\n\r\n{if reportDensity:\r\n    {if reportbody.densityprobability < 0.1:\r\n        {set notables to cat(notables, [cat(\"an incredibly low density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n    |elif reportbody.densityprobability < 1:\r\n        {set notables to cat(notables, [cat(\"an extremely low density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n    |elif reportbody.densityprobability < 3:\r\n        {set notables to cat(notables, [cat(\"an unusually low density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n    |elif reportbody.densityprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"an incredibly high density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n    |elif reportbody.densityprobability > 99:\r\n        {set notables to cat(notables, [cat(\"an extremely high density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n    |elif reportbody.densityprobability > 97:\r\n        {set notables to cat(notables, [cat(\"an unusually high density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n    }\r\n}\r\n\r\n{if reportVolcanism:\r\n    {if reportbody.volcanism && reportbody.landable:\r\n        {set notables to cat(notables, [cat(OneOf(\"volcanic\", \"tectonic\"), \" activity\")])}\r\n    }\r\n}\r\n\r\n{if reportRings:\r\n    {if reportbody.rings:\r\n        {set ringcompositions to []}\r\n        {set cur to 0}\r\n        {for ring in reportbody.rings:\r\n            {if find(ring.name, \"Ring\") > -1:\r\n                {if find(ringcompositions, ring.composition) = -1:\r\n                    {set ringcompositions to cat(ringcompositions, [cat(ring.composition)])}\r\n                }\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n        {set cur to 0}\r\n        {set length to len(ringcompositions) - 1}\r\n        {while cur < len(ringcompositions):\r\n            {set ringsdescription to cat(ringsdescription, ringcompositions[cur])}\n            {set cur to cur + 1}\n            {if cur = length: \r\n                {set ringsdescription to cat(ringsdescription, \" and \")}\n            |elif cur < length:\r\n                {set ringsdecription to cat(ringsdescription, \", \")}\n            }\n        }\r\n        {if ringsdescription:\r\n            {if len(ringcompositions) = 1:\r\n                {if StartsWithVowel(reportbody.reserves): \r\n                    {set a to \"an \"} \r\n                |else: \r\n                    {set a to \"a \"}\r\n                }\r\n                {set rings to \"ring\"}\r\n            |else:\r\n                {set rings to \"rings\"} \r\n            }\r\n            {if reportbody.reserveLevel.invariantName != \"None\": \r\n                {set reserves to reportbody.reserves}\r\n            }\r\n            {set notables to cat(notables, [cat(a, \" \", reserves, \" \", ringsdescription, \" \", rings)])}\r\n        }\r\n    }\r\n}\r\n\r\n{if reportTerraformables:\r\n    {if reportbody.terraformState.invariantName = \"Candidate for terraforming\":\r\n        {set notables to cat(notables, [OneOf(\"potential for terraforming\", \"terraformable conditions\")])}\r\n    |elif reportbody.terraformState.invariantName = \"Terraformed\":\r\n        {set notables to cat(notables, [\"terraformed conditions\"])}\r\n    }\r\n}\r\n\r\n{if reportPlanetTypes:\r\n    {if reportbody.planetClass.invariantName = \"Earth-like world\":\r\n        {set notables to cat(notables, [\"Earth-like conditions\"])}\r\n    |elif reportbody.planetClass.invariantName = \"Water world\":\r\n        {set notables to cat(notables, [OneOf(\"abundant liquid water\", \"abundant liquid water at the surface\")])}\r\n    }\r\n}\r\n\r\n{_ Begin speaking _}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n\r\n    I'm not sure which body you are asking about.\r\n\r\n|else:\r\n\r\n    {if len(notables) > 0:\r\n        {if reportbody.shortname != reportbody.bodyname:\r\n            {if reportbody.bodytype:\r\n                {reportbody.bodytype}\r\n            |else:\r\n                Body\r\n            }\r\n            {P(reportbody.shortname)}\r\n        |else:\r\n            {P(reportbody.bodyname)}\r\n        }\r\n        is\r\n\r\n        {if len(notables) = 1:\r\n            {set desc to \"notable\"}\r\n        |elif len(notables) = 2:\r\n            {set desc to OneOf('interesting', 'notable', 'remarkable')}\r\n        |elif len(notables) = 3:\r\n            {set desc to OneOf('exceptional', 'remarkable')}\r\n        |elif len(notables) = 4:\r\n            {set desc to OneOf('extraordinary')}\r\n        |elif len(notables) >= 5:\r\n            {set desc to OneOf('one of a kind', 'unique')}\r\n        }\r\n        {OneOf(\"{desc},\", \"{if StartsWithVowel(desc): an |else: a } {desc} {P(reportbody.planettype)}\")}\r\n\r\n        {if len(notables) = 1:\r\n            with {notables[0]}.\r\n        |elif len(notables) = 2:\r\n            with {notables[0]} and {notables[1]}.\r\n        |elif len(notables) = 3:\r\n            with {notables[0]}, {notables[1]} and {notables[2]}.\r\n        |elif len(notables) = 4:\r\n            with {notables[0]}, {notables[1]}, {notables[2]}, and {notables[3]}.\r\n        |elif len(notables) >= 5:\r\n            with {notables[0]}, {notables[1]}, {notables[2]}, {notables[3]}, and {notables[4]}.\r\n        }\r\n    }\r\n\r\n    {if reportMaterials:\r\n        {F(\"Body materials report\")}\r\n    }\r\n}",
      "default": true,
      "name": "Body report summary",
      "description": "Function to report on summary details of the contextual body"
    },
    "Body scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'body')}\n{SetState('eddi_context_last_action', 'scan')}\n{SetState('eddi_context_body_system', system.name)}\n{SetState('eddi_context_body_name', event.name)}\n{SetState('eddi_context_last_scan_estimated_value', event.estimatedvalue)}\r\n\r\n{_ Fetch from context }\r\n{if event: \r\n    {set reportbody to event} \r\n}\r\n{if !event.name || event.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\n\r\n{_ F(\"Body Name Tidy\") _} {_ De momento da errores _}\r\n\n{Pause(1000)}\n\n{OneOf(\"Escaneo\", \"Análisis\")} de {reportbody.planettype} {_ reportbody.shortname _} {OneOf(\"completado\", \"terminado\", \"finalizado\")}.\n\n\r\n{if state.eddi_context_last_scan_estimated_value>10000:\n{F(\"Report last scan value\")}\r\n\r\n{SetState('lastscanbody', event.name)}\n}\n\r\n{if ship.Role.edname = \"_Exploration\" || ship.Role.edname = \"_Multipurpose\":\r\n    {Pause(500)}\r\n    {F(\"Body report\")}\r\n}",
      "default": true,
      "name": "Body scanned",
      "description": "Se activa cuando completas el escaneo de un cuerpo planetario"
    },
    "Body volcanism report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{if event: \r\n    {set reportbody to event} \r\n}\r\n{if !event.name || event.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    No se a que cuerpo estelar se refiere\r\n|else:\r\n    {if (reportbody.volcanism || len(reportbody.volcanism) > 0) && reportVolcanism > 0:\r\n        {OneOf(\"Se ha detectado\",\"Los sensores detectan\",\"Este {reportbody.planettype} tiene\")}\r\n        {if reportbody.volcanism.type = \"Geysers\":\r\n            {if reportbody.volcanism.invariantAmount = 'Major':\r\n                un alto número de \r\n            |elif reportbody.volcanism.invariantAmount = 'Minor':\r\n                poca cantidad de\r\n            }\r\n            active {reportbody.volcanism.composition} géiseres\r\n            {Occasionally(2, \"en la superficie\")}\r\n        |else:\r\n            {if reportbody.volcanism.invariantAmount = 'Major':\r\n                un alto número de \r\n            |elif reportbody.volcanism.invariantAmount = 'Minor':\r\n                poca cantidad de \r\n            }\r\n           flujos de {reportbody.volcanism.composition} activos\r\n            {Occasionally(2, \"en la superficie\")}\r\n        }.\r\n    }\r\n}",
      "default": true,
      "name": "Body volcanism report",
      "description": "Informa del vulcanismo del cuerpo contextual"
    },
    "Bond awarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Bond awarded }\n{_ Triggered when you are awarded a combat bond }\n\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'bond')}\n{SetState('eddi_context_last_action', 'award')}\n{SetState('eddi_context_bond_amount', event.reward)}\n{SetState('eddi_context_bond_faction', event.awardingfaction)}\n\nNave de {event.victimfaction} {OneOf(\"destruida\",\"eliminada\",\"derribada\")},\n\n{event.reward} créditos otorgados de {event.awardingfaction}.\n",
      "default": true,
      "name": "Bond awarded",
      "description": "Se activa cuando se otorga un bono de combate"
    },
    "Bond redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'bond')}\n{SetState('eddi_context_last_action', 'redeem')}\n{SetState('eddi_context_bond_amount', event.amount)}\n\nBonos de combate por valor de {Humanise(event.amount)} créditos \n{Occasionally(2, OneOf(\"han sido\", \"\"))} \n{OneOf(\"otorgados\", \"reclamados\")} \n\n{Occasionally(2, \"\n  {if len(event.rewards) = 1 && len(event.rewards[0].faction) > 0:\n    de {P(event.rewards[0].faction)}\n  |else:\n    . \n    {set cur to 0}\n    {while cur < len(event.rewards):\n      {if len(event.rewards[cur].faction) > 0:\n        {if cur = 0:\n        |elif cur < len(event.rewards) - 1:\n            , \n        |else:\n            y\n        }\n        {Humanise(event.rewards[cur].amount)} créditos de\n        {P(event.rewards[cur].faction)} \n        {set cur to cur + 1}\n      }\n    }\n  }\n\")}\n\n{if event.brokerpercentage && event.brokerpercentage > 0:\n    después de deducir \n    {OneOf(\"un pago\", \"una recompensa\")} de\n    {round((event.amount / (100 - event.brokerpercentage)) * event.brokerpercentage, 0)} créditos\n}.",
      "default": true,
      "name": "Bond redeemed",
      "description": "Se activa cuando canjeas un bono de combate"
    },
    "Bounty awarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bounty_name', event.target)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.reward)}\r\n\r\n{Pause(500)}\r\n{if len(event.rewards) = 1:\r\n    Recibido bono de recompensa de {event.reward} créditos por parte de la facción {event.rewards[0].faction}\r\n|elif len(event.rewards) > 1:\r\n    Recibidos {len(event.rewards)} bonos de recompensa por un total de {event.reward} créditos\r\n}\r\n{if event.shared:\r\n    para repartir entre sus compañeros de escuadrón y usted.\r\n}.\r\n",
      "default": true,
      "name": "Bounty awarded",
      "description": "Se activa cuando te sumas una recompensa"
    },
    "Bounty incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_bounty_name', event.victim)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.bounty)}\r\n\r\nLa facción {event.faction} acaba de poner una recompensa de {event.bounty} créditos por nuestra cabeza.",
      "default": true,
      "name": "Bounty incurred",
      "description": "Se activa cuando te ponen una recompensa"
    },
    "Bounty paid": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'pay')}\r\n{SetState('eddi_context_fine_amount', event.amount)}\r\n\r\n\r\nRecompensa de {Humanise(event.amount)} créditos pagada.",
      "default": true,
      "name": "Bounty paid",
      "description": "Triggered when you pay a bounty"
    },
    "Bounty redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'bond')}\n{SetState('eddi_context_last_action', 'redeem')}\n{SetState('eddi_context_bond_amount', event.amount)}\n\n\n{OneOf(\"Otorgados\", \"Reclamados\")} \nbonos de combate por valor de {(event.amount)} créditos \n\n{Occasionally(2, \"\n  {if len(event.rewards) = 1 && len(event.rewards[0].faction) > 0:\n    de {P(event.rewards[0].faction)}\n  |else:\n    . \n    {set cur to 0}\n    {while cur < len(event.rewards):\n      {if len(event.rewards[cur].faction) > 0:\n        {if cur = 0:\n        |elif cur < len(event.rewards) - 1:\n            , \n        |else:\n            y\n        }\n        {(event.rewards[cur].amount)} créditos de \n        {P(event.rewards[cur].faction)} \n        {set cur to cur + 1}\n      } \n    } \n  } \n\")} \n\n{if event.brokerpercentage && event.brokerpercentage > 0:\n    después de deducir \n    {OneOf(\"un pago\", \"una recompensa\")} de\n    {round((event.amount / (100 - event.brokerpercentage)) * event.brokerpercentage, 0)} créditos\n}.",
      "default": true,
      "name": "Bounty redeemed",
      "description": "Se activa cuando cobras una recompensa (TEST)"
    },
    "Cargo depot": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Cargo depot }\r\n{_ Triggered when collecting or delivering cargo for a wing mission }\r\n\r\n\r\n{if event.updatetype = \"Collect\":\r\n    Se han añadido {event.amount} tonelada{if event.amount != 1:s} de {event.commodity} para el depósito de la misión.\r\n|elif event.updatetype = \"Deliver\":\r\n   Hemos entregado {event.amount} tonelada{if event.amount != 1:s} de {event.commodity} al depósito de la misión.\r\n\r\n    {Pause(500)}\r\n    {set remaining to event.totaltodeliver - event.delivered}\r\n    {set haulage to HaulageDetails(event.missionid)}\r\n\r\nLos requerimientos de\r\n\r\n    {if find(haulage.name, \"Wing\") > -1:\r\n        la misión de escuadrón\r\n    |elif find(haulage.name, \"Rank\") > -1:\r\n        la misión Naval\r\n    |else:\r\n        su misión\r\n    }\r\n\r\n    {if remaining = 0:\r\n         ya se han completado\r\n    |else:\r\n        están en un {round(event.delivered / event.totaltodeliver * 100, 0)} porciento completado.\r\n    }\r\n}",
      "default": false,
      "name": "Cargo depot",
      "description": "Triggered when collecting or delivering cargo for a wing mission (TEST)"
    },
    "Cargo report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Cargo report }\n{_ Report current cargo manifest }\n\n{set cargocarried to 0}\n{set haulage to 0}\n{set illegal to false}\n{set stolen to false}\n\n{if len(inventory) > 0:\n    {for cargo in inventory:\n        {set cargocarried to cargocarried + cargo.total}\n        {set haulage to haulage + cargo.haulage}\n        {if cargo.stolen > 0: {set stolen to true}}\n        {if status.docked:\n            {for prohibited in station.prohibited:\n                {if cargo.name = prohibited: {set illegal to true}}\n            }\n        }\n    }\n}\n\n\n{if cargocarried > 0:\n    {if cargocarried = ship.cargocapacity:\n        {OneOf(\"La bodega de carga está llena\", \"el compartimento de carga está lleno\")}.\n    |else:\n        {Occasionally(2, \"Ahora mismo\")} {OneOf(\"llevamos\", \"transportamos\")} \n    }\n\n    {if len(inventory) = 1:\n        {if inventory[0].name = \"Drón\":\n            {if cargocarried = 1:un |else:{cargocarried}} drón{if cargocarried != 1:es}.\n        |else:\n           {if cargocarried = 1:una |else:{cargocarried}} tonelada{if cargocarried != 1:s} de {inventory[0].name}.\n        }\n    |else:\n        {if cargocarried < ship.cargocapacity: de cargamento.}\n        {OneOf(\"la siguiente mercancía\",\"lo siguiente\")}.\n        {set position to 0}\n        {for cargo in inventory:\n            \n            {if cargo.name = \"Drón\":\n                 {if cargo.total = 1:un |else:{cargo.total}} drón{if cargo.total != 1:es}\n            |else:\n               {if cargo.total = 1:una |else:{cargo.total}} tonelada{if cargo.total != 1:s} de {cargo.name}\n            }\n            {set position to position + 1}\n            {if position = len(inventory) - 1: , y |else:,}\n        }\n    }.\n\n    {if cargocarried < ship.cargocapacity:\n        {set free to ship.cargocapacity - cargocarried}\n        Tienes {free} tonelada{if free != 1:s} {OneOf(\"\",\"de espacio libre\")}{if free != 1:s}.\n    }\n\n    {if stolen || illegal:\n        Atención: Llevamos carga\n        {if stolen: robada}\n        {if illegal:\n            {if stolen:, e }\n            ilegal en esta jurisdicción\n        }.\n    }\n\n|else:\n    {OneOf(\"Tu bahía de carga está vacía.\",\"Tu bodega de carga está vacía.\",\"No tienes carga.\",\"No llevas ninguna carga.\")}\n}\n\n",
      "default": true,
      "name": "Cargo report",
      "description": "Informa de tu carga actual"
    },
    "Cargo scoop": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": null,
      "default": true,
      "name": "Cargo scoop",
      "description": "Triggered when you deploy or retract your cargo scoop"
    },
    "Cargo wingupdate": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Cargo wingupdate }\r\n{_ Triggered when a wing-mate collects or delivers cargo for a wing mission }\r\n\r\n\r\n{if event.updatetype = \"Collect\":\r\n    Your wing mate has collected {event.amount} tonne{if event.amount != 1:s}\r\n    {if event.commodity != \"Unknown\": of {event.commodity}} from the mission depot.\r\n|elif event.updatetype = \"Deliver\":\r\n    Your wing mate has delivered {event.amount} tonne{if event.amount != 1:s} \r\n    {if event.commodity != \"Unknown\": of {event.commodity}} to the mission depot.\r\n}\r\n\r\n{Pause(500)}\r\n{set remaining to event.totaltodeliver - event.delivered}\r\n{if remaining = 0:\r\n    Wing mission requirements are now completed.\r\n|elif event.updatetype = \"Deliver\":\r\n    Wing mission is now {round(event.delivered / event.totaltodeliver * 100, 0)} percent complete.\r\n}\r\n",
      "default": true,
      "name": "Cargo wingupdate",
      "description": "Triggered when a wing-mate collects or delivers cargo for a wing mission"
    },
    "Cleared save": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'save')}\n{SetState('eddi_context_last_action', 'clear')}\n\nAdiós {F(\"Honorific\")}. Ha sido un verdadero honor.",
      "default": true,
      "name": "Cleared save",
      "description": "Se activa cuando eliminas tu partida"
    },
    "Cockpit breached": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'cockpit')}\n{SetState('eddi_context_last_action', 'breach')}\n\n{OneOf(\"¿Soy yo? ¿o aquí hacemuchofrío?\",\"Atención. Cristal de cabina destruido. Activando módulo de supervivencia.\")}",
      "default": true,
      "name": "Cockpit breached",
      "description": "Se activa cuando se rompe la cabina de la nave"
    },
    "Combat promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'rank')}\r\n{SetState('eddi_context_last_action', 'promotion')}\r\n{SetState('eddi_context_rank_name', 'combat')}\r\n{SetState('eddi_context_rank_amount', event.rating)}\r\n\r\n{F(\"Honorific\")}, se ha reconocido su habilidad de combate.",
      "default": true,
      "name": "Combat promotion",
      "description": "Se activa cuando aumenta tu rango de combate."
    },
    "Commander continued": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Commander continued }\r\n{_ Triggered when you continue an existing game }\r\n\r\n\r\n{SetState('eddi_context_last_subject', 'load_game')}\r\n{SetState('eddi_context_system_system', system.name)}\r\n{SetState('eddi_context_body_name', body.name)}\r\n{SetState('eddi_context_station_name', station.name)}\r\n{SetState('eddi_context_lastdocked', station.name)}\r\n{SetState('eddi_context_currentshipid', event.shipid)}\r\n\r\n{_ If VoiceAttack is not used, set Auto Route to no, and set default Routing system _}\r\n{if state.eddi_context_mission_route_useauto = \"\" || state.eddi_context_mission_route_useauto = null:\r\n    {SetState('eddi_context_mission_route_useauto', \"no\")}\r\n    {SetState('missionsrouteuseeddi', \"no\")}\r\n}\r\n\r\n\r\n{set time to token(format(SecondsSince(0), \"dl:yyyy-MM-dd HH:mm:ss\"), \" \", 1)}\r\n{set time to cast(token(time, \":\", 0), \"n\")}\r\n\r\n{if cmdr.gender = \"Female\":\r\n    {set o to \"a\"}{set e to \"a\"}\r\n|else:\r\n    {set o to \"o\"}{set e to \"e\"}\r\n}\r\n\r\n{if time < 12:\r\n    Buenos días\r\n|elif time > 11 && time < 20:\r\n    Buenas tardes\r\n|else:\r\n   Buenas noches\r\n}\r\n\r\n{F(\"Honorific\")}{OneOf(\". Bienvenid{o} de nuevo\",\", l{e} estaba esperando\")}.\r\n\r\n{set station to F(\"Mission check station\")}\r\n{set system to F(\"Mission check system\")}\r\n{set expiring to F(\"Mission Check Expiring\")}\r\n\r\n{if station: {station}\r\n|elif system: {system}\r\n|else: {F(\"Mission check galaxy\")}\r\n}\r\n\r\n{if expiring: {expiring}}\r\n\r\n\r\n{_ Set up Mission Route from saved data _}\r\n{set missionsdata to split(state.missionsdata, \"+=\")}\r\n{SetState('missionsrouteuseeddi', missionsdata[0])}\r\n{SetState('missionsroutetype', missionsdata[1])}\r\n{SetState('missionsdestination', missionsdata[2])}\r\n{SetState('missionsroutedistance', missionsdata[3])}\r\n{SetState('missionsroute', missionsdata[4])}\r\n\r\n{if missionsCount > 0:\r\n    {SetState('to_system', state.missionsdestination)}\r\n    {if missionsCount > 1: {OneOf(\"La primera\", \"para empezar\", \"Inicialmente\")} }\r\n    el destino {Occasionally(2,\"de la siguiente misión\")} es {state.to_system},\r\n    {Occasionally(2, \"{OneOf('ha sido', 'está')}\")} {OneOf(\"seleccionada\", \"activa\")}.\r\n\r\n    {SetState('from_system', state.eddi_context_system_name)}\r\n    {F(\"Mission Route Get Distance\")}\r\n    {if state.distance > 0:\r\n        La distancia {Occasionally(2,\"al {OneOf('sistema','objetivo','{state.to_system}')}\")}\r\n       es de {state.distance)} años luz.\r\n        {SetState('eddi_context_mission_destination_locked', \"no\")}\r\n    }\r\n}.\r\n\r\n{_ Check Fines & Bounties}.\r\n{F(\"FinesBounties_CheckShip\")}.\r\n{F(\"FinesBounties_CheckContacts\")}.\r\n\r\n\r\n{set fixed to false}\r\n{set gimbal to false}\r\n{set turret to false}\r\n{set weapons_array to \"\"}\r\n\r\n{for hp in ship.hardpoints:\r\n\r\n    {if type(hp.module.mount) != \"void\":\r\n        {for index, value in hp.module.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            {SetState('eddi_weapons_fixed', true)}\r\n        |elif mount = 1:\r\n            {SetState('eddi_weapons_gimbal', true)}\r\n        |elif mount = 2:\r\n            {SetState('eddi_weapons_turret', true)}\r\n        }\r\n        {set weapons_array to cat(weapons_array, \"0\", mount, \" \")}\r\n    }\r\n}\r\n\r\n{SetState('eddi_weapons_array', weapons_array)}\r\n\r\n{SetState('loading', true)}\r\n\r\n",
      "default": true,
      "name": "Commander continued",
      "description": "Se activa cuando cargas una partida guardada"
    },
    "Commander progress": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Commander progress",
      "description": "Se activa cuando se informa de tu progreso"
    },
    "Commander ratings": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Commander ratings",
      "description": "Se activa cuando se informa de tu clasificación"
    },
    "Commander started": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{SetState('eddi_context_last_subject', 'load_game')}\r\n{SetState('eddi_context_system_system', system.name)}\r\n{SetState('eddi_context_body_name', body.name)}\r\n{SetState('eddi_context_station_name', station.name)}\r\n{SetState('eddi_context_lastdocked', station.name)}\r\n{SetState('eddi_context_currentshipid', event.shipid)}\r\n\r\n{_ If VoiceAttack is not used, set Auto Route to no, and set default Routing system _}\r\n{if state.eddi_context_mission_route_useauto = \"\" || state.eddi_context_mission_route_useauto = null:\r\n    {SetState('eddi_context_mission_route_useauto', \"no\")}\r\n    {SetState('missionsrouteuseeddi', \"no\")}\r\n}\r\n\r\n{if cmdr.gender = \"Female\":\r\n    {set o to \"a\"}\r\n|else:\r\n    {set o to \"o\"}\r\n}\r\n\r\n{set time to token(format(SecondsSince(0), \"dl:yyyy-MM-dd HH:mm:ss\"), \" \", 1)}\r\n{set time to cast(token(time, \":\", 0), \"n\")}\r\n\r\n{if time < 12:\r\n    Buenos días\r\n|elif time > 11 && time < 20:\r\n    Buenas tardes\r\n|else:\r\n   Buenas noches\r\n}\r\n\r\n{F(\"Honorific\")}, y bienvenid{o} a bordo. Soy Shirka. Su asistente de vuelo personal. Le acompañaré en sus viajes para informarle y asistirle en todo lo que necesite.\r\n\r\n{_ Clear Fines & Bounties}\r\n{F(\"FinesBounties_Initialise\")}\r\n",
      "default": true,
      "name": "Commander started",
      "description": "Se activa cuando empiezas una partida nueva"
    },
    "Commodity collected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'commodity')}\n{SetState('eddi_context_last_action', 'collect')}\n{SetState('eddi_context_cargo_name', event.commodity)}\n\n{event.commodity} a bordo.",
      "default": true,
      "name": "Commodity collected",
      "description": "Se activa cuando recoges mercancia con tu nave o VRS"
    },
    "Commodity ejected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'eject')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n",
      "default": true,
      "name": "Commodity ejected",
      "description": "Se activa cuando expulsas mercancia de tu nave o VRS"
    },
    "Commodity purchase check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{for commodity in station.commodities:\n    {if commodity.stock > 0 && commodity.buyprice < commodity.avgprice:\n        {set discount to commodity.avgprice - commodity.buyprice}\n        {if discount > best.avgprice - best.buyprice:\n            {set thirdbest to secondbest}\n            {set secondbest to best}\n            {set best to commodity}\n        |elif discount > secondbest.avgprice - secondbest.buyprice:\n            {set thirdbest to secondbest}\n            {set secondbest to commodity}\n        |elif discount > thirdbest.avgprice - thirdbest.buyprice:\n            {set thirdbest to commodity}\n        }\n    }\n}\n\n{if best:\n    El mercado local está vendiendo {best.name} al mejor precio\n    {if secondbest\n       ,, además de {secondbest.name}\n        {if thirdbest:\n            y {thirdbest.name}\n        }\n    }\n.}\n\n",
      "default": true,
      "name": "Commodity purchase check",
      "description": "Verifica que mercancías son las mejores para adquirir"
    },
    "Commodity purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'purchase')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n\r\n{if event.amount = 1:\r\n   Acabas de comprar una tonelada de {event.commodity} por {event.price} créditos.\r\n|elif event.amount > 1:\r\n    Acabas de comprar {event.amount} toneladas de {event.commodity} a {event.price} créditos por tonelada.  El coste total es de {Humanise(event.amount * event.price)} créditos.\r\n}",
      "default": true,
      "name": "Commodity purchased",
      "description": "Se activa cuando compras cualquier producto del mercado local"
    },
    "Commodity refined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'commodity')}\n{SetState('eddi_context_last_action', 'refine')}\n{SetState('eddi_context_commodity_name', event.commodity)}\n\nUna tonelada de {event.commodity} refinada.",
      "default": true,
      "name": "Commodity refined",
      "description": "Se activa cuando se refina un producto"
    },
    "Commodity sale check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to find a given commodity in market}\n{set market(commodity) to:\n    {for marketcommodity in station.commodities:\n        {if marketcommodity.EDDBID = commodity.EDDBID:\n            {return marketcommodity}\n        }\n    }\n}\n\n{set totalprofit to 0}\n{set missioncommodities to []}\n{set profitablecommodities to []}\n{set stolencommodities to []}\n{set unknowncommodities to []}\n\n{for cargo in inventory:\n    {if cargo.name != 'Limpet':\n        {set marketcommodity to market(cargo.commodity)}\n        {set profit to (marketcommodity.sellprice - cargo.price) * cargo.other}\n\n        {if cargo.stolen > 0:\n            {set stolencommodities to cat(stolencommodities, [cargo.commodity])}\n        |elif cargo.haulage > 0:\n            {set missioncommodities to cat(missioncommodities, [cargo.commodity])}\n        |elif !marketcommodity:\n            {set unknowncommodities to cat(unknowncommodities, [cargo.commodity])}\n        |elif marketcommodity && profit > 0:\n            {set profitablecommodities to cat(profitablecommodities, [cargo.commodity])}\n            {set totalprofit to totalprofit + profit}\n        }\n    }\n}\n\n{_ Let the user know about any commodities they can sell here for a profit}\n{if len(profitablecommodities) > 0:\n    Puede vender su\n    {if len(profitablecommodities) = 1:\n        {profitablecommodities[0].name}\n    |elif len(profitablecommodities) = 2:\n        {profitablecommodities[0].name} y {profitablecommodities[1].name}\n    |else:\n        {set cur to 0}\n        {while cur < len(profitablecommodities):\n            {if cur = 0:\n                {profitablecommodities[cur].name}\n            |elif cur < len(profitablecommodities) - 1:\n                , {profitablecommodities[cur].name}\n            |else:\n                , y {profitablecommodities[cur].name}\n            }\n            {set cur to cur + 1}\n        }\n    }\n    con un beneficio de {totalprofit} créditos.\n}\n\n{_ Let the user know about any commodities about which we are unsure if they can sell for a profit}\n{if len(unknowncommodities) > 0:\n    {if len(profitablecommodities) > 0: Además también }Podría vender\n    {if len(unknowncommodities) = 1:\n        {unknowncommodities[0].name}\n    |elif len(unknowncommodities) = 2:\n        {unknowncommodities[0].name} y {unknowncommodities[1].name}\n    |else:\n        {set cur to 0}\n        {while cur < len(unknowncommodities):\n            {if cur = 0:\n                {unknowncommodities[cur].name}\n            |elif cur < len(profitablecommodities) - 1:\n                , {unknowncommodities[cur].name}\n            |else:\n                , y {unknowncommodities[cur].name}\n            }\n            {set cur to cur + 1}\n        }\n    }\n    , aunque  antes mejor verifique el margen de beneficio de {if len(unknowncommodities) > 1: ésta |else: éstas} antes de confirmar la transacción.\n}\n\n{_ Let the user know about any stolen commodities they can sell on the black market}\n{if len(stolencommodities) > 0:\n    {if station.hasblackmarket:\n        Puede deshacerse aquí de los bultos de \n        {if len(stolencommodities) = 1:\n            {stolencommodities[0].name}\n        |elif len(stolencommodities) = 2:\n            {stolencommodities[0].name} y{stolencommodities[1].name}\n        |else:\n            {set cur to 0}\n            {while cur < len(stolencommodities):\n                {if cur = 0:\n                    {stolencommodities[cur].name}\n                |elif cur < len(stolencommodities) - 1:\n                    , {stolencommodities[cur].name}\n                |else:\n                    , and {stolencommodities[cur].name}\n                }\n                {set cur to cur + 1}\n            }\n        }\n        robados.\n    |else:\n        Recuerde que llevamos a bordo {OneOf(\"mercancía robada\", \"bienes robados\", \"cargamento robado\", \"bultos marcados con propiedad ajena\")}.\n    }\n}\n\n{_ Let the user know about any mission related commodities they can sell on the black market}\n{if len(missioncommodities) > 0 && station.hasblackmarket:\n\n    Puede {if len(stolencommodities) > 0: además} {OneOf('descargar', 'entregar')} aquí sus paquetes de\n    {if len(missioncommodities) = 1:\n        {missioncommodities[0].name}\n    |elif len(missioncommodities) = 2:\n        {missioncommodities[0].name} and {missioncommodities[1].name}\n    |else:\n        {set cur to 0}\n        {while cur < len(missioncommodities):\n            {if cur = 0:\n                {missioncommodities[cur].name}\n            |elif cur < len(missioncommodities) - 1:\n                , {missioncommodities[cur].name}\n            |else:\n                , y {missioncommodities[cur].name}\n            }\n            {set cur to cur + 1}\n        }\n    }\n    de la misión.\n}\n",
      "default": true,
      "name": "Commodity sale check",
      "description": "Comprueba que mercancías se pueden vender en el mercado local"
    },
    "Commodity sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'commodity')}\n{SetState('eddi_context_last_action', 'sell')}\n{SetState('eddi_context_commodity_name', event.commodity)}\n{SetState('eddi_context_commodity_amount', event.amount)}\n\n{if event.amount = 1:\n   Ha vendido una sola tonelada de {event.commodity} por {event.price} créditos\n|elif event.amount > 1:\n    Vendidas {event.amount} toneladas de {event.commodity} a {event.price} créditos cada una por un total de {event.amount * event.price} créditos\n}\n{if event.price != event.profit:\n    {if event.profit < 0:\n       , con una pérdida de {-1 * event.profit * event.amount} créditos.\n    |elif event.profit = 0:\n        al mismo precio de su compra.\n    |else:\n       , con un beneficio de {event.profit * event.amount} créditos.\n    }\n}",
      "default": true,
      "name": "Commodity sold",
      "description": "Se activa cuando vende mercancía."
    },
    "Community goal": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Set Context _}\n{SetState('eddi_context_last_subject', 'community goal')}\n{_ Save goal location to context if there is only one goal present _}\n{if len(event.cgid) = 1:\n   {SetState('eddi_context_goal_system_name', event.system[0])}\n   {SetState('eddi_context_goal_station_name', event.station[0])}\n}\n\n{F('Honorific')}, \n\n{if len(event.name) > 1:\n    {OneOf(\"ha expresado su interés en\", \"estoy siguiendo\")}\n    los siguientes eventos de la comunidad:\n|else: \n    El evento de la comunidad,    \n}\n\n{set cur to 0}\n{while cur < len(event.name):\n\n   {if cur = 0 && len(event.name) = 1:\n      {_ nothing _}\n   |elif cur = 0 && len(event.name) > 1:\n      El primero,\n   |elif cur < (len(event.name) - 1):\n      el siguiente, \n   |else:\n      el último,\n   }\n\n   {event.name[cur]},\n\n   {if event.iscomplete[cur]:\n      {OneOf(\"está completado\", \"ha finalizado\")} \n   |else: \n      {if (event.expiry[cur] / 3600) < 12:\n         {OneOf(\"está a punto de terminar\", \n                \"terminará en {round(event.expiry[cur] / 3600, 1)} horas\", \n                \"está casi completado\")}\n      |else:\n         {OneOf(\"no se ha completado aun,\", \n                \"está activo\", \n                \"está incompleto\")} \n      }\n   }\n\n   {if event.tier[cur]:\n       {OneOf(\"y ha alcanzado el\", \"y está ahora mismo en el\")} {event.tier[cur]}.\n       {if event.contribution[cur] > 0:\n           Su recompensa asignada está\n           {Occasionally(2, \" actualmente \")}\n           {Occasionally(2, \"calculada \")}\n           en {event.tierreward[cur]} créditos\n           {Occasionally(2, \"en el {event.percentileband[cur]} por ciento\")}\n       }\n   }.\n\n   {_ Create a comparison function _}\n   {set compare(stat) to:     \n       {if stat < 0.01:\n            solo una fracción de            \n       |elif stat < 0.10:\n            menos de un décimo de \n       |elif stat < 0.25:\n            menos de un cuarto de\n       |elif stat < 0.5:\n            menos de la mitad de\n       |elif stat < 0.75:\n            menos de\n       |elif stat < 0.96: \n            {OneOf(\"apenas un poco\",\"ligeramente\")}\n            menos de\n       |elif stat < 1.05:\n            {OneOf(\"aproximádamente\",\"casi\")} \n            igual a \n       |elif stat < 1.25:\n            un poco más de \n       |elif stat < 1.5:\n            más de \n       |elif stat < 2:\n            significativamente más de\n       |else:\n            bastante más de\n       }\n    }\n    {set compare_contribution to (event.contribution[cur] / round(event.total[cur] / event.contributors[cur], 0))}\n\n    {if compare_contribution != 0:\n       {if event.toprank[cur]: \n          Enhorabuena! \n          Es usted uno de los {event.topranksize[cur]} mejores comandantes en este evento, habiendo contribuido con \n          {compare(compare_contribution)}\n          la media.\n       |else:\n          {Occasionally(2, \"Ha contribuido con \n          {compare(compare_contribution)}\n          la media.\")}\n       }\n    }\n\n    {if !event.iscomplete[cur]:\n       Puede \n       {if event.contribution[cur] > 0: \n          {OneOf(\"contribuir más\", \"hacer contribuciones adicionales\")} \n       |else: \n          {OneOf(\"contribuir\", \"hacer una contribución\")}\n       }\n       {if event.station[cur] = station.name:\n          {Occasionally(2, \"aquí\")}\n          {Occasionally(2, \"en esta estación\")}.\n       |elif event.system[cur] = system.name:\n          en {event.station[cur]}\n          {Occasionally(2, \"aquí\")}\n          {Occasionally(2, \"en este sistema\", \"en el sistema donde nos encontramos\")}.\n       |else:\n          en {event.station[cur]},\n          en {OneOf(\"{event.system[cur]}\", \"el sistema {event.system[cur]}\" )}.\n       }\n    }\n\n    {set cur to cur + 1}\n    {Pause(1000)}\n}",
      "default": true,
      "name": "Community goal",
      "description": "Se activa cuando se comprueba el estado de los objetivos de la comunidad"
    },
    "Controlling fighter": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"enlace neural\", \"enlace\")} {Occasionally(2, \"con el caza\")} {OneOf(\"iniciado\", \"establecido\", \"fijado\")}.",
      "default": true,
      "name": "Controlling fighter",
      "description": "Se activa cuando cambias el control de tu nave al de tu caza."
    },
    "Controlling ship": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Enlace neural\", \"enlace\", \"enlace\")} {OneOf(\"terminado\", \"desconectado\")}.",
      "default": true,
      "name": "Controlling ship",
      "description": "Se activa cuando cambias del control de tu caza al de tu nave"
    },
    "Crew assigned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.role = \"Active\":\r\n    {event.name} está ahora en servicio activo.\r\n|else:\r\n    {event.name} retirandose del servicio activo.\r\n}",
      "default": true,
      "name": "Crew assigned",
      "description": "Se activa cuando asignas a alguien a tu tripulación"
    },
    "Crew fired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'fire')}\n{SetState('eddi_context_crew_name', event.name)}\n\n{event.name} {OneOf(\"ha sido despedido\",\"ya no forma parte de la tripulación\")}.",
      "default": true,
      "name": "Crew fired",
      "description": "Se activa cuando despides a alguien de tu tripulación"
    },
    "Crew hired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'hire')}\n{SetState('eddi_context_crew_name', event.name)}\n\n{event.name} {OneOf(\"se ha unido a la tripulación\",\"ha sido contratado a su tripulación\")}.",
      "default": true,
      "name": "Crew hired",
      "description": "Se activa cuando contratas a alguien a tu tripulación"
    },
    "Crew joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'join')}\n{SetState('eddi_context_crew_name', event.captain)}\n\nNos hemos unido a la tripulación del comandante {slice (event.captain,10)}. {OneOf(\"No se preocupe, yo me encargo de {ShipName()}\",\"\")}.",
      "default": true,
      "name": "Crew joined",
      "description": "Se activa cuando te unes a una tripulación"
    },
    "Crew left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'leave')}\n{SetState('eddi_context_crew_name', event.captain)}\n\nHemos abandonado la tripulación del comandante {slice (event.captain,10)}.",
      "default": true,
      "name": "Crew left",
      "description": "Se activa cuando sales de una tripulación"
    },
    "Crew member joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'join')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\nEl comandante {slice (event.crew,10)} se ha unido a su tripulación.",
      "default": true,
      "name": "Crew member joined",
      "description": "Se activa cuando un comandante se une a tu tripulación"
    },
    "Crew member launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'launch')}\n{SetState('eddi_context_crew_name', event.crew)}\n\n{event.crew} ha lanzado un caza..",
      "default": true,
      "name": "Crew member launched",
      "description": "Se activa cuando un miembro de tu tripulación lanza el caza"
    },
    "Crew member left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'leave')}\n{SetState('eddi_context_crew_name', event.crew)}\n\nEl comandante {slice (event.crew,10)} ha abandonado la tripulación.",
      "default": true,
      "name": "Crew member left",
      "description": "Se activa cuando un comandante deja tu tripulación"
    },
    "Crew member removed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'remove')}\n{SetState('eddi_context_crew_name', event.crew)}\n\nHa {OneOf(\"expulsado\",\"despedido\")} al comandante {slice (event.crew,10)} de la tripulación.",
      "default": true,
      "name": "Crew member removed",
      "description": "Se activa cuando despides a un comandante de tu tripulación"
    },
    "Crew member role changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'role')}\n{SetState('eddi_context_crew_name', event.crew)}\n{SetState('eddi_context_crew_role', event.role)}\n\n{if event.role = 'Idle':\n    {event.crew} está desocupado\n|elif event.role = 'Fighter':\n    {event.crew} está controlando un caza\n|elif event.role = 'Gunner':\n    {event.crew} está de artillero\n}.\n",
      "default": true,
      "name": "Crew member role changed",
      "description": "Se activa cuando un miembro de tu tripulación cambia su rol"
    },
    "Crew paid wage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Crew paid wage }\r\n{_ Triggered when npc crew receives a profit share }\r\n\r\n",
      "default": true,
      "name": "Crew paid wage",
      "description": "Triggered when npc crew receives a profit share"
    },
    "Crew promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Crew promotion }\r\n{_ Triggered when crewmember combat rank increases }\r\n\r\n\r\nCrew member {event.name} has been promoted to the combat rank of {event.combatrating}.",
      "default": true,
      "name": "Crew promotion",
      "description": "Triggered when crewmember combat rank increases"
    },
    "Crew role changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.role = 'Gunner':\n  {OneOf(\"Ha adoptado\",\"Se le ha asignado\")} la posición de artillero en esta tripulación.\n|elif event.role = 'Fighter':\n  {OneOf(\"Ha adoptado ser\",\"Se le ha asignado ser\")} piloto de caza en esta tripulación.\n|elif event.role = 'Idle':\n  Ha sido desasignado del servicio activo.\n}",
      "default": true,
      "name": "Crew role changed",
      "description": "Se activa cuando cambia tu rol en una tripulación"
    },
    "Crime check station": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Crime check station }\r\n{_ Check claims, fines & bounties related to the current station }\r\n\r\n\r\n{set CheckPad(current_station) to:\r\n    {set largest_pad to lcase(current_station.largestpad)}\r\n    {if largest_pad != \"none\":\r\n        {if largest_pad = \"large\": {return true} }\r\n        |elif largest_pad = \"medium:\r\n            {if lcase(ship.size) = \"large\": {return false}\r\n            |else: {return true}\r\n        }\r\n        {if lcase(ship.size) = \"small\": {return true}\r\n    }\r\n    {return false}\r\n}\r\n\r\n{set HasService(service) to:\r\n    {if CheckPad(current_station):\r\n        {if find(current_station.stationservices, service) > -1:\r\n            {return true}\r\n        |else:\r\n            {return false}\r\n        }\r\n    |else: {return false}\r\n    }\r\n}\r\n\r\n{set current_station to StationDetails(state.eddi_context_body_name)}\r\n\r\n{set factions_claims to []}\r\n{set system_claims to 0}\r\n{set factions_fines to []}\r\n{set system_fines to 0}\r\n{set factions_bounties to []}\r\n{set station_report to false}\r\n\r\n{for record in criminalrecord:\r\n    {if record.bounties > 0:\r\n        {set factions_bounties to cat(factions_bounties, [record.faction])}\r\n    }\r\n    {for faction in system.factions:\r\n        {if record.faction = faction.name:\r\n            {if record.claims > 0:\r\n                {set factions_claims to cat(factions_claims, [record.faction])}\r\n                {set system_claims to system_claims + record.claims}\r\n            }\r\n            {if record.fines > 0:\r\n                {set factions_fines to cat(factions_fines, [record.faction])}\r\n                {set system_fines to system_fines + record.fines}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{set claim_count to len(factions_claims)}\r\n{set fine_count to len(factions_fines)}\r\n{set bounty_count to len(factions_bounties)}\r\n\r\n{if bounties > 0 && HasService(\"Interstellar Factors Contact\"):\r\n    Information: There are legal facilities at this station to clear your pending\r\n    {if bounty_count = 1: bounty |else: bounties}.\r\n    {set station_report to true}\r\n}\r\n\r\n{if (system_fines > 0 || system_claims > 0) && !station_report:\r\n    {if HasService(\"Contacts\"):\r\n        Information: You may clear your pending\r\n         {if fine_count = 1: fine |else: fines} at this station.\r\n        {set station_report to true}\r\n    }\r\n}\r\n\r\n{if system_claims > 0 && !station_report:\r\n    {if HasService(\"Contacts\"):\r\n        Information: You may claim your pending\r\n        {if claim_count = 1: reward |else: rewards} at this station.\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Crime check station",
      "description": "Check claims, fines & bounties related to the current station"
    },
    "Crime check system": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Crime check system }\r\n{_ Check claims, fines & bounties related to the current system }\r\n\r\n\r\n{set CheckPad(station) to:\r\n    {set largest_pad to lcase(station.largestpad)}\r\n    {if largest_pad != \"none\":\r\n        {if largest_pad = \"large\": {return true} }\r\n        |elif largest_pad = \"medium:\r\n            {if lcase(ship.size) = \"large\": {return false}\r\n            |else: {return true}\r\n        }\r\n        {if lcase(ship.size) = \"small\": {return true}\r\n    }\r\n    {return false}\r\n}\r\n\r\n{set NearestStation(service) to:\r\n    {set distance to 0}\r\n    {set station_count to 0}\r\n    {for station in system.stations:\r\n        {if CheckPad(station):\r\n            {if find(station.stationservices, service) > -1:\r\n                {if distance = 0 || station.distancefromstar < distance:\r\n                    {set station_count to station_count + 1}\r\n                    {set distance to station.distancefromstar}\r\n                    {set nearest_station to station.name}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{set factions_claims to []}\r\n{set factions_fines to []}\r\n{set factions_bounties to []}\r\n\r\n{set system_claims to 0}\r\n{set system_fines to 0}\r\n{set system_bounties to 0}\r\n{set wanted_count to 0}\r\n{set station_report to false}\r\n\r\n{for record in criminalrecord:\r\n    {if record.bounties > 0:\r\n        {set factions_bounties to cat(factions_bounties, [record.faction])}\r\n    }\r\n    {for faction in system.factions:\r\n        {if record.faction = faction.name:\r\n\r\n            {if record.claims > 0:\r\n                {set factions_claims to cat(factions_claims, [record.faction])}\r\n                {set system_claims to system_claims + record.claims}\r\n            }\r\n            {if record.fines > 0 || record.bounties > 0:\r\n                {set wanted_count to wanted_count + 1}\r\n                {set system_fines to system_fines + record.fines}\r\n                {set system_bounties to system_bounties + record.bounties}\r\n                {if record.fines > 0:\r\n                    {set factions_fines to cat(factions_fines, [record.faction])}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n{set claim_count to len(factions_claims)}\r\n{set fine_count to len(factions_fines)}\r\n{set bounty_count to len(factions_bounties)}\r\n\r\n{if wanted_count > 0:\r\n    Warning: you are wanted in this system by {wanted_count}\r\n    {if wanted_count = 1: faction |else: factions},\r\n    for total fines and bounties of {Humanise(system_fines + system_bounties)} credits.\r\n}\r\n\r\n{_ Report nearest station to clear bounties }\r\n{if bounties > 0:\r\n    {NearestStation(\"Interstellar Factors Contact\")}\r\n    {if station_count > 0:\r\n        There are legal facilities at {station_count}\r\n        {if station_count = 1: station |else: stations} to clear your pending\r\n        {if bounty_count = 1: bounty |else: bounties}.\r\n        The nearest is {nearest_station}, {round(distance, 1)} light-seconds from the main star.\r\n        {set station_report to true}\r\n    }\r\n}\r\n\r\n{if system_fines > 0 && !station_report:\r\n    {NearestStation(\"Contacts\")}\r\n    {if station_count > 0:\r\n        There {if station_count = 1: is |else: are} {station_count}\r\n        {if station_count = 1: station |else: stations} to clear your pending\r\n        {if fine_count = 1: fine |else: fines}.\r\n        The nearest is {nearest_station}, {round(distance, 1)} light-seconds from the main star.\r\n        {set station_report to true}\r\n    }\r\n}\r\n\r\n{_ Report nearest station for pending claims }\r\n{if claims_count > 0:\r\n    Information: you have bond and bounty claims in this system for {claim_count}\r\n    {if claim_count = 1: faction |else: factions}, for a total of {Humanise(system_claims)} credits.\r\n\r\n    {if !station_report:\r\n        {if system_fines = 0: {NearestStation(\"Contacts\")}}\r\n        {if station_count > 0:\r\n            There {if station_count = 1: is |else: are} {station_count}\r\n            {if station_count = 1: station |else: stations} to claim your\r\n            {if claim_count = 1: reward |else: rewards}.\r\n            The nearest is {nearest_station}, {round(distance, 1)} light-seconds from the main star.\r\n        }\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Crime check system",
      "description": "Check claims, fines & bounties related to the current system"
    },
    "Crime report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Crime report}\r\n{_ Report on all pending claims, fines, and bounties }\r\n\r\n\r\n{set factions_claims to []}\r\n{set claims_count to 0}\r\n{set factions_fines to []}\r\n{set fines_count to 0}\r\n{set factions_bounties to []}\r\n{set systems_bounties to []}\r\n\r\n{for record in criminalrecord:\r\n    {set faction to FactionDetails(record.faction)}\r\n    {if faction:\r\n        {if record.bounties > 0:\r\n            {set factions_bounties to cat(factions_bounties, [record.faction])}\r\n            {for presence in faction.presences:\r\n                {if find(presence.systemName, systems_bounties) = -1:\r\n                    {set systems_bounties to cat(systems_bounties, [presence.systemName])}\r\n                }\r\n            }\r\n        }\r\n        {if record.fines > 0:\r\n            {set factions_fines to cat(factions_fines, [record.faction])}\r\n        }\r\n        {if record.claims > 0:\r\n            {set factions_claims to cat(factions_claims, [record.faction])}\r\n        }\r\n\r\n        {for report in record.factionReports:\r\n            {if !report.bounty && report.crimeEDName != \"none\":\r\n                {set fines_count to fines_count + 1}\r\n            }\r\n            {if report.crimeEDName = \"none\":\r\n                {set claims_count to claims_count + 1}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{set factions_count to len(factions_bounties)}\r\n{set systems_count to len(factions_bounties)}\r\n\r\n{if factions_count > 0:\r\n    You are wanted by {factions_count} {if factions_count = 1: faction |else: factions}\r\n    in {systems_count} {if systems_count = 1: system |else: systems} for a total of\r\n    {Humanise(bounties)} credits.\r\n}\r\n\r\n{set factions_count to len(factions_fines)}\r\n{if factions_count > 0:\r\n    You have {fines_count} pending {if fines_count = 1: fine |else: fines} from\r\n    {factions_count} {if factions_count = 1: faction |else: factions},\r\n    for a total of {Humanise(fines)} credits.\r\n}\r\n\r\n{set factions_count to len(factions_claims)}\r\n{if factions_count > 0:\r\n    You have {claims_count} uncollected {if claims_count = 1: claim |else: claims} from\r\n    {factions_count} {if factions_count = 1: faction |else: factions},\r\n    for a total of {Humanise(claims)} credits.\r\n}",
      "default": true,
      "name": "Crime report",
      "description": "Report on all pending claims, fines, and bounties"
    },
    "Damage check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Track if there is any damage}\n{set damaged to 0}\n\n{_ Announce hull health}\n{if ship.health < 100:\n    Casco al {Humanise(ship.health)} %.\n    {set damaged to 1}\n}\n\n{_ Announce critical module health}\n\n{set minordamage to []}\n{set majordamage to []}\n\n{if ship.powerplant.health < 60:\n    {set majordamage to cat(majordamage, [ship.powerplant])}\n|elif ship.powerplant.health < 100:\n    {set minordamage to cat(minordamage, [ship.powerplant])}\n}\n\n{if ship.thrusters.health < 60:\n    {set majordamage to cat(majordamage, [ship.thrusters])}\n|elif ship.thrusters.health < 100:\n    {set minordamage to cat(minordamage, [ship.thrusters])}\n}\n\n{if ship.frameshiftdrive.health < 60:\n    {set majordamage to cat(majordamage, [ship.frameshiftdrive])}\n|elif ship.frameshiftdrive.health < 100:\n    {set minordamage to cat(minordamage, [ship.frameshiftdrive])}\n}\n\n{if ship.powerdistributor.health < 60:\n    {set majordamage to cat(majordamage, [ship.powerdistributor])}\n|elif ship.powerdistributor.health < 100:\n    {set minordamage to cat(minordamage, [ship.powerdistributor])}\n}\n\n{if ship.lifesupport.health < 60:\n    {set majordamage to cat(majordamage, [ship.lifesupport])}\n|elif ship.lifesupport.health < 100:\n    {set minordamage to cat(minordamage, [ship.lifesupport])}\n}\n\n{if ship.sensors.health < 60:\n    {set majordamage to cat(majordamage, [ship.sensors])}\n|elif ship.sensors.health < 100:\n    {set minordamage to cat(minordamage, [ship.sensors])}\n}\n\n{if len(majordamage) > 0:\n    {set damaged to 1}\n    Grandes daños en\n    {if len(majordamage) = 1:\n        {majordamage[0].name}\n    |elif len(majordamage) = 2:\n        {majordamage[0].name} y {majordamage[1].name}\n    |else:\n        {set cur to 0}\n        {while cur < len(majordamage):\n            {if cur = 0:\n                {majordamage[cur].name}\n            |elif cur < len(majordamage) - 1:\n                , {majordamage[cur].name}\n            |else:\n                , y {majordamage[cur].name}\n            }\n            {set cur to cur + 1}\n        }\n    }.\n}\n\n{if len(minordamage) > 0:\n    {set damaged to 1}\n    Algunos desperfectos en\n    {if len(minordamage) = 1:\n        {minordamage[0].name}\n    |elif len(minordamage) = 2:\n        {minordamage[0].name} y {minordamage[1].name}\n    |else:\n        {set cur to 0}\n        {while cur < len(minordamage):\n            {if cur = 0:\n                {minordamage[cur].name}\n            |elif cur < len(minordamage) - 1:\n                , {minordamage[cur].name}\n            |else:\n                , y {minordamage[cur].name}\n            }\n            {set cur to cur + 1}\n        }\n    }.\n}\n\n{_ Announce other module health}\n\n{set minordamage to []}\n{set majordamage to []}\n\n{for compartment in ship.compartments:\n    {if compartment.module.health < 60:\n        {set majordamage to cat(majordamage, [compartment.module.name])}\n    |elif hardpoint.module.health < 100:\n        {set minordamage to cat(minordamage, [compartment.module.name])}\n    }\n}\n\n{for hardpoint in ship.hardpoints:\n    {if hardpoint.module.health < 60:\n        {set majordamage to cat(majordamage, [hardpoint.module.name])}\n    |elif hardpoint.module.health < 100:\n        {set minordamage to cat(minordamage, [hardpiont.module.name])}\n    }\n}\n\n{if len(majordamage) > 0:\n    {set damaged to 1}\n    {if len(majordamage) = 1:\n       Otro componente de la nave con importantes desperfectos\n    |elif len(majordamage) > 1:\n        {len(majordamage)} otros componentes de la nave con importantes desperfectos\n    }\n    {if len(minordamage) = 1:\n       y otro componente de la nave con algun desperfecto\n    |elif len(minordamage) > 1:\n       y otros {len(minordamage)} componentes de la nave con daños menores\n    }.\n|elif len(minordamage) = 1:\n    {set damaged to 1}\n    Otro componente de la nave con daños menores.\n|elif len(minordamage) > 1:\n    {set damaged to 1}\n    {len(minordamage)} otros componentes de la nave con daños menores.\n}\n\n{if damaged = 0:\n    {OneOf(\"Todos los sistemas completamente operativos.\", \"{ShipName()} está completamente operativa.\", \"{ShipName()} no presenta daños.\")}\n}",
      "default": true,
      "name": "Damage check",
      "description": "Comprueba los daños de tu nave"
    },
    "Data scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Data scanned }\n{_ Triggered when scanning some types of data links }\n\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'scan')}\n{SetState('eddi_context_last_action', 'data')}\n{SetState('eddi_context_data_scan_type', event.datalinktype)}\n\nAnálisis de {event.datalinktype} completado.",
      "default": true,
      "name": "Data scanned",
      "description": "Se activa cuando se escanean algunos tipos de enlaces de datos."
    },
    "Data voucher awarded": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Data voucher awarded }\r\n{_ Triggered when you are awarded a data voucher }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'data_voucher')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.payeefaction)}\r\n\r\nOtorgado bono de datos de {event.payeefaction} por {event.reward} créditos.\r\n",
      "default": true,
      "name": "Data voucher awarded",
      "description": "Se activa cuando te otorgan un bono de datos."
    },
    "Data voucher redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'data_voucher')}\n{SetState('eddi_context_last_action', 'redeem')}\n{SetState('eddi_context_data_voucher_amount', event.amount)}\n\n{if len event.rewards > 1: {OneOf(\"Reclamados\", \"Adquiridos\")} Bonos de datos\n|else: {OneOf(\"Reclamado\", \"Adquirido\")} un bono de datos} \npor {(event.amount)} créditos\n\n\n{Occasionally(2, \"\n  {if len(event.rewards) = 1 && len(event.rewards[0].faction) > 0:\n    {OneOf(\"de\", \"por cortesiia de\")}\n    {P(event.rewards[0].faction)}\n  |else:\n    {if len(event.rewards[0].faction) > 0:\n       {OneOf(\"de\", \"por cortesiia de\")}\n       {set cur to 0}\n       {while cur < len(event.rewards):\n          {if cur = 0:\n          |elif cur < len(event.rewards) - 1:\n              , \n          |else:\n              y\n          }\n          {P(event.rewards[cur].faction)}\n          {set cur to cur + 1}\n       }\n    }\n  }\n\")}.",
      "default": true,
      "name": "Data voucher redeemed",
      "description": "Se activa cuando reclamas bonos de datos"
    },
    "Datalink message": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Datalink message",
      "description": "Se activa al completar un escaneo de un enlace de datos"
    },
    "Died": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if len(event.ships) > 0:\n\n    {set commanders to []}\n    {for cmdr in event.commanders:\n        {if find(cmdr, \"$ShipName\") >= 0:\n           {_ Ignore NPC ships _}        \n        |else: \n           {set commanders to cat(commanders, [cmdr])}\n        }\n    }\n\n    {ShipName()} ha sido\n    \n    {OneOf(\"convertida en polvo\", \"eliminada\", \"destruida\")}\n\n    {if len(commanders) = 1:\n        por {commanders[0]} \n        en una {event.ships[0]} \n        con rango de combate {event.ratings[0]}.\n    |elif len(commanders) = 2:\n        por {commanders[0]} \n        en una {event.ships[0]}\n        con rango de combate {event.ratings[0]}, \n        y por {commanders[1]} \n        en una {event.ships[1]}\n        con rango de combate {event.ratings[1]}.\n    |elif len(commanders) > 2:\n        {set cur to 0}\n        por\n        {while cur < len(commanders):\n            {if cur = 0:\n                {commanders[cur]} \n                en una {event.ships[cur]} \n                con rango de combate {event.ratings[cur]}\n            |elif cur < len(commanders) - 1:\n                , {commanders[cur]} \n                en una {event.ships[cur]} \n                con rango de combate {event.ratings[cur]}\n            |else:\n                , y {commanders[cur]} \n                en una {event.ships[cur]} \n                con rango de combate {event.ratings[cur]}.\n            }\n            {set cur to cur + 1}\n        }\n    }\n}. Activada cápsula de escápe. Emitiendo señal de socorro. {OneOf(\"Pronto... vendrán a buscarnos\",\"\")}.",
      "default": true,
      "name": "Died",
      "description": "Se activa cuando mueres"
    },
    "Discovery scan": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Fetch from Context _}\r\n{set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n\r\n{Pause(1000)}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n    {if reportSystem:\r\n        {set scannedBodies to 0}\r\n        {for body in reportSystem.bodies:\r\n            {if body.scanned:\r\n                {set scannedBodies to scannedBodies + 1}\r\n            }\r\n        }\r\n        {set bodiesToScan to (event.bodies - scannedBodies)}\r\n\r\n        {if event.bodies > 1 && event.bodies != scannedBodies:\r\n            {OneOf(\r\n                \"{scannedBodies} out of {event.bodies} bodies have been scanned\", \r\n                \"{bodiesToScan} {if bodiesToScan > 1: bodies remain |else: body remains} to be scanned\"\r\n            )}\r\n            {Occasionally(3, OneOf(\"here\", \"in this system\"))}.\r\n        |else:\r\n            {set bodiesToMap to F(\"Bodies to map\")}\r\n            {if bodiesToMap:\r\n                {bodiesToMap}\r\n            }\r\n        }\r\n    }\r\n}",
      "default": true,
      "name": "Discovery scan",
      "description": "Triggered when performing a full system scan (honk)"
    },
    "Docked": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{if event.state = \"Damaged\": Emergency}\r\nAnclaje completado.\r\n\r\n{if event.activefine || event.wanted:\r\n    Activados protocolos de anonimato.\r\n}\r\n\r\n{if event.cockpitbreached:\r\n    Recuerde reparar el cristal de la cabina.\r\n}",
      "default": true,
      "name": "Docked",
      "description": "Se activa cuando su nave aterriza en una estación espacial o puesto avanzado"
    },
    "Docking cancelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Solicitud de aterrizaje cancelada.",
      "default": true,
      "name": "Docking cancelled",
      "description": "Se activa cuando su nave cancela el aterrizaje solicitado en una estación espacial o puesto avanzado"
    },
    "Docking denied": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\n\n{OneOf('Hemos recibido una denegación del permiso de aterrizaje','Se nos ha denegado el permiso de aterrizaje','nos informan de que no pueden darnos permiso para aterrizar')}\n\n{if event.reason = \"ActiveFighter\":\n    porque nuestro caza está desplegado\n|elif event.reason = \"Distance\":\n    {OneOf('porque estamos demasiado lejos de la estación','Porque no hemos alcanzado la distancia mínima a la estación')}{OneOf (' ',' ','. Debemos acercarnos al menos a sietemil quinientos metros')}\n|elif event.reason = \"Hostile\":\n    {OneOf('porque a la facción que controla la estación no le gustamos','porque la facción que controla la estación nos considera hostiles')}\n|elif event.reason = \"NoSpace\":\n        {OneOf('porque no hay espacio disponible','porque todas las plataformas están ocupadas','porque no hay plataformas libres del tamaño adecuado')}{OneOf (' ',' ','. Debemos esperar a que quede una plataforma libre')}\n|elif event.reason = \"Offences\":\n    porque hemos cometido una ofensa contra ellos recientemente\n|elif event.reason = \"TooLarge\":\n    porque no hay pistas de aterrizaje de tamaño suficiente para albergar esta nave\n}.",
      "default": true,
      "name": "Docking denied",
      "description": "Se activa cuando a su nave le es denegado el aterrizaje en una estación espacial o puesto avanzado"
    },
    "Docking granted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'landing pad')}\r\n{SetState('eddi_context_landing_pad_system', system.name)}\r\n{SetState('eddi_context_landing_pad_station', event.station)}\r\n{SetState('eddi_context_landing_pad_station_model', event.stationtype)}\r\n{SetState('eddi_context_landing_pad_pad', event.landingpad)}\r\n\r\n{if event.stationDefinition.basename = \"Coriolis\" || \r\n    event.stationDefinition.basename = \"Orbis\" || \r\n    event.stationDefinition.basename = \"Bernal\" || \r\n    event.stationDefinition.basename = \"AsteroidBase\":\r\n{Pause(8000)}\r\n    {F(\"Landing pad report\")}\r\n}",
      "default": true,
      "name": "Docking granted",
      "description": "Se activa cuando se te concede permiso a tu nave para aterrizar en una estación espacial o puesto avanzado"
    },
    "Docking requested": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Docking requested",
      "description": "Se activa cuando tu nave solicita el aterrizaje en una estación espacial o puesto avanzado"
    },
    "Docking timed out": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf ('No recibimos respuesta a nuestra solicitud de aterrizaje','la estación no ha respondido a nuestra solicitud de aterrizaje')}.",
      "default": true,
      "name": "Docking timed out",
      "description": "Se activa cuando tu solicitud de aterrizaje expira"
    },
    "Empire honorific": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Forms of address taken from <https://en.wikipedia.org/wiki/Forms_of_address_in_the_United_Kingdom>}\n{if cmdr.empirerating.rank <= 4: {_ Commoner }\n   Comandante\n|elif cmdr.empirerating.rank = 5: {_ Knight / Dame }\n    {if cmdr.gender = \"Hombre\": \n        señor\n    |elif cmdr.gender = \"Mujer\": \n        madám\n    |else: \n        Comandante\n    }\n|elif cmdr.empirerating.rank <= 11: {_ Peer / Peeress }\n    {if cmdr.gender = \"Hombre\": \n        {OneOf(\"señor\", \"su señoría\")}\n    |elif cmdr.gender = \"Mujer\": \n        {OneOf(\"madám\", \"su señoría\")}\n    |else: \n        Comandante\n    }\n|elif cmdr.empirerating.rank = 12:\n    su gracia\n|elif cmdr.empirerating.rank = 13:\n    su alteza real\n|elif cmdr.empirerating.rank = 14:\n    su majestad\n}\n",
      "default": true,
      "name": "Empire honorific",
      "description": "Función para proporcionar un tratamiento honorífico a su Comandante cuando se alinee con el Imperio"
    },
    "Empire promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Enhorabuena {F(\"Empire honorific\")}.\r\nHa sido\r\n{OneOf(\"ascendido\", \"nombrado\")} a  \r\n{when(cmdr.gender = \"Female\", event.femininerank, event.rank)}\r\n{Occasionally(2, OneOf(\"dentro de la Armada Imperial\", \"por sus servicios para el Imperio\"))}.\r\n\r\n{if event.rating = 1:\r\n    Se le ha concedido acceso para poder comprar una Eagle Imperial\r\n|elif event.rating = 3:\r\n    Se le ha concedido acceso para poder comprar una nave de Correo Imperial\r\n|elif event.rating = 4:\r\n    Se le ha concedido el honor de poder entrar en el sistema {P(\"Archenar\")}\r\n|elif event.rating = 7:\r\n    Se le ha concedido acceso para poder comprar la Clíper Imperial \r\n    y el honor de entrar en el sistema {P(\"Summer-land\")}\r\n|elif event.rating = 10:\r\n    Se le ha concedido el honor de poder entrar en el sistema {P(\"Facece\")}\r\n|elif event.rating = 12:\r\n    Se le ha concedido acceso para poder comprar la Cúter imperial\r\n|elif event.rating = 14:\r\n    Es el mayor {OneOf(\"rango\", \"honor\")} disponible para un miembro de la Federación de Pilotos.\r\n}.",
      "default": true,
      "name": "Empire promotion",
      "description": "Se activa cuando asciende de rango en el Imperio"
    },
    "Engineer contributed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.engineer} nos da las\r\ngracias por contribuir con\r\n{if event.contributiontype = \"Commodity\":\r\n   {event.amount} tonelada{if event.amount != 1:s} \r\n|elif event.contributiontype = \"Material\":\r\n   {if material.category = 'Data':\r\n       {event.amount} {OneOf(\"unidad\", \"muestra\", \"registro\")}{if event.amount != 1:s}\r\n   |else:\r\n       {event.amount} {OneOf(\"unidad\", \"muestra\", \"fragmento\")}{if event.amount != 1:s}\r\n   }\r\n}\r\nde {event.contribution}.",
      "default": true,
      "name": "Engineer contributed",
      "description": "Triggered when contributing resources to an engineer in exchange for access"
    },
    "Engineer progressed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.engineer} le ha dado acceso a planos de grado {event.rank}.",
      "default": true,
      "name": "Engineer progressed",
      "description": "Se activa cuando alcanza un nuevo rango con un Ingeniero"
    },
    "Entered CQC": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Entrando en combate de corta distancia.",
      "default": true,
      "name": "Entered CQC",
      "description": "Se activa cuando entra en CQC"
    },
    "Entered normal space": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'fsd')}\n{SetState('eddi_context_last_action', 'disengage')}\n{SetState('eddi_context_system_name', event.system)}\n{SetState('eddi_context_body_name', event.body)}\n{SetState('eddi_context_body_system', event.system)}\n\n{Pause(5000)}\n\n{OneOf(\"saliendo de supercrucero\", \"{OneOf(\\\"entrando a\\\", \\\"volviendo a\\\", \\\"reduciendo a\\\")} espacio normal\")}\n\n{if event.bodytype = 'Planet':\n    {OneOf(\"cerca de\", \"próximo a\", \"en las cercanías de\")} planet {P(event.body)}\n|elif event.bodytype = 'Star':\n    {OneOf(\"cerca de\", \"próximo a\", \"en las cercanías de\")} star {P(event.body)}\n  |elif event.bodytype = 'Station':\n    {OneOf(\"cerca de\", \"próximo a\", \"en las cercanías de\")} {P(event.body)}\n}. Enfriando {ShipName()}.",
      "default": true,
      "name": "Entered normal space",
      "description": "Se activa cuando su nave vuelve a espacio normal"
    },
    "Entered signal source": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set warninglevel to:\r\n   {set entered to OneOf(\"Hemos entrado en una señal\", \"Entramos en una señal\", \"Entrando en una señal\")}\r\n\r\n   {if event.threat < 2:\r\n      {entered}\r\n   |elif event.threat = 2:\r\n      Precaución. {entered} de amenaza media\r\n   |elif event.threat = 3:\r\n      Alerta. {entered} de alta amenaza\r\n   |elif event.threat = 4:\r\n      Peligro. {entered} de muy alta amenaza\r\n   |elif event.threat = 5:\r\n      Peligro extremo. {Occasionally(2, entered)} de muy alta amenaza\r\n   |elif event.threat = 6:\r\n      Peligro extremo. {Occasionally(2, entered)} de amenaza extremadamente alta\r\n   |elif event.threat = 7:\r\n      Peligro extremo. {Occasionally(2, entered)} de ultra alta amenaza\r\n   |else:\r\n      Peligro extremo. {Occasionally(2, entered)} de nivel {event.threat} de amenaza sin precedentes\r\n   }\r\n}\r\n\r\n{set source to token(event.source, \"$USS_Type_\", 1)}\r\n{if source = \"Aftermath;\":\r\n   {set source to OneOf(\"procedente de las consecuencias de un combate\", \"procedente de los restos de una batalla\")}\r\n|elif ((source = \"Anomaly;\" || source = \"Salvage;\") && event.threat = 2):\r\n   {set warninglevel to entered}\r\n   {set source to OneOf(\"de origen alienínega\", \"de procedencia no humana\", \"de una sonda targoide\")}\r\n|elif (source = \"Anomaly;\" && event.threat = 4):\r\n   {set warninglevel to entered}\r\n   {set source to OneOf(\"de origen alienígena\", \"de procedencia no humana\", \"de un sensor targoide\")}\r\n|elif source = \"Anomaly;\":\r\n   {set source to OneOf(\"de origen anómalo\", \"de procedencia desconocida\", \"de procedencia misteriosa\")}\r\n|elif source = \"Ceremonial;\":\r\n    {set source to \"procedente de comunicaciones ceremoniales\"}\r\n|elif source = \"Convoy;\":\r\n    {set source to \"procedente de un convoy\"}\r\n|elif source = \"DisruptedWakeEchoes;\":\r\n    {set source to \"\"}\r\n|elif source = \"DistressSignal;\":\r\n   {set source to \"procedente de un desastre\"}\r\n|elif source = \"MissionTarget;\":\r\n   {set source to OneOf(\"procedente de una misión\", \"codificada en una misión\")}\r\n|elif source = \"NonHuman;\":\r\n   {set source to OneOf(\"de origen alienígena\",\"de procedencia no humana\")}\r\n|elif source = \"Salvage;\":\r\n    {set source to \"procedente de transmisiones deterioradas\"}\r\n|elif source = \"ValuableSalvage;\":\r\n    {set source to \"procedente de emisiones codificadas\"}\r\n|elif source = \"VeryValuableSalvage;\":\r\n    {set source to \"procedente de emisiones de alto grado\"}\r\n|elif source = \"WeaponsFire;\":\r\n   {set source to OneOf(\"procedente de un combate\", \"originada por disparo de armas\")}\r\n}\r\n\r\n{Pause(2000)}\r\n{warninglevel} {source}. \r\n\r\n{if system.state = \"Anarchy\" && source = \"procedente de transmisiones deterioradas\" && system.population > 0: \r\n   {Occasionally(2, \"\r\n      Precaución.\r\n      {set local to OneOf('locales', 'cercanas')}\r\n      {set chatter to OneOf('comentarios', 'chismorreos', 'rumores')}\r\n      {set indicate to OneOf('indican', 'sugieren', 'implican', 'informan')}\r\n      {OneOf('transmisiones {local} {indicate}', \r\n         '{chatter} en transmisiones {local} {indicate}')}\r\n      {Occasionally(3, 'que hay')}\r\n      {OneOf('elevada', 'alta', 'considerable')}\r\n      {OneOf('actividad de', 'presencia de')}\r\n      {OneOf('{Occasionally(2, \\'sindicatos\\')} criminales ', \r\n             '{Occasionally(2, OneOf(\\'bandas\\', \\'clanes\\'))} piratas ' )}\r\n      en {OneOf('el área', 'los alrededores', 'este sector', 'este sistema')}.\r\n      {OneOf('Permanezca', 'esté', 'manténgase')} {OneOf('vigilante', 'alerta', 'atento')} \r\n      {Occasionally(3,' {F(\\'Honorific\\')}' )}.\r\n   \")}\r\n}",
      "default": true,
      "name": "Entered signal source",
      "description": "Se activa cuando su nave entra en una señal"
    },
    "Entered supercruise": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'fsd')}\n{SetState('eddi_context_last_action', 'engage')}\n\n{Pause(1000)}\n\n{OneOf(\"{ShipName()}\", \"\")} {OneOf(\"entrando en\", \"saltando a\")} supercrucero.\n",
      "default": true,
      "name": "Entered supercruise",
      "description": "Se activa cuando su nave entra en supercrucero"
    },
    "Exploration data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\n\"Adquiridos datos del sistema {P(event.system)}\",\n \"Datos de{OneOf('l sistema', ' exploración de')}  {P(event.system)} disponibles\",\n\"{Occasionally(3, '{ShipName()} ha')} recibido datos locales de{OneOf('l sistema', 'exploración de')} {P(event.system)}\",\n\"Confirmada la recepción de datos de{OneOf('l sistema', 'exploración de')} {P(event.system)}\"\n)}.",
      "default": true,
      "name": "Exploration data purchased",
      "description": "Se activa cuando compra datos de exploración"
    },
    "Exploration data sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Datos de exploración de {len(event.systems)} sistemas vendidos por {event.reward} créditos\n\n{if len(event.firsts) > 0:\n    , con una bonificación adicional de {event.bonus} créditos por\n    {if len(event.firsts) = 1:\n        un primer descubrimiento\n    |else:\n        {len(event.firsts)} sistemas descubiertos por primera vez\n    }\n}.",
      "default": true,
      "name": "Exploration data sold",
      "description": "Se activa cuando vendes datos de exploración"
    },
    "Exploration promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Ha sido recompensado por sus habilidades de exploración, {F(\"Honorific\")}.",
      "default": true,
      "name": "Exploration promotion",
      "description": "Se activa cuando aumenta su rango de exploración"
    },
    "Federation promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Enhorabuena {OneOf(\"Comandante {cmdr.name}\",\"Señor{if cmdr.gender = \"Female\":a}\")}! Ha sido\r\n{OneOf(\"ascendido\", \"nombrado\")} a \r\n{event.rank}\r\n{Occasionally(2, OneOf(\"dentro de la Armada Federal\", \"por sus servicios para la Federación\"))}\r\n\r\n{if event.rating= 3:\r\n    , y se le ha concedido acceso para poder comprar la Nave de Aescenso Federal\r\n|elif event.rating = 4:\r\n    , y el permiso para entrar en el sistema {P(\"Sol\")}\r\n|elif event.rating = 5:\r\n    , y se le ha concedido acceso para poder comprar la Nave de Asalto Federal \r\n    y los permisos para entrar en los sistemas {P(\"Vega\")} y {P(\"Beta Hydri\")}\r\n|elif event.rating = 6:\r\n    , y el permiso para entrar en el sistema PLX 695\r\n|elif event.rating = 7:\r\n    , y se le ha concedido acceso para poder comprar la Cañonera Federal \r\n    y el permiso para entrar en el sistema Ross 128\r\n|elif event.rating = 8:\r\n    , y el permiso para entrar en el sistema {P(\"Exbeur\")}\r\n|elif event.rating = 10:\r\n    , y el permiso para entrar en el sistema {P(\"Hors\")}\r\n|elif event.rating = 12:\r\n    , y se le ha concedido acceso para poder comprar la Corbeta Federal\r\n|elif event.rating = 14:\r\n    , el mayor {OneOf(\"rango\", \"honor\")} disponible para un miembro de la Federación de Pilotos\r\n}.\r\n",
      "default": true,
      "name": "Federation promotion",
      "description": "Se activa cuando aumenta su rango con la Federación"
    },
    "Fighter docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Caza {OneOf(\"embarcado\", \"acoplado\")} {Occasionally(2, \"en la nave\")}.",
      "default": true,
      "name": "Fighter docked",
      "description": "Se activa cuando atracas el caza en tu nave."
    },
    "Fighter launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"lanzando\", \"desacoplando\")} caza {Occasionally(2, \"de la nave\")}.",
      "default": true,
      "name": "Fighter launched",
      "description": "Se activa cuando lanza un caza desde su nave"
    },
    "Fighter rebuilt": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Caza {OneOf(\"Imprimido\", \"Reconstruido\")} y {OneOf(\"listo para despegar\", \"preparado\")}.",
      "default": true,
      "name": "Fighter rebuilt",
      "description": "Se activa cuando se ha reconstruido un caza en el hangar de su nave"
    },
    "File Header": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "File Header",
      "description": "Se activa cuando se ha leído el encabezado del archivo"
    },
    "Fine incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'fine')}\n{SetState('eddi_context_last_action', 'incur')}\n{SetState('eddi_context_fine_name', event.victim)}\n{SetState('eddi_context_fine_faction', event.faction)}\n{SetState('eddi_context_fine_amount', event.fine)}\n\n{OneOf ('Se nos ha impuesto una multa de {event.fine} créditos de la facción {event.faction}','la facción {event.faction} nos ha impuesto una multa de {event.fine} créditos')}.",
      "default": true,
      "name": "Fine incurred",
      "description": "Se activa cuando se le impone una multa"
    },
    "Fine paid": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'pay')}\r\n{SetState('eddi_context_fine_amount', event.amount)}\r\n\r\nPagada multa de {event.amount} créditos.",
      "default": true,
      "name": "Fine paid",
      "description": "Se activa cuando se paga una multa"
    },
    "Friends status": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Set uselist to \"white\" or \"black\", depending on which list you want to use to filter people _}\n{_ \"white\" will only allow notifications from people in this list (e.g. \"User1\", \"User2\", & \"User3\") _}\n{_ \"black\" will allow all notification EXCEPT those on this list (e.g. \"User4\", \"User5\", & \"User6\") _}\n{_ to allow all notifications, you may also use an empty blacklist (i.e. \"set blacklist to []\" _}\n\n{set uselist to \"black\"}\n\n{set whitelist to [\"User1\", \"User2\", \"User3\"]}\n{set blacklist to [\"User4\", \"User5\", \"User6\"]}\n\n{if event.name:\n    {if uselist = \"white\":\n        {if find(whitelist, event.name) > -1:\n            {event.name} is now {event.status}.\n        }\n    |elif uselist = \"black\":\n        {if find(blacklist, event.name) = -1:\n            {event.name} is now {event.status}.\n        }\n    }\n|else:\n    No se de quien me está hablando.\n}",
      "default": true,
      "name": "Friends status",
      "description": "Se activa cuando cambia el estatus de un Comandante amigo"
    },
    "FSD engaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'fsd')}\n{SetState('eddi_context_last_action', 'engage')}\n{SetState('eddi_context_system_name', event.system)}\n{SetState('eddi_context_system_system', event.system)}\n{SetState('eddi_context_fsd_target', event.target)}\r\n\n{if event.target = 'Hyperspace':\n    {_ Rewrite context to represent a jump }\n    {SetState('eddi_context_last_subject', 'jump')}\n    {SetState('eddi_context_last_action', 'start')}\n\n    {_ set system to SystemDetails(event.system) _} \r\n    {_ linea comentada porque sino no traducia la variable system.allegiance... ¿¿porque?? _}\n\n    {_ Wait for the FSD countdown and initial jump}\n    {Pause(5000)}\n\n    {OneOf(\"Destino confirmado\",\"salto en progreso\",\"telemetría obtenida\")}.\n    {ShipName()} está {OneOf(\"en dirección a\", \"en ruta a\", \"viajando a\", \"en tránsito a\")} el sistema {P(event.system)}. \r\n{_ Se ha cambiado la variable system.name por event.system _}\r\n\n    {if event.system = homesystem.name:\n        {OneOf(\"Por fin en casa\",\"Hogar, dulce-hogar\")}, {F(\"Honorific\")}\n    |else:\n        {set scoopables to [\"O\", \"B\", \"A\", \"F\", \"G\", \"K\", \"M\"]}\n        {if slice(event.stellarclass, 0, 1) = \"D\":\n            Precaución: detectada enana blanca.\n        |elif event.stellarclass = \"N\":\n            Precaución: detectada estrella de neutrones.\n        |elif event.stellarclass = \"H\":\n            Precaución: detectado agujero negro.\n        |elif find(scoopables, event.stellarclass) = -1:\n            {OneOf(\"Atención:\",\"Tenga en cuenta que\",\"Cuidado Comandante,\")} la estrella de destino no permite el repostaje de combustible.\n        }\n        \n        {if lastsystem.allegiance && lastsystem.allegiance != \"Ninguno\" && lastsystem.allegiance != \"Independiente\" && (!system.allegiance || system.allegiance = \"Ninguno\" || system.allegiance = \"Independiente\"):\n            Comandante {OneOf(\"estamos abandonando el espacio de\", \"hemos dejado\", \"ya no estamos en territorio de\")} {lastsystem.allegiance}.\n        |elif lastsystem.allegiance && lastsystem.allegiance != system.allegiance && system.allegiance && system.allegiance != \"Ninguno\":\n            {OneOf(\"ahora estamos en espacio de\", \"hemos llegado a\", \"estamos entrando en espacio de\")} {system.allegiance}.\n            {if cmdr.title != \"Comandante\":\n                El Gobierno local le da la bienvenida {Oneof(\"como\",\"con el título de\")} {F(\"Honorific\")}.\n            }\n        }\n\n        {if system.visits = 0:\n            Es su primera visita a este sistema\n        |elif system.visits = 1:\n            Es su segunda visita a este sistema\n        |elif system.visits = 2:\n            Es su tercera visita a este sistema\n        |elif system.visits = 3:\n            Es su cuarta visita a este sistema\n        |else:\n            Ha visitado este sistema {system.visits} veces\n        }.\n\n        {if !system.population:\n            {OneOf(\"Este sistema está despoblado\",\"No hay presencia humana en este sistema\", \"La Humanidad aún no ha colonizado este sistema\")}.\n        |else:\r\n         {if system.visits = 0:\n            {F(\"System report\")}\r\n        }\n        }\n\n        {if system.distancefromhome:\n            {Occasionally(7, \"{OneOf(\\\"Se encuentra a\\\", \\\"Su actual posición es a\\\", \\\"Actualmente esta a\\\")} {Humanise(system.distancefromhome)} años luz de {OneOf(\\\"casa\\\", \\\"{P(homesystem.name)}\\\")}.\")}\n        }\n\n        {if system.comment:\n            Ha hecho {OneOf(\"una anotación\", \"un comentario\", \"una observación\")} {OneOf(\"sobre\", \"acerca de\", \"en relación a\")} este sistema que {OneOf(\"dice\", \"indica\", \"señala\")} {system.comment}.\n        }\n    }\n}",
      "default": true,
      "name": "FSD engaged",
      "description": "Se activa cuando se ha conectado su motor de distorsión (FSD)"
    },
    "Fuel check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fuel Check _}\n{_ Report fuel level _}\n\n{if ship.name = state.eddi_fuelcheck_shipname:\n    {if state.eddi_context_fuel_used > state.eddi_fuelcheck_maxfuel:\n        {SetState('eddi_fuelcheck_maxfuel', state.eddi_context_fuel_used)}\n    }\n|else:\n    {SetState('eddi_fuelcheck_maxfuel', state.eddi_context_fuel_used)}\n    {SetState('eddi_fuelcheck_shipname', ship.name)}\n}\n\n{set maxfuel to state.eddi_fuelcheck_maxfuel}\n{set fuelremaining to state.eddi_context_fuel_remaining}\n{set maxjump to fuelremaining/maxfuel}\n{set currentfuel to round(fuelremaining / ship.fueltanktotalcapacity * 100, 0)}\n{set shipsfuel to:\n   {OneOf(\" niveles\", \" depósito\", \" reservas\")} de combustible {Occasionally(2, \"de {P(ShipName())}\" )} \n}\n{set currentpercent to: \n   al {currentfuel} por ciento {Occasionally(2, \"de su capacidad\")}\n}\n{set title to Occasionally(3,\"{F('Honorific')}\")}\n{if maxjump < 0.5:\n   Peligro!\n   {shipsfuel} agotado!\n   {Pause(500)}\n   Se encuentra en la reserva. Desconecte todos los sistemas no esenciales!\n   {Pause(500)}\n   Transpondedor de emergencia listo-{title}\n|elif maxjump < 1.25:\n   {OneOf(\"Alerta\", \"Precaución\", \"Peligro\", \"Atención\")}-{title}:\n   {shipsfuel} {OneOf(\"peligrosamente bajo\", \"casi agotado\")}.\n   {OneOf(\"Por favor recargue combustible\", \"Se recomienda encarecidamente que recargue combustible\")}\n|elif currentfuel < 25:\n   {OneOf(\"Alerta\", \"Precaución\", \"Peligro\", \"Atención\")}-{title}:\n   {shipsfuel} {OneOf(\"por debajo del 25%\", \"{currentpercent}\" )}\n|elif currentfuel < 50:\n   {shipsfuel} {OneOf(\"por debajo del 50%\", \"{currentpercent}\" )}-{title}\n|elif currentfuel < 75:\n   {Occasionally(2, \"{shipsfuel} {currentpercent}-{title}\")}\n|elif currentfuel < 100:\n   {Occasionally(3, \"{shipsfuel} {currentpercent}-{title}\")}\n|else:\n   {shipsfuel} {OneOf(currentpercent, \"al máximo\")}-{title}\n}",
      "default": true,
      "name": "Fuel check",
      "description": "Informa sobre niveles de combustible"
    },
    "Galnet latest news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    No hay noticias sin leer en esa categoría\r\n|else:\r\n    {set article to articles[0]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.\r\n",
      "default": true,
      "name": "Galnet latest news",
      "description": "Lee las últimas noticias que no se hayan leído en una determinada categoría"
    },
    "Galnet mark read": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\n{set articlecategory to state.article_category}\n\n{if articlecategory:\n    {set articles to GalnetNewsArticles(articlecategory)}\n|else:\n    {set articles to GalnetNewsArticles('Article')}\n}\n\n{if len(articles) = 0:\n    No hay noticias sin leer\n    {if articlecategory: 'in that category' }\n|elif len(articles) = 1:\n    {set item to 0}\n    {while item < len(articles):\n        {GalnetNewsMarkRead(articles[item].id)}\n        {set item to (item + 1)}\n    }\n{OneOf('un artículo marcado como leído', 'una noticia marcada como leída')} \n\n|else:\n    {set item to 0}\n    {while item < len(articles):\n        {GalnetNewsMarkRead(articles[item].id)}\n        {set item to (item + 1)}\n    }\n{len(articles)} {OneOf('artículos marcados como leídos', 'noticias marcadas como leídas')} \n}. \n",
      "default": true,
      "name": "Galnet mark read",
      "description": "Marca artículos nuevos como leídos"
    },
    "Galnet news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch article from state }\n{set articleid to state.articleid}\n{if articleid:\n    {set article to GalnetNews(articleid)}\n\n    {_ Context }\n    {SetState('eddi_context_last_subject', 'news')}\n    {SetState('eddi_context_galnet_news_id', articleid)}\n}\n\n{if !article:\n    {_ Fetch from context }\n    {set article to GalnetNews(state.eddi_context_galnet_news_id)}\n}\n\n{if article:\n    {article.title}: {article.content}\n    {GalnetNewsMarkRead(article.id)}\n|else:\n    No tengo ninguna información sobre ese artículo\n}.",
      "default": true,
      "name": "Galnet news",
      "description": "Lee un artículo en particular"
    },
    "Galnet news published": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set statustitle to \"^(Galactic News: ((Weekly .*)|(Starport Status Update)))|(Powerplay: Incoming Update)\"}\n\n{set interesting_news_title to []}\n{set interesting_news_content to []}\n{set not_interesting_news_title to []}\n{set not_interesting_news_content to []}\n\n{set item to 0}\n{while item < len(event.items):\n    {if !match(event.items[item].title, statustitle):\n        {set interesting_news_title to cat(interesting_news_title, [event.items[item].title])}\n        {set interesting_news_content to cat(interesting_news_content, [event.items[item].content])}\n    |else:\n        {set not_interesting_news_title to cat(not_interesting_news_title, [event.items[item].title])}\n        {set not_interesting_news_content to cat(not_interesting_news_content, [event.items[item].content])}\n    }\n    {GalnetNewsMarkRead(event.items[item].content.id)}\n    {set item to (item + 1)}\n}\n{if len(event.items) = len(interesting_news_title): \n    {set allinteresting to 1} \n}\n\n{if len(interesting_news_title) > 0:\n    {if len(interesting_news_title) = 1:\n        {set remarkable to OneOf('y destacado', 'e importante', 'e interesante', 'e intrigante', 'e inusual')}\n        Se ha publicado un nuevo {OneOf('', '{remarkable}' )}\n        artículo de GalNet titulado {interesting_news_title[0]}.\n    |elif len(event.items) > 1:\n        {len(event.items)} \n        {if allinteresting: \n         Se han publicado nuevos {OneOf('y destacados', 'e importantes', 'e interesantes', 'e intrigantes', 'e inusuales')}\n        }\n        artículos de GalNet \n        {if !allinteresting:\n             , incluyendo {len(interesting_news_title)} \n             {OneOf('de interés.', 'especialmente interesante.', 'digno de comentario.')}\n        }.\n    }\n|elif len(event.items) != ( len(interesting_news_title) + len(not_interesting_news_title) ):\n    {len(event.items)} se han publicado nuevos artículos de GalNet, pero no he sido capaz de determinar si alguno es de su interés, {F('Honorific')}. \n|elif len(interesting_news_title) = 0:\n    Se han actualizado las noticias de GalNet, pero no hay nada digno de mencionar, {F('Honorific')}.\n}\n\n{if len(interesting_news_title) > 0:\n    {if len(interesting_news_title) = 1:\n        Dice: {interesting_news_content[0]}.\n    |elif len(interesting_news_title) > 1:\n        {set item to 0}\n        {while item < len(interesting_news_title):\n            {if item = 0:\n                El primero \n                se titula {interesting_news_title[item]},\n                y dice: {interesting_news_content[item]}.\n            |elif item = 1:\n                El segundo\n                se titula {interesting_news_title[item]},\n                y dice: {interesting_news_content[item]}.\n            |elif item = len(event.items) - 1:\n                El último\n                se titula {interesting_news_title[item]},\n                y dice: {interesting_news_content[item]}.\n            |else:\n                El siguiente\n                se titula {interesting_news_title[item]},\n                y dice: {interesting_news_content[item]}.\n            }\n            {set item to item + 1}\n            {Pause(1000)}\n        }\n    }\n}",
      "default": true,
      "name": "Galnet news published",
      "description": "Se activa cuando se publican nuevas noticias en GalNet"
    },
    "Galnet oldest news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    No hay noticias sin leer en esa categoría\r\n|else:\r\n    {set article to articles[len(articles)-1]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.\r\n",
      "default": true,
      "name": "Galnet oldest news",
      "description": "Lee las noticias más antiguas sin leer en una categoría determinada"
    },
    "Galnet unread report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set articles to GalnetNewsArticles(\"Article\")}\r\n\r\n{if len(articles) = 0:\r\n    No tiene noticias sin leer\r\n|elif len(articles) = 1:\r\n    Tiene una noticia sin leer\r\n|else:\r\n    Tiene {len(articles)} noticias sin leer\r\n}.",
      "default": true,
      "name": "Galnet unread report",
      "description": "Informa sobre noticias sin leer"
    },
    "Glide": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'glide')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n\r\n{if event.gliding:\r\n{Pause(5000)}\r\n{Occasionally(2, \"modo\")} planeo\r\n{OneOf(\"activado.\", \"iniciado.\")}\r\n\r\n{Pause(1000)}\r\n{set body to BodyDetails(event.body, event.system)}\r\n{if !body.name || body.name = \"\" || !body.gravity:\r\nDatos de aproximación planetaria no disponibles.\r\n|else:\r\n{if body.landable:\r\n{set gravity to round(body.gravity,2)}\r\n{if gravity > 4:\r\n¡Peligro! {P(body.name)} es un mundo de gravedad extremadamente alta, con {gravity} G.\r\n|elif gravity > 2:\r\n¡Atención!! {P(body.name)} es un mundo de gravedad elevada, con {gravity} G.\r\n|elif gravity > 0.5:\r\n¡Precaución! {P(body.name)} es un mundo de gravedad media, con {gravity} G.\r\n|else:\r\n{P(body.name)} es un mundo de baja gravedad, con {gravity} G.\r\n}\r\n}\r\n}\r\n|else:\r\nPlaneo completado.\r\n}",
      "default": true,
      "name": "Glide",
      "description": "Triggered when your ship enters or exits glide"
    },
    "Heat damage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Alarma:\")}\r\ndaño por calentamiento.",
      "default": true,
      "name": "Heat damage",
      "description": "Se activa cuando su nave está sufriendo daños por excesivo calor"
    },
    "Heat warning": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Cuidado:\")}\r\nNiveles de calentamiento subiendo por encima del límite tolerable.",
      "default": true,
      "name": "Heat warning",
      "description": "Se activa cuando el calor de su nave supera el 100%"
    },
    "Honorific": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if system.allegiance = \"Imperio\":\n    {F(\"Empire honorific\")}\n|elif system.allegiance = \"Federación\":\n    {if cmdr.federationrating.rank = 0:\n        Comandante\n    |else:\n        {cmdr.federationrating.name}\n    }\n|else:\n    Comandante\n}\n",
      "default": true,
      "name": "Honorific",
      "description": "Función para proporcionar un tratamiento honorífico a su Comandante"
    },
    "Hull damaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.vehicle = vehicle:\n    {if event.health < 40:\n        Alerta roja:\n    |elif event.health < 60:\n        Atención:\n    |elif event.health < 80:\n        Precaución:\n    }\n    {OneOf(\"Casco\", \"Integridad del casco\", \"Integridad\", \"Integridad estructural\")} al {event.health}%.\n}\n",
      "default": true,
      "name": "Hull damaged",
      "description": "Se activa cuando el casco de su nave se encuentra dañada en cierta medida"
    },
    "Insurance check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set covereds to floor(cmdr.credits / ship.rebuy)}\r\n\n{if covereds = 0:\n Peligro: No tiene suficientes créditos para cubrir la franquicia de su seguro. \n|elif covereds = 1:\n  Precaución: Solo tiene créditos suficientes para cubrir una sola franquicia del seguro.\n|elif covereds < 4:\n  Le informo que solo tiene créditos suficientes para cubrir {covereds} franquicias del seguro.\n}\n",
      "default": true,
      "name": "Insurance check",
      "description": "Comprueba que tenga créditos suficientes para el seguro de su nave"
    },
    "Jet cone boost": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(1000)}\r\nMotor de distorsión cargado al {Humanise(event.boost * 100)} %.",
      "default": true,
      "name": "Jet cone boost",
      "description": "Se activa cuando se ha recogido suficiente material de un chorro de eyección (en una enana blanca o una estrella de neutrones) para un salto de rango ampliado"
    },
    "Jet cone damage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Jet cone damage",
      "description": "Se activa en espacio normal cuando se pasa a través de un chorro de eyección de una enana blanca o una estrella de neutrones ocasionando daños a los módulos de la nave"
    },
    "Jumped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'jump')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n{SetState('eddi_context_system_name', system.name)}\r\n{SetState('eddi_context_system_system', system.name)}\r\n{SetState('eddi_context_fuel_remaining', event.fuelremaining)}\r\n{SetState('eddi_context_fuel_used', event.fuelused)}\r\n\r\n{F('Fuel check')}\r\n\r\n{set statereport to F(\"System state report\")}\r\n{if statereport:\r\n    {statereport}\r\n    {Pause(2000)}\r\n}\r\n\r\n{set system_missions to F(\"Mission check system\")}\r\n{if system_missions:\r\n    {Pause(2000)}\r\n    {system_missions}\r\n}\r\n\r\n\r\n",
      "default": false,
      "name": "Jumped",
      "description": "Se activa cuando se completa un salto a otro sistema estelar (TEST)"
    },
    "Killed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Killed",
      "description": "Se activa cuando se destruye a otro jugador"
    },
    "Landing gear": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": null,
      "default": true,
      "name": "Landing gear",
      "description": "Triggered when you deploy or retract your landing gear"
    },
    "Landing pad report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set landingpad to state.eddi_context_landing_pad_pad}\n    La pista de aterrizaje número {landingpad}, está a\n    {if landingpad = 1:\n        las seis en punto cerca de la entrada\n    |elif landingpad = 2:\n        las seis en punto cerca de la entrada\n    |elif landingpad = 3:\n        las seis en punto al fondo\n    |elif landingpad = 4:\n        las seis en punto al fondo\n    |elif landingpad = 5:\n        las siete en punto cerca de la entrada\n    |elif landingpad = 6:\n        las siete en punto cerca de la entrada\n    |elif landingpad = 7:\n        las siete en punto al fondo\n    |elif landingpad = 8:\n        las siete en punto al fondo\n    |elif landingpad = 9:\n        las ocho en punto cerca de la entrada\n    |elif landingpad = 10:\n        las ocho en punto al fondo\n    |elif landingpad = 11:\n        las nueve en punto cerca de la entrada\n    |elif landingpad = 12:\n        las nueve en punto cerca de la entrada\n    |elif landingpad = 13:\n        las nueve en punto en la zona central\n    |elif landingpad = 14:\n        las nueve en punto al fondo\n    |elif landingpad = 15:\n        las nueve en punto al fondo\n    |elif landingpad = 16:\n        las diez en punto cerca de la entrada\n    |elif landingpad = 17:\n        las diez en punto cerca de la entrada\n    |elif landingpad = 18:\n        las diez en punto al fondo\n    |elif landingpad = 19:\n        las diez en punto al fondo\n    |elif landingpad = 20:\n        las once en punto cerca de la entrada\n    |elif landingpad = 21:\n        las once en punto cerca de la entrada\n    |elif landingpad = 22:\n        las once en punto al fondo\n    |elif landingpad = 23:\n        las once en punto al fondo\n    |elif landingpad = 24:\n        las doce en punto cerca de la entrada\n    |elif landingpad = 25:\n        las doce en punto al fondo\n    |elif landingpad = 26:\n        la una en punto cerca de la entrada\n    |elif landingpad = 27:\n        la una en punto cerca de la entrada\n    |elif landingpad = 28:\n        la una en punto en la zona central\n    |elif landingpad = 29:\n        la una en punto al fondo\n    |elif landingpad = 30:\n        la una en punto al fondo\n    |elif landingpad = 31:\n        las dos en punto cerca de la entrada\n    |elif landingpad = 32:\n        las dos en punto cerca de la entrada\n    |elif landingpad = 33:\n        las dos en punto al fondo\n    |elif landingpad = 34:\n        las dos en punto al fondo\n    |elif landingpad = 35:\n        las tres en punto cerca de la entrada\n    |elif landingpad = 36:\n        las tres en punto cerca de la entrada\n    |elif landingpad = 37:\n        las tres en punto en la zona central\n    |elif landingpad = 38:\n        las tres en punto al fondo\n    |elif landingpad = 39:\n        las cuatro en punto cerca de la entrada\n    |elif landingpad = 40:\n        las cuatro en punto al fondo\n    |elif landingpad = 41:\n        las cinco en punto cerca de la entrada\n    |elif landingpad = 42:\n        las cinco en punto cerca de la entrada\n    |elif landingpad = 43:\n        las cinco en punto en la zona central\n    |elif landingpad = 44:\n        las cinco en punto al fondo\n    |elif landingpad = 45:\n        las cinco en punto al fondo\n    }\n    , entrando con las luces verdes a su derecha.",
      "default": true,
      "name": "Landing pad report",
      "description": "Informa sobre la ubicación de la pista de aterrizaje asignada"
    },
    "Liftoff": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.playercontrolled = true:\n  Despegando.\n|else:\n  {ShipName()} ha despegado.\n}",
      "default": true,
      "name": "Liftoff",
      "description": "Se activa cuando su nave despega desde la superficie de un planeta"
    },
    "Lights": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": null,
      "default": true,
      "name": "Lights",
      "description": "Triggered when you activate or deactivate your lights"
    },
    "Limpet check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set  controllers to 0}\n{for compartment in ship.compartments:\n    {if find(compartment.module.name, \"Controller\") != -1:\n        {set controllers to controllers + 1}\n    }\n}\n\n{set limpets to 0}\n{for cargo in ship.cargo:\n    {if cargo.commodity.name = \"Limpet\":\n        {set limpets to limpets + cargo.amount}\n    }\n}\n{set tenpercent to ship.cargocapacity / 10 - 1}\n{if controllers > 0 && limpets = 0:\n    Aviso: llevamos un lanzador de drónes pero no llevamos ningún drón.\n|elif controllers = 0 && limpets > 0:\n    transportamos drónes pero no llevamos ningún lanzador\n|elif controllers > 0 && limpets < tenpercent:\n    solo llevamos {limpets} drónes a bordo; debería considerar el adquirir más.\n}\n",
      "default": true,
      "name": "Limpet check",
      "description": "Comprueba la presencia o ausencia de drones y controladores de drones"
    },
    "Limpet launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Drón {OneOf('lanzado','en marcha')}.",
      "default": true,
      "name": "Limpet launched",
      "description": "Triggered when a limpet is launched"
    },
    "Limpet purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} drón{if event.amount > 1:es} {Occasionally(2, \"ha{if event.amount > 1:n} sido\")} añadido{if event.amount > 1:s}, a{OneOf(\"l compartimento de carga\",\"l inventario\",\"la bodega\")} {OneOf(\"\",\"de la {ShipName()}\")}",
      "default": true,
      "name": "Limpet purchased",
      "description": "Se activa cuando compra drones en una estación espacial"
    },
    "Limpet sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} drón{if event.amount > 1:es}{Occasionally(2, \"ha{if event.amount > 1:n} sido\")} vendidos.",
      "default": true,
      "name": "Limpet sold",
      "description": "Se activa cuando vende drones en una estación espacial"
    },
    "List launchbays": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{for launchbay in ship.launchbays:\n    Tienes un hangar de tamaño {launchbay.size}, de tipo {launchbay.type}.\n    {for vehicle in launchbay.vehicles:\n        Tiene un {P(vehicle.name)} con {vehicle.loadout} de carga\n\n        {if type(vehicle.mount) != null:\n            {if vehicle.mount = 'F':\n                , y armas fijas\n            |elif vehicle.mount = 'G':\n                , y armas de seguimiento\n            }\n        }\n        .{_ full stop}\n\n        {if vehicle.rebuilds != null:\n            {if vehicle.rebuilds = 1:\n                Solo puedes imprimir uno más.\n            |elif vehicle.rebuilds = 0:\n                Falta material para su impresión.\n            |else:\n                Quedan {vehicle.rebuilds} cargas de impresión restantes.\n            }\n        }\n\n        {Pause(500)}\n    }\n}\n",
      "default": true,
      "name": "List launchbays",
      "description": "Describe el contenido de las bahías con vehículos de la nave."
    },
    "Location": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_system_name', event.system)}\n{SetState('eddi_context_body_name', event.body)}\n{SetState('eddi_context_body_system', event.system)}\n\nNos encontramos \n{if event.docked:\n    acoplados en la\n    {if event.station = event.body:\n        estación orbital {event.station}\n    |else:\n        estación planetaria {event.station} en {event.body}\n    }\n|elif event.body:\n    cerca de {event.body},\n} en el sistema {event.system}.\n",
      "default": true,
      "name": "Location",
      "description": "Se activa cuando se informa sobre la ubicación del Comandante, normalmente cuando se reinicia el juego"
    },
    "Low fuel": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Low fuel",
      "description": "Se activa cuando los niveles de combustible bajan del 25%"
    },
    "Market information updated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Find out in advance what we have to say }\n{if ship.role = \"Multi-purpose\" || ship.role = \"Trading\":\n    {set purchasecheck to F(\"Commodity purchase check\")}\n}\n{set limpetcheck to F(\"Limpet check\")}\n{set swapoutcheck to F(\"Swapout check\")}\n{set salecheck to F(\"Commodity sale check\")}\n\n{Pause(4500)}\n\n{if purchasecheck || salecheck || limpetcheck || swapoutcheck:\n    {OneOf(\"Recibid\", \"Obtenid\")}{OneOf(\"as actualizaciones de \", \"o Refresco de \", \"os cambios en \")}{OneOf(\"datos de\", \"información de\", \"precios en\")}\n    {OneOf(\" Mercado local\",\" Servicios de estación\")}.\n\n    {salecheck}\n    {purchasecheck}\n    {swapoutcheck}\n    {limpetcheck}\n}",
      "default": true,
      "name": "Market information updated",
      "description": "Se activa cuando se ha actualizado la información del mercado de la estación espacial en la que se ha aterrizado"
    },
    "Material collected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'collect')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n",
      "default": true,
      "name": "Material collected",
      "description": "Se activa cuando se recoge un material"
    },
    "Material discard report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\n{set _inventory(required) to:\n    {for material in materials:\n        {if material.material = required:\n            {return material}\n        }\n    }\n}\n\n{_ Fetch material from state }\n{set material to state.material}\n{if material:\n    {_ Fetch full material details }\n    {set material to MaterialDetails(material)}\n\n    {_ Context }\n    {SetState('eddi_context_last_subject', 'material')}\n    {SetState('eddi_context_material_name', material.name)}\n}\n\n{if !material:\n    {_ Fetch from context }\n    {set material to MaterialDetails(state.eddi_context_material_name)}\n}\n\n{set inventory to _inventory(material.name)}\n\n\n{if inventory:\n    {if inventory.maximum && inventory.maximum < inventory.amount:\n        {set over to inventory.amount - inventory.maximum}\n        {if over > 1:\n            Puede deshacerse de {over} unidades de {inventory.material} para alcanzar su nivel máximo.\n        |elif over = 1:\n            Puede deshacerse solo de una tonelada de {inventory.material} para alcanzar su nivel máximo.\n        }\n    |elif inventory.desired && inventory.desired < inventory.amount:\n        {set over to inventory.amount - inventory.desired}\n        {if over > 1:\n            Puede deshacerse de {over} unidades de {inventory.material} su nivel deseado\n        |elif over = 1:\n             Puede deshacerse solo de una tonelada de {inventory.material} su nivel deseado\n        }\n    |elif inventory.desired:\n        Está por debajo del nivel deseado de {inventory.material}.\n    |elif inventory.maximum:\n        Está por debajo de su nivel máximo de {inventory.material}.\n    |else:\n        No ha establecido ningún nivel para {inventory.material}.\n    }\n}\n",
      "default": true,
      "name": "Material discard report",
      "description": "Informa de cuántos materiales puedes eliminar"
    },
    "Material discarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discard')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n",
      "default": true,
      "name": "Material discarded",
      "description": "Se activa cuando eliminas algún material"
    },
    "Material discovered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discover')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n",
      "default": true,
      "name": "Material discovered",
      "description": "Se activa cuando descubres un material"
    },
    "Material donated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'donate')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n",
      "default": true,
      "name": "Material donated",
      "description": "Se activa cuando donas un material"
    },
    "Material inventory": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Material inventory",
      "description": "Se activa cuando obtienes un inventario de todos tus materiales"
    },
    "Material inventory report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\n{set _inventory(required) to:\n    {for material in materials:\n        {if material.material = required:\n            {return material}\n        }\n    }\n}\n\n{_ Fetch material from state }\n{set material to state.material}\n{if material:\n    {_ Fetch full material details }\n    {set material to MaterialDetails(material)}\n \n    {_ Context }\n    {SetState('eddi_context_last_subject', 'material')}\n    {SetState('eddi_context_last_subject', 'inventory')}\n    {SetState('eddi_context_material_name', material.name)}\n}\n\n{if !material:\n    {_ Fetch from context }\n    {set material to MaterialDetails(state.eddi_context_material_name)}\n}\n\n{set inventory to _inventory(material.name)}\n\n{if inventory && inventory.amount > 0:\n    {if inventory.amount = 1:\n       Tenemos {inventory.amount} unidad de {inventory.material} a bordo.\n    |else:\n       Tenemos {inventory.amount} unidades de {inventory.material} a bordo.\n    }\n|else:\n    {OneOf(\"No tenemos\",\"Estamos sin\")} {Occasionally(2,\"existencias de \")}{inventory.material} a bordo.\n}\n",
      "default": true,
      "name": "Material inventory report",
      "description": "Informa de cuántos materiales llevas a bordo"
    },
    "Material location report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch material from state }\n{set material to state.material}\n{if material:\n    {_ Fetch full material details }\n    {set material to MaterialDetails(material)}\n\n    {_ Context }\n    {SetState('eddi_context_last_subject', 'material')}\n    {SetState('eddi_context_material_name', material.name)}\n}\n\n{if !material:\n    {_ Fetch from context }\n    {set material to MaterialDetails(state.eddi_context_material_name)}\n}\n\n{if material.name:\n    {if material.location:\n        {OneOf(\"Se puede obtener\",\"Puedes obtener\",\"Podemos encontrar\")} {material.name} {material.location}\n    |else:\n        No encuentro información sobre dónde encontrar {material.name}\n    }\n|else:\n    Lo siento, {OneOf(\"no reconozco ese material\",\"no se de que material me hablas\")}\n}.\n",
      "default": true,
      "name": "Material location report",
      "description": "Informa sobre dónde encontrar un material en particular"
    },
    "Material required report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\n{set _inventory(required) to:\n    {for material in materials:\n        {if material.material = required:\n            {return material}\n        }\n    }\n}\n\n{_ Fetch material from state }\n{set material to state.material}\n{if material:\n    {_ Fetch full material details }\n    {set material to MaterialDetails(material)}\n\n    {_ Context }\n    {SetState('eddi_context_last_subject', 'material')}\n    {SetState('eddi_context_material_name', material.name)}\n}\n\n{if !material:\n    {_ Fetch from context }\n    {set material to MaterialDetails(state.eddi_context_material_name)}\n}\n\n{set inventory to _inventory(material.name)}\n\n\n{if inventory:\n    {if inventory.minimum && inventory.minimum > inventory.amount:\n        {set under to inventory.minimum - inventory.amount}\n        {if under > 1:\n            Necesita {under} unidades de {inventory.material} para alcanzar la cantidad mínima.\n        |elif under = 1:\n            Necesita una unidad de {inventory.material} para alcanzar la cantidad mínima.\n        }\n    |elif inventory.desired && inventory.desired > inventory.amount:\n        {set under to inventory.desired - inventory.amount}\n        {if under > 1:\n            Necesita {under} unidades de {inventory.material} para alcanzar el nivel deseado.\n        |elif under = 1:\n            Necesita una unidad más de {inventory.material} para alcanzar el nivel deseado.\n        }\n    |elif inventory.desired:\n        Llevamos mas {inventory.material} de lo deseado.\n    |elif inventory.minimum :\n        Estamos por encima del nivel mínimo de {inventory.material}.\n    |else:\n        No se ha establecido la cantidad deseada de {inventory.material}.\n    }\n}\n\n",
      "default": true,
      "name": "Material required report",
      "description": "Informa de cuántos materiales se necesitan para alcanzar el nivel \"deseado\""
    },
    "Material threshold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.level = 'Minimum': \n{_ Gone below the minimum level } \n{OneOf(\"El Stock\", \"el inventario\", \"la reserva\")} de {event.material.name} ha caído por debajo del mínimo establecido\n|elif event.level = 'Maximum': \n{_ Gone above the maximum level } \n{OneOf(\"El Stock\", \"el inventario\", \"la reserva\")} de {event.material.name} ha superado el máximo establecido\n|else: \n{_ Moved around the desired level } \n{if event.change = 'Increase': \nHas alcanzado el nivel deseado de {event.material.name}. \n|else: \nEst{event.material.name}. \n} \n} \n\n{OneOf(\"Actualmente tenemos {event.amount}\", \n\"Ahora mismo tenemos {event.amount}\", \n\"{event.amount} a bordo\")}.",
      "default": true,
      "name": "Material threshold",
      "description": "Se activa cuando un material alcanza el umbral"
    },
    "Material traded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Material traded",
      "description": "Se activa cuando se comercializa con un comerciante de materiales"
    },
    "Material use report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch material from state }\n{set material to state.material}\n{if material:\n    {_ Fetch full material details }\n    {set material to MaterialDetails(material)}\n\n    {_ Context }\n    {SetState('eddi_context_last_subject', 'material')}\n    {SetState('eddi_context_material_name', material.name)}\n}\n\n{if !material:\n    {_ Fetch from context }\n    {set material to MaterialDetails(state.eddi_context_material_name)}\n}\n\n{if material && material.name:\n    {set uses to len(material.blueprints)}\n    {if slice(material.name, len(material.name)-1) = 's':\n        {set plural to 'son'}\n    |else:\n        {set plural to 'es'}\n    }\n    {if uses = 0:\n      Ninguna cantidad de {material.name} {plural} de utilidad para ningún plano\n    |elif uses = 1:\n        {set name to cat(material.blueprints[0].name, material.blueprints[0].modulename, 'grade', material.blueprints[0].grade)}\n        {material.name} {plural} de utilidad para el plano {name}\n    |elif uses = 2:\n        {set name0 to cat(material.blueprints[0].name, material.blueprints[0].modulename, 'grade', material.blueprints[0].grade)}\n        {set name1 to cat(material.blueprints[1].name, material.blueprints[1].modulename, 'grade', material.blueprints[1].grade)}\n        {material.name} {plural} de utilidad para los planos {name0} y {name1}\n    |else:\n        {material.name} {plural} de utilidad para los {len(material.blueprints)} planos siguientes:\n        {set cur to 0}\n        {while cur < len(material.blueprints):\n            {set name to cat(material.blueprints[cur].name, material.blueprints[cur].modulename, 'grade', material.blueprints[cur].grade)}\n            {if cur = 0:\n                {name}\n            |elif cur < len(material.blueprints) - 1:\n                , {name}\n            |else:\n                , y {name}\n            }\n            {set cur to cur + 1}\n        }\n    }\n|else:\n    No consigo encontrar información sobre este material\n}.\n",
      "default": true,
      "name": "Material use report",
      "description": "Informa del uso de un material"
    },
    "Materials discard report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "\n{_ Find those that are above maximum, desired and minimum}\n{set shoulddiscardmaterials to []}\n{set coulddiscardmaterials to []}\n{set lastdiscardmaterials to []}\n\n{for material in materials:\n    {if material.maximum && material.amount > material.maximum:\n      {set shoulddiscardmaterials to cat(shoulddiscardmaterials, [material])}\n    |elif material.desired && material.amount > material.desired:\n      {set coulddiscardmaterials to cat(coulddiscardmaterials, [material])}\n    |elif material.minimum && material.amount > material.minimum:\n      {set lastdiscardmaterials to cat(lastdiscardmaterials, [material])}\n    }\n}\n\n{if len(shoulddiscardmaterials) > 0:\n   Estamos por encima del nivel máximo de {if len(shoulddiscardmaterials) = 1: 1 material |else: {len(shoulddiscardmaterials)} materials}.  Podemos deshacernos de\n    {if len(shoulddiscardmaterials) = 1:\n        {shoulddiscardmaterials[0].amount - shoulddiscardmaterials[0].maximum} {shoulddiscardmaterials[0].material}\n    |elif len(shoulddiscardmaterials) = 2:\n        {shoulddiscardmaterials[0].amount - shoulddiscardmaterials[0].maximum} {shoulddiscardmaterials[0].material} y {shoulddiscardmaterials[1].amount - shoulddiscardmaterials[1].maximum} {shoulddiscardmaterials[1].material}\n    |else:\n        {set cur to 0}\n        {while cur < len(shoulddiscardmaterials):\n            {if cur = 0:\n                {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].material}\n            |elif cur < len(shoulddiscardmaterials) - 1:\n                , {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].material}\n            |else:\n                , y {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].material}\n            }\n            {set cur to cur + 1}\n        }\n    }.\n|elif len(coulddiscardmaterials) > 0:\n    Tenemos más cantidad de {if len(coulddiscardmaterials) = 1: 1 material |else: {len(coulddiscardmaterials)} materials} de lo deseado.  Podemos descartar\n    {if len(coulddiscardmaterials) = 1:\n        {coulddiscardmaterials[0].amount - coulddiscardmaterials[0].desired} {coulddiscardmaterials[0].material}\n    |elif len(coulddiscardmaterials) = 2:\n        {coulddiscardmaterials[0].amount - coulddiscardmaterials[0].desired} {coulddiscardmaterials[0].material} y {coulddiscardmaterials[1].amount - coulddiscardmaterials[1].desired} {coulddiscardmaterials[1].material}\n    |else:\n        {set cur to 0}\n        {while cur < len(coulddiscardmaterials):\n            {if cur = 0:\n                {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[cur].material}\n            |elif cur < len(coulddiscardmaterials) - 1:\n                , {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[cur].material}\n            |else:\n                , y {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[cur].material}\n            }\n            {set cur to cur + 1}\n        }\n    }.\n|elif len(lastdiscardmaterials) > 0:\n    Estamos por encima del mínimo requerido de {if len(lastdiscardmaterials) = 1: 1 material |else: {len(lastdiscardmaterials)} materials}.  Podemos eliminar \n    {if len(lastdiscardmaterials) = 1:\n        {lastdiscardmaterials[0].amount - lastdiscardmaterials[0].minimum} {lastdiscardmaterials[0].material}\n    |elif len(lastdiscardmaterials) = 2:\n        {lastdiscardmaterials[0].amount - lastdiscardmaterials[0].minimum} {lastdiscardmaterials[0].material} y {lastdiscardmaterials[1].amount - lastdiscardmaterials[1].minimum} {lastdiscardmaterials[1].material}\n    |else:\n        {set cur to 0}\n        {while cur < len(lastdiscardmaterials):\n            {if cur = 0:\n                {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].material}\n            |elif cur < len(lastdiscardmaterials) - 1:\n                , {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].material}\n            |else:\n                , y {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].material}\n            }\n            {set cur to cur + 1}\n        }\n    }.\n|else:\n    No podemos deshacernos de ningún material si queremos estar dentro de los mínimos necesarios\n}\n",
      "default": true,
      "name": "Materials discard report",
      "description": "Informa sobre qué materiales se pueden descartar"
    },
    "Materials required report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set required to []}\n\n{for material in materials:\n  {if material.desired && material.amount < material.desired:\n    {set required to cat(required, [material])}\n }\n}\n\n{if len(required) > 0:\n    Se requiere\n    {if len(required) = 1:\n        {required[0].desired - required[0].amount} {required[0].material}\n    |elif len(required) = 2:\n        {required[0].desired - required[0].amount} {required[0].material} and {required[1].desired - required[1].amount} {required[1].material}\n    |else:\n        {set cur to 0}\n        {while cur < len(required):\n            {if cur = 0:\n                {required[cur].desired - required[cur].amount} {required[cur].material}\n            |elif cur < len(required) - 1:\n                , {required[cur].desired - required[cur].amount} {required[cur].material}\n            |else:\n                , y {required[cur].desired - required[cur].amount} {required[cur].material}\n            }\n            {set cur to cur + 1}\n        }\n    }.\n|else:\n    Ya tenemos todos los materiales deseados\n}",
      "default": true,
      "name": "Materials required report",
      "description": "Informa de cuántos materiales son necesarios para alcanzar el nivel \"deseado\""
    },
    "Message received": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'message')}\n{SetState('eddi_context_last_action', 'receive')}\n{SetState('eddi_context_message_name', event.from)}\n{SetState('eddi_context_message_content', event.message)}\n\n{if event.player = true:\n    {if event.message = \"o7\":\n        El comandante {event.from}\n        {if event.channel = \"player\":\n            le\n        } manda saludos.\n    |else:\n        {event.from} dice: {event.message}.\n    }\n|elif event.source != \"Station\":\n    Mensaje de {event.from}: {event.message}.\n}\n",
      "default": true,
      "name": "Message received",
      "description": "Se activa cuando recibes un mensaje"
    },
    "Message sent": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'message')}\n{SetState('eddi_context_last_action', 'send')}\n{SetState('eddi_context_message_name', event.to)}\n{SetState('eddi_context_message_content', event.message)}\n\n{OneOf(\"Lanzando mensaje\", \"Mensaje enviado\", \"Enviado\")}.",
      "default": true,
      "name": "Message sent",
      "description": "Se activa cuando envías un mensaje"
    },
    "Mission abandoned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'abandon')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if event.communal:\r\n    Ha abandonado un objetivo de comunidad: {mission.localisedname}\r\n|else:\r\n    {if find(mission.typeEDName, \"de pasajeros\") > -1:\r\n        {set type to \"de transporte\"}\r\n        {set type to cat(type, mission.passengertype)}\r\n    |else:\r\n        {set type to mission.type}\r\n    }\r\n    {set type to cat(\"misión \", type)}\r\n\r\n{if type = \"Hackeo\": {set type to \"jaqueo\"}}\r\n\r\n    {type} {if mission.faction: de {mission.faction}} abandonada.\r\n}\r\n\r\n",
      "default": false,
      "name": "Mission abandoned",
      "description": "Se activa cuando abandonas una misión (TEST)"
    },
    "Mission accepted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'accepted')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if mission.type = \"Donation\":\r\n    {OneOf(\"Has escogido\",\"misión aceptada para\")} {Occasionally(2,\"generosamente\")} donar\r\n    {if mission.typeEDName = \"Altruism\": {mission.commodity} |else: créditos} para \r\n    {OneOf('mejorar','levantar','incrementar')} su {OneOf('reputación','estatus')} con {P(mission.faction)}\r\n|elif event.communal:\r\n    Ha aceptado el objetivo de comunidad: {mission.localisedname}\r\n|else:\r\n    {if find(mission.typeEDName, \"Passenger\") > -1:\r\n        {set type to \"transporte de \"}\r\n        {set type to cat(type, mission.passengertype)}\r\n    |else:\r\n        {set type to mission.type}\r\n    }\r\n    {if type = \"Hackeo\": {set type to \"jaqueo\"}}\r\n    {set type to cat(\"misión de \",type)}\r\n\r\n    {OneOf(\"{type} {if mission.faction: para {mission.faction}} aceptada\",\r\n        \"{type} aceptada {if mission.faction: para {mission.faction}}\",\r\n        \"Ha aceptado la {type} {if mission.faction: para {mission.faction}}\")\r\n    }\r\n}\r\n\r\n{F(\"Mission faction state\")}\r\n\r\n{if mission.passengerswanted:\r\n    ¡Atención! ¡Estamos {OneOf(\"transportando\",\"llevando\")}\r\n    {OneOf(\"pasajeros\",\"traidores\",\"embusteros\",\"canallas\")} {OneOf(\"buscados\",\"ilegales\")}!\r\n    Podríamos ser atacados por la {OneOf(\"autoridad\",'policía')} {Occasionally(2,\"del sistema\")}.\r\n    {OneOf('Mucha precaución comandante','Se aconseja precaución')}. Evite ser escaneado.\r\n\r\n|elif token(mission.name,\"_\",2) = \"Skimmer\":\r\n    Esta es una {OneOf('misión','operación')} de superficie\r\n\r\n|elif token(mission.name,\"_\",2) = \"Surface\":\r\n    Esta es una {OneOf('misión','operación')} de superficie, requerirá de un V R S.\r\n}.\r\n\r\n{if !event.communal:\r\n    {if missionsCount = 20:\r\n        Ha alcanzado el número máximo de misiones que puedes tomar.\r\n        Por favor, complete algunas antes de aceptar más.\r\n    |else:\r\n       {OneOf(\"{Occasionally(2,'Ahora mismo')} tienes {missionsCount} misión{if missionsCount > 1:es}\",\r\n            \"{if missionsCount = 1:Ahora} esta es tu {missionsCount}a misión\")}.\r\n    }\r\n}\r\n\r\n",
      "default": false,
      "name": "Mission accepted",
      "description": "Se activa cuando aceptas una misión (TEST)"
    },
    "Mission check galaxy": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission report }\r\n{_ Check what systems you have missions in }\r\n\r\n\r\n{_ Setup allmissions function }\r\n{set allmissions(system) to:\r\n{set here to find(systems, system)}\r\n    {if here > -1:\r\n        {set number to systems_count[here] + 1}\r\n        {set systems_count to union(systems_count, [here:number])}\r\n    |else:\r\n        {set systems to cat(systems, [system])}\r\n        {set systems_count to cat(systems_count, [1])}\r\n    }\r\n}\r\n\r\n{if missionsCount > 0:\r\n\r\n    {set multi to 0}\r\n\r\n    {OneOf(\"Actualmente\",\"Ahora mismo\")} tenemos {missionsCount} misión{if missionsCount != 1:es} por completar. \r\n\r\n    {if missionsCount = 1:\r\n        El objetivo está {Occasionally(2,\"localizado\")} en\r\n        {if missions[0].destinationsystem && missions[0].destinationsystem != \"\":\r\n            el sistema {Occasionally(2,\"estelar\")} {P(missions[0].destinationsystem)}\r\n        |else:\r\n            paradero desconocido\r\n        }.\r\n        \r\n    |else:\r\n        {set systems to []}\r\n        {set systems_count to []}\r\n\r\n        {for mission in missions:\r\n            {if mission.status = \"Active\":\r\n                {if mission.destinationsystems:\r\n                    {set multi to multi + 1}\r\n                    {for destination in mission.destinationsystems:\r\n                        {allmissions(destination.name)}\r\n                    }\r\n                |elif mission.destinationsystem && mission.destinationsystem != \"\":\r\n                    {allmissions(mission.destinationsystem)}\r\n                }\r\n            }\r\n        }\r\n\r\n        {if len(systems) = 0:\r\n            sin ningún sistema asignado.\r\n        |elif len(systems) = 1:\r\n            . Todas están {Occasionally(2,\"localizadas\")} en\r\n            {if systems && systems[0] != \"\":\r\n                el sistema {Occasionally(2,\"estelar\")} {P(systems[0])}\r\n            |else:\r\n                desasignados\r\n            }\r\n            .\r\n\r\n        |else:\r\n            {if multi > 0:\r\n\r\n                {if multi = missionsCount: Todas |else: {multi} de}\r\n                estas\r\n                {if multi = 1: es una |else: son}\r\n                misión{if multi != 1:es} con varios destinos \r\n            }\r\n            Está{if systems_count[0] = 1: |else:n }\r\n\r\n            {set cur to 0}\r\n            {while cur < len(systems):\r\n                {systems_count[cur]} \r\n                {if cur = 0: destinación{if systems_count[0] > 1:es}}\r\n                {if systems[cur] = \"\":\r\n                    en un sistema no designado\r\n                |else:\r\n                    {OneOf(\"en\",\"ubicada en\")} el sistema {P(systems[cur])}\r\n                }\r\n\r\n                {set cur to cur + 1}\r\n                {if cur = len(systems)-1: y |elif cur < len(systems):, }\r\n            }\r\n        }.\r\n    }\r\n|else:\r\n    {OneOf(\"Actualmente no tenemos ninguna misión.\", \"En estos momentos no hay misiones disponibles.\", \"Tenemos la agenda de misiones vacía\")}\r\n}",
      "default": true,
      "name": "Mission check galaxy",
      "description": "Revisa que misiones tenemos actualmente y donde"
    },
    "Mission check station": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission check station }\r\n{_ Check what missions you have for the current station }\r\n\r\n\r\n{if missionsCount > 0:\r\n    {set current_station to state.eddi_context_body_name}\r\n    {set active_missions to 0}\r\n    {set complete_missions to 0}\r\n    {set depot_missions to 0}\r\n\r\n    {if current_station && current_station != \"\":\r\n        {for mission in missions:\r\n            {if mission.destinationstation = current_station ||\r\n                (mission.originstation = current_station && find(mission.type, \"Delivery\") > -1):\r\n                {if mission.status = \"Active\":\r\n                    {if find(mission.type, \"Collect\") > -1 || find(mission.type, \"Delivery\") > -1:\r\n                        {set depot_missions to depot_missions + 1}\r\n                    |else:\r\n                        {set active_missions to active_missions + 1}\r\n                    }\r\n                |elif mission.status = \"Complete\":\r\n                    {set complete_missions to complete_missions + 1}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    {set total to active_missions + complete_missions + depot_missions}\r\n    {if total > 0:\r\n        Tenemos\r\n        {if depot_missions > 0:\r\n            {depot_missions} depot\r\n            {if active_missions > 0 && complete_missions > 0: ,\r\n            |elif active_missions > 0 || complete_missions > 0: y}\r\n        }\r\n        {if active_missions > 0:\r\n            {active_missions} activa\r\n            {if complete_missions > 0: y}\r\n        }\r\n        {if complete_missions > 0:\r\n            {complete_missions} completada\r\n        }\r\n        misión{if total > 1:es} {Occasionally(3,\"localizadas\")} en esta estación.\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Mission check station",
      "description": "Check what missions you have for the current station"
    },
    "Mission check system": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission check system }\r\n{_ Check what missions you have for the current system }\r\n\r\n\r\n{_ Setup addstation function }\r\n{set addstation(station) to:\r\n    {set missions_here to missions_here + 1}\r\n    {set station_based to station_based + 1}\r\n    {set here to find(stations_here, station)}\r\n    {if here > -1:\r\n        {if mission.status = \"Active\":\r\n            {if mission.type = \"Collect\" ||  mission.type= \"Delivery\":\r\n                {set depot to stations_depot[here] + 1}\r\n                {set stations_depot to union(stations_depot, [here:depot])}\r\n\r\n            |else:\r\n                {set active to stations_active[here] + 1}\r\n                {set stations_active to union(stations_active, [here:active])}\r\n            }\r\n        |else:\r\n            {set complete to stations_complete[here] + 1}\r\n            {set stations_complete to union(stations_complete, [here:complete])}\r\n        }\r\n    |else:\r\n        {set stations_here to cat(stations_here, [station])}\r\n        {if mission.status = \"Active\":\r\n            {if mission.type = \"Collect\" ||  mission.type= \"Delivery\":\r\n                {set stations_active to cat(stations_active, [0])}\r\n                {set stations_depot to cat(stations_depot, [1])}\r\n            |else:\r\n                {set stations_active to cat(stations_active, [1])}\r\n                {set stations_depot to cat(stations_depot, [0])}\r\n            }\r\n            {set stations_complete to cat(stations_complete, [0])}\r\n        |else:\r\n            {set stations_active to cat(stations_active, [0])}\r\n            {set stations_complete to cat(stations_complete, [1])}\r\n            {set stations_depot to cat(stations_depot, [0])}\r\n        }\r\n    }\r\n}\r\n\r\n{if missionsCount > 0:\r\n    {set current_system to system.name}\r\n    {set missions_here to 0}\r\n    {set station_based to 0}\r\n    {set stations_active to []}\r\n    {set stations_complete to []}\r\n    {set stations_depot to []}\r\n    {set stations_here to []}\r\n    {set non_stations to []}\r\n\r\n    {_ Find all missions in the current system and identify all the stations }\r\n    {for mission in missions:\r\n        {if mission.status != \"Failed\":\r\n            {if mission.destinationsystems:\r\n                {for destination in mission.destinationsystems:\r\n                    {if destination.name = current_system && !destination.visited:\r\n                        {set missions_here to missions_here + 1}\r\n                        {if find(mission.typeEDName, \"Passenger\") > -1:\r\n                            {set type to \"Transport \"}\r\n                            {set type to cat(type, mission.passengertype)}\r\n                        |else:\r\n                            {set type to mission.type}\r\n                        }\r\n\r\n                        {if find(non_stations, type) = -1:\r\n                            {set non_stations to cat(non_stations, [type])}\r\n                        }\r\n                    }\r\n                }\r\n            |elif mission.destinationsystem = current_system:\r\n                {if mission.destinationstation && mission.destinationstation != \"\":\r\n                    {addstation(mission.destinationstation)}\r\n                |else:\r\n                    {if mission.status = \"Active\":\r\n                        {set missions_here to missions_here + 1}\r\n                        {if find(mission.typeEDName, \"Passenger\") > -1:\r\n                            {set type to \"Transport \"}\r\n                            {set type to cat(type, mission.passengertype)}\r\n                        |else:\r\n                            {set type to mission.type}\r\n                        }\r\n                        {if find(non_stations, type) = -1:\r\n                            {set non_stations to cat(non_stations, [type])}\r\n                        }\r\n                    }\r\n                }\r\n            |elif mission.originsystem = current_system && find(mission.type, \"Delivery\") > -1:\r\n                {if mission.originstation && mission.originstation != \"\":\r\n                    {addstation(mission.originstation)}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    {if missions_here > 0:\r\n        Tenemos {if missions_here > 1:  |else: } {missions_here}\r\n        misión{if missions_here > 1:es} {OneOf('aquí','en este sistema')}{if missions_here > 1:.}\r\n\r\n        {if station_based > 0:\r\n            {Pause(500)}\r\n            {if missions_here = 1:\r\n            |elif len(stations_here) = 1:\r\n                {if missions_here = station_based: Todas |else: Tienes}\r\n            }\r\n\r\n            {set cur to 0}\r\n            {while cur < len(stations_here):\r\n                {set station to StationDetails(stations_here[cur])}\r\n                {set total to stations_active[cur] + stations_complete[cur] + stations_depot[cur]}\r\n\r\n                {if stations_depot[cur] > 0:\r\n                    {stations_depot[cur]} depot\r\n                    {if stations_active[cur] > 0 && stations_complete[cur] > 0: ,\r\n                    |elif stations_active[cur] > 0 || stations_complete[cur] > 0: y}\r\n                }\r\n                {if stations_active[cur] > 0:\r\n                    {stations_active[cur]} activa{if stations_active[cur] > 1:s}\r\n                    {if stations_complete[cur] > 0: y}\r\n                }\r\n                {if stations_complete[cur] > 1:\r\n                    {stations_complete[cur]}\r\n                }\r\n                {if stations_complete[cur] = 1:}\r\n                    \r\n                \r\n                {if len(stations_here) = 1: {if total > 1: |else: }} en\r\n                {station.model} {stations_here[cur]}\r\n                {set cur to cur + 1}\r\n                {if cur = len(stations_here)-1: y |elif cur < len(stations_here): ,}\r\n            }.\r\n        }\r\n\r\n        {if missions_here > station_based:\r\n            {Pause(500)}\r\n            {set remaining to missions_here - station_based}\r\n            La {if station_based > 0: última {remaining}}\r\n\r\n            {set cur to 0}\r\n            {while cur < len(non_stations):\r\n                {non_stations[cur]}\r\n               \r\n                {set cur to cur + 1}\r\n                {if cur = len(non_stations)-1: y |elif cur < len(non_stations): ,}\r\n            }\r\n            misión{if remaining > 1: es} deben {OneOf(\"buscarse\",\"encontrarse\",\"ser encontradas\")}.\r\n        }\r\n    }\r\n}\r\n",
      "default": false,
      "name": "Mission check system",
      "description": "Check what missions you have for the current system"
    },
    "Mission completed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission completed }\r\n{_ Triggered when you complete a mission }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'misión')}\r\n{SetState('eddi_context_last_action', 'completada')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if cmdr.gender = \"Female\":\r\n    {set o to \"a\"}\r\n|else:\r\n    {set o to \"o\"}\r\n}\r\n\r\n{if find(mission.typeEDName, \"passenger\") > -1:\r\n    {set type to \"Transporte \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{_ set type to cat(\"misión de \",type) _}\r\n{set ranktype to token(mission.name,\"_\",2)}\r\n\r\n{if type = \"misión de \" || type = \"misión\":\r\n    {set m to \"a\"}\r\n|else:\r\n    {set m to \"o\"}\r\n}\r\n\r\n{if type = \" misión\":\r\n    {set la to \"la\"}\r\n|else:\r\n    {set la to \"el\"}\r\n}\r\n\r\n{if type = \"Hackeo\": {set type to \"jaqueo\"}}\r\n\r\n{if mission.type = \"Donativo\":\r\n    {if mission.typeEDName = \"Altruism\":\r\n        {set donate to cat(event.amount, \" toneladas de \",event.commodity)}\r\n    |else:\r\n\r\n{if event.donation > 1300000: {set esde to \"es de\"}}\r\n{if event.donation <= 1300000: {set esde to \" de\"}}\r\n{if event.donation < 1000000: {set esde to \"\"}}\r\n\r\n        {set donate to cat(Humanise(event.donation),\"{esde} créditos\")}\r\n    }\r\n\r\n    {OneOf(\"Ha hecho un donativo de {Occasionally(2, '{donate}')} a la {Occasionally(2, 'agradecida')} facción {P(mission.faction)}\",\r\n        \"{P(mission.faction)} ha recibido su donación {Occasionally(2, 'de {donate}')}\",\r\n        \"{P(mission.faction)} le da las gracias por su donación {Occasionally(2, 'de {donate}')}\")}\r\n    {F(\"Mission faction state\")}.\r\n\r\n|elif ranktype = \"RANKEMP\" || ranktype = \"RankEmp\" || ranktype = \"RANKFED\" || ranktype = \"RankFed\":\r\n    {OneOf(\"Ha completado la misión de {type} satisfactoriamente\",\"La misión de {type} se ha completado satisfactoriamente\")}\r\n|elif mission.communal:\r\n    Ha completado el objetivo de comunidad: {mission.name}.\r\n\r\n{if mission.reward > 1300000: {set esde to \"es de\"}}\r\n{if mission.reward <= 1300000: {set esde to \" de\"}}\r\n{if mission.reward < 1000000: {set esde to \"\"}}\r\n\r\n    Ha {OneOf('recibido','sido recompensad{o} con')} {Humanise(mission.reward)}{esde} créditos por su\r\n    {OneOf(\"contribución\",\"participación\",\"esfuerzo\")}\r\n|else:\r\n    {if event.reward > 0:\r\n\r\n{if event.reward > 1300000: {set esde to \"es de\"}}\r\n{if event.reward <= 1300000: {set esde to \" de\"}}\r\n{if event.reward < 1000000: {set esde to \"\"}}\r\n\r\n        {OneOf(\"Misión de {type} completada. Ha {OneOf('recibido','sido recompensad{o} con')}\r\n                {Humanise(event.reward)}{esde} créditos\",\r\n            \"Ha {OneOf('recibido','sido recompensad{o} con')} {Humanise(event.reward)}{esde} créditos por\r\n                {OneOf('finalizar {la} {type}','completar {la} {type} satisfactoriamente',\r\n                    'completar satisfactoriamente {la} {type}')}\")\r\n        }\r\n    |else:\r\n\r\n        {OneOf(\"{type} completad{m}\",\"Has completado satisfactoriamente {la} {type}\",\r\n            \"{type} ha sido completado satisfactoriamente\")}\r\n   }\r\n}\r\n{if mission.type != \"Donación\": {F(\"Mission faction state\")}}.\r\n\r\n{if event.rewardCommodity && event.rewardCommodity != \"\":\r\n    {Pause(500)}\r\n    {if event.rewardCommodityAmount = 0:\r\n        {if event.reward > 0:\r\n            {OneOf(\"Sin embargo, \",\"Pero, \")}\r\n        }\r\n        no puede aceptar la recompensa en cargamento, {Occasionally(2,\"dado que\")}\r\n        {if ship.cargocapacity = 0:\r\n            no queda espacio disponible en la nave.\r\n        |else:\r\n            la bahía de carga está {Occasionally(2,\"completamente \")}llena.\r\n        }\r\n    |else:         \r\n        {if event.reward > 0:\r\n            {OneOf(\"Además, \",\"También, \")}\r\n        }\r\n        \r\n        {OneOf(\"{event.rewardCommodityAmount} tonelada{if event.rewardCommodityAmount > 1:s} de {event.rewardCommodity} han sido cargadas a la nave\",\r\n               \"{event.rewardCommodityAmount} tonelada{if event.rewardCommodityAmount > 1:s} de {event.rewardCommodity} han sido añadidas a nuestro cargamento\",\r\n               \"hemos recibido {event.rewardCommodityAmount} tonelada{if event.rewardCommodityAmount > 1:s} de {event.rewardCommodity} como recompensa\",\r\n               \"han cargado a la nave {event.rewardCommodityAmount} tonelada{if event.rewardCommodityAmount > 1:s} de {event.rewardCommodity} como recompensa\",\r\n             )}.\r\n    }\r\n|elif event.rewardMaterial && event.rewardMaterial != \"\":\r\n    {if event.reward > 0:\r\n        {OneOf(\"Además, \",\"También, \")}\r\n    }\r\n {OneOf(\"ha recibido\",\"ha sido recompensado con\")}\r\n    {event.rewardMaterialAmount} unidad{if event.rewardMaterialAmount > 1:es} de {event.rewardMaterial}\r\n    .\r\n}\r\n\r\n{set type to \"Completed\"}\r\n{F(\"Mission Route Update\")}",
      "default": false,
      "name": "Mission completed",
      "description": "Se activa cuando completas una misión"
    },
    "Mission expired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission expired }\r\n{_ Triggered when a mission has expired }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'expired')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(type, \" La misión\")}\r\n\r\n{if type = \"Hackeo\": {set type to \"jaqueo\"}}\r\n\r\n{type} {if mission.faction: para {mission.faction}} ha expirado.\r\n{if mission.commodity:\r\n    {for cargo in inventory:\r\n        {if cargo.name = mission.commodity && cargo.haulage > 0:\r\n            Todo el cargamento de la misión será marcado como robado.\r\n        }\r\n    }\r\n}",
      "default": true,
      "name": "Mission expired",
      "description": "Triggered when a mission has expired"
    },
    "Mission faction state": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if (mission.factionstate) = \"Boom\":\r\n    {OneOf(\"en medio de\",\"en\")} un{OneOf(\"a época próspera\",\" auge económico\")}\r\n|elif (mission.factionstate) = \"Bust\":\r\n    {OneOf(\"en medio de\",\"en\")} un{OneOf(\" descenso económico\",\"a recesión\",\"a inminente quiebra\")}\r\n|elif (mission.factionstate) = \"CivilUnrest\":\r\n    {OneOf(\"en medio de\",\"en\",\"tiempos de\")} {Occasionally(2,\"\")} {OneOf(\"disturbios civiles\",\"conflicto civil\")}\r\n|elif (mission.factionstate) = \"CivilWar\":\r\n    {OneOf(\"en medio de\",\"en\",\"tiempos de\")} {Occasionally(2,\"\")} {OneOf(\"una guerra civil\",\"un periodo de guerras civiles\")}\r\n|elif (mission.factionstate) = \"Democracy\":\r\n    {OneOf(\"en nombre de la\",\"en pro de la\")} democracia\r\n|elif (mission.factionstate) = \"Election\":\r\n\r\n|elif (mission.factionstate) = \"Famine\":\r\n    {OneOf(\"en medio de\",\"en\")} {OneOf(\"una hambruna\",\"problemas de abastecimiento de alimentos\")} \r\n|elif (mission.factionstate) = \"Industrial\":\r\n\r\n|elif (mission.factionstate) = \"Lockdown\":\r\n\r\n|elif (mission.factionstate) = \"Outbreak\"\r\n    , para ayudar en {OneOf(\"una emergencia médica\",\"la cura de un brote epidémico\")}\r\n}\r\n",
      "default": true,
      "name": "Mission faction state",
      "description": "Report the faction state"
    },
    "Mission failed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'fail')}\r\n\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"misión de transporte de\"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(\"misión de \",type)}\r\n\r\n{if type = \"Hackeo\": {set type to \"jaqueo\"}}\r\n\r\n{OneOf(\"{type} {if mission.faction: para {mission.faction}} fallida\", \r\n    \"No hemos podido completar la {type} {if mission.faction: para {mission.faction}}\",\r\n\"La {type} {if mission.faction: para {mission.faction}} ha fallado\")}.\r\n\r\n\r\n\r\n\r\n",
      "default": false,
      "name": "Mission failed",
      "description": "Se activa cuando fallas una misión (TEST)"
    },
    "Mission redirected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission redirected }\r\n{_ Triggered when a mission is redirected }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'redirected')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"misión de transporte de\"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(\"misión de \",type)}\r\n\r\n{if mission.status = \"Completada\" && mission.destinationsystem = mission.originsystem:\r\n    Requerimientos para la {type} completados. Podemos vovler a {mission.originsystem} a cobrarla.\r\n|elif mission.destinations:\r\n    Cadena de {type} redirigida al sistema {P(event.newdestinationsystem)}.\r\n|else:\r\n    {type} redirigida a  \r\n    {if event.newdestinationstation:\r\n       {event.newdestinationstation} en el sistema {P(event.newdestinationsystem)}.\r\n    |else:\r\n       el sistema {P(event.newdestinationsystem)}.\r\n    }\r\n}",
      "default": false,
      "name": "Mission redirected",
      "description": "Se activa cuando una misión es redirigida (TEST)"
    },
    "Mission report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission report }\r\n{_ Report the current mission log }\r\n\r\n\r\n{F(\"Mission check galaxy\")}\r\n\r\n\r\n",
      "default": true,
      "name": "Mission report",
      "description": "Report the current mission log"
    },
    "Mission warning": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission warning }\r\n{_ Triggered when a mission is about to expire, based on a set threshold }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'warning')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(type, \" la missión\")}\r\n\r\nAtención: {type} {if mission.faction: for {mission.faction}} expirará en {event.remaining} minutos.\r\n\r\n",
      "default": true,
      "name": "Mission warning",
      "description": "Triggered when a mission is about to expire, based on a set threshold"
    },
    "Modification crafted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Modification crafted",
      "description": "Se activa cuando creas una modificación a un módulo"
    },
    "Module arrived": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, '{F(\\'Honorific\\')}, ')}\nSu {event.module.name} ha\n\n{OneOf('llegado{if station.name != event.station && event.station: a}', \n       'completado su transferencia {if station.name != event.station && event.station: en}')}\n\n{if station.name != event.station && event.station:\n   {event.station}\n   {if system.name != event.system && event.system:\n      en el sistema {event.system}\n   }\n}.",
      "default": true,
      "name": "Module arrived",
      "description": "Se aplica cuando se completa una transferencia de módulo"
    },
    "Module info": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ This event updates `ship` module information: position, power, & priority _}",
      "default": true,
      "name": "Module info",
      "description": "Triggered when a ModulesInfo.json file is generated/updated"
    },
    "Module purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Adquirido un {event.buymodule.name} de clase {event.buymodule.class}-{event.buymodule.grade}\n\n{if type(event.buymodule.mount) != \"void\":\n    {for index, value in event.buymodule.mount: {set mount to value}}\n    {if mount = 0:\n        fijo\n    |elif mount = 1:\n        guiado\n    |elif mount = 2:\n        torreta\n    } \n} \n, por {event.buyprice} créditos\n\n{if type(event.sellmodule) != \"void\":\n    , y vendido un {event.sellmodule.name} de clase {event.sellmodule.class}-{event.sellmodule.grade},\n\n    {if type(event.sellmodule.mount) != \"vacío\":\n        {for index, value in event.sellmodule.mount: {set mount to value}}\n        {if mount = 0:\n            fijo\n        |elif mount = 1:\n            guiado\n       |elif mount = 2:\n            torreta\n        } \n    } \n    , por {event.sellprice} créditos\n\n|elif type(event.storedmodule) != \"void\":\n    , y almacenado un {event.storedmodule.name} de clase {event.storedmodule.class}-{event.storedmodule.grade},\n\n    {if type(event.storedmodule.mount) != \"void\":\n        {for index, value in event.storedmodule.mount: {set mount to value}}\n        {if mount = 0:\n            fijo\n        |elif mount = 1:\n            guiado\n       |elif mount = 2:\n            torreta\n        }\n    }\n}",
      "default": true,
      "name": "Module purchased",
      "description": "Se activa cuando compras un módulo"
    },
    "Module retrieved": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Recuperado {event.module.name} de clase {event.module.class}{event.module.grade} \n\n{if type(event.module.mount) != \"void\":\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        fijo \n    |elif mount = 1:\n        guiado \n    |elif mount = 2:\n        torreta \n    } \n} \n\n del almacén,\n\n{if type(event.swapoutmodule) != \"void\":\n    y almacenado un {event.swapoutmodule.name} de clase {event.swapoutmodule.class}-{event.swapoutmodule.grade}\n\n    {if type(event.swapoutmodule.mount) != \"vacío\":\n        {for index, value in event.swapoutmodule.mount: {set mount to value}}\n        {if mount = 0:\n            fijo\n        |elif mount = 1:\n            guiado\n       |elif mount = 2:\n            torreta\n        }\n    }\n    \n},\n\n{if type(event.cost) != \"void\": por un coste de {event.cost} créditos}",
      "default": true,
      "name": "Module retrieved",
      "description": "Se activa cuando busca un módulo previamente almacenado"
    },
    "Module sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Ha vendido su {event.module.name} de clase {event.module.class}-{event.module.grade}\n\n{if type(event.module.mount) != \"void\":\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        fijo\n    |elif mount = 1:\n        guiado\n    |elif mount = 2:\n        torreta\n    } \n},\n\n por {event.price} créditos.",
      "default": true,
      "name": "Module sold",
      "description": "Se activa cuando vende un módulo instalado en la nave"
    },
    "Module sold from storage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Ha vendido su {event.module.name} de clase {event.module.class}-{event.module.grade}\n\n{if type(event.module.mount) != \"vacío\":\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        fijo\n    |elif mount = 1:\n        guiado\n    |elif mount = 2:\n        torreta\n    } \n} \n\ndesde su almacén, por {event.price}{if event.price > 999999: de} créditos.",
      "default": true,
      "name": "Module sold from storage",
      "description": "Se activa cuando vende un módulo almacenado"
    },
    "Module stored": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Almacenado {event.module.name} de clase {event.module.class}-{event.module.grade}\n\n{if type(event.module.mount) != \"void\":\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        fijo \n    |elif mount = 1:\n        guiado \n    |elif mount = 2:\n        torreta \n    } \n} \n \n\n\n{if type(event.cost) = \"void\": . |else: por un coste de {event.cost} créditos.}",
      "default": true,
      "name": "Module stored",
      "description": "Se activa cuando almacena un módulo"
    },
    "Module swapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Ha intercambiado las posiciones de su {event.frommodule.name} de clase {event.frommodule.class}-{event.frommodule.grade}\n\n{if type(event.frommodule.mount) != \"void\":\n    {for index, value in event.frommodule.mount: {set mount to value}}\n    {if mount = 0:\n        de montura fija\n    |elif mount = 1:\n        de montura guiada\n    |elif mount = 2:\n        de torreta\n    }\n},\n\n por \n\n{if event.tomodule:\n    un {event.tomodule.name} de clase {event.tomodule.class}-{event.tomodule.grade},\n    {if type(event.tomodule.mount) != \"void\":\n        {for index, value in event.tomodule.mount: {set mount to value}}\n        {if mount = 0:\n            de montura fija\n        |elif mount = 1:\n            de montura guiada\n        |elif mount = 2:\n            de torreta\n        }\n    }\n    .\n|else: \n    en un anclaje vacío.\n}",
      "default": true,
      "name": "Module swapped",
      "description": "Se activa cuando se intercambian módulos entre ubicaciones de la nave"
    },
    "Module transfer": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Transfiriendo {event.module.name} de clase {event.module.class}-{event.module.grade}\n\n{if event.module.mount:\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        de montura fija\n    |elif mount = 1:\n        de montura guiada\n    |elif mount = 2:\n        de torreta\n    }\n},\n\n\n{if event.transfercost: por un importe de {event.transfercost} créditos.}\n\n{set t_remaining to event.transfertime}\n\n{if t_remaining:\n\n   {Pause(1000)}\n   Llegada prevista, en \n\n   {if t_remaining > (60*60*24):\n      {set t_days to floor(t_remaining/(60*60*24))}\n      {t_days} días,\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\n   }\n\n   {if t_remaining > 3600:\n      {set t_hours to floor(t_remaining/3600)}\n      {t_hours} horas,\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\n   }\n\n   {if t_remaining > 60:\n      {if t_days || t_hours: y }\n      {set t_minutes to round(t_remaining/(60),0)}\n      {t_minutes} minutos.\n   }\n}",
      "default": true,
      "name": "Module transfer",
      "description": "Se activa cuando se transfiere un módulo almacenado a otra estación espacial"
    },
    "Modules stored": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Ha almacenado los siguientes módulos:\n\n{for module in event.modules:\n\n    {module.name} de clase {module.class}-{module.grade},\n\n    {if type(module.mount) != \"void\":\n        {for index, value in module.mount: {set mount to value}}\n        {if mount = 0:\n            de montura fija\n        |elif mount = 1:\n            de montura guiada\n        |elif mount = 2:\n            de torreta\n        }\n    }\n    \n    {Pause(400)}\n}",
      "default": true,
      "name": "Modules stored",
      "description": "Se activa cuando se almacenan múltiples módulos"
    },
    "Music": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Music",
      "description": "Se activa cuando la música ambiental cambia"
    },
    "Nav beacon scan": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context _}\n{SetState('eddi_context_last_subject', 'nav beacon')}\n{SetState('eddi_context_last_action', 'scan')}\n{SetState('eddi_context_star_system', system.name)}\n{SetState('eddi_context_nav_scans', event.numbodies)}\n\n{set nav to OneOf(\"navegación\")}\n{set beacon to OneOf(\"baliza de\")}\n{OneOf(\"Esta {beacon} {nav} ha enviado detalles de {event.numbodies} cuerpos estelares en este sistema\",\n \"Detalles recibidos sobre {event.numbodies} cuerpos estelares en este sistema.\")}\n\n{Pause(500)}",
      "default": true,
      "name": "Nav beacon scan",
      "description": "Se activa cuando se escanea una baliza de navegación, antes de que los datos de escaneo de todos los cuerpos celestes del sistema se escriban en el diario"
    },
    "Near surface": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Near surface",
      "description": "Se activa cuando se entra o se sale de la órbita de la superficie de un planeta"
    },
    "Next jump": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Next jump",
      "description": "Triggered when selecting a star system to jump to"
    },
    "NPC attack commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Atención: ataque\n{if event.by:\n   por un {event.by} \n}\ndetectado.",
      "default": true,
      "name": "NPC attack commenced",
      "description": "Se activa cuando se detecta un ataque de un NPC sobre su nave"
    },
    "NPC cargo scan commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ See if we are carrying non-limpet cargo}\n{set carryingvaluablecargo to 0}\n{for cargo in ship.cargo:\n    {if cargo.commodity != 'Limpet':\n        {set carryingvaluablecargo to 1}\n    }\n}\n\n{if carryingvaluablecargo = 1:\n  Precaución: escaneo de carga\n  {if event.by:\n    por un {event.by} \n  }\n  detectado.\n}",
      "default": true,
      "name": "NPC cargo scan commenced",
      "description": "Se activa cuando se detecta un escaneo de la carga de su nave por un NPC"
    },
    "NPC interdiction commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Peligro: detectado un intento de interdicción \n{if event.by:\n   por un {event.by} \n}.\n\n{Occasionally(3, \"Apague motores y sométase, o prepárese para evadir la interdicción.\")}",
      "default": true,
      "name": "NPC interdiction commenced",
      "description": "Se activa cuando se detecta un intento de interdicción de su nave por un NPC"
    },
    "Passengers": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ Passengers }\r\n{_ Triggered at session start from Passengers event }",
      "default": true,
      "name": "Passengers",
      "description": "Triggered at session start from Passengers event"
    },
    "Power commodity delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} units of {event.commodity} delivered {Occasionally(2, \"for {P(event.power)}\")}.",
      "default": true,
      "name": "Power commodity delivered",
      "description": "Se activa cuando un Comandante entrega una mercancía a una potencia"
    },
    "Power commodity fast tracked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Humanise(event.amount)} créditos gastados en un rápido rastreo de mercancías {Occasionally(2, \"para {P(event.power)}\")}.",
      "default": true,
      "name": "Power commodity fast tracked",
      "description": "Se activa cuando un Comandante rastrea rápidamente una mercancía de una potencia"
    },
    "Power commodity obtained": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Obtenidas {event.amount} unidades de {event.commodity} {Occasionally(2, \"para {P(event.power)}\")}.",
      "default": true,
      "name": "Power commodity obtained",
      "description": "Se activa cuando un Comandante obtiene una mercancía de una potencia"
    },
    "Power defected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Ha desertado de {P(event.frompower)} para unirse a {P(event.topower)}.",
      "default": true,
      "name": "Power defected",
      "description": "Se activa cuando deserta de una potencia para unirse a otra"
    },
    "Power expansion vote cast": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Voto\n{OneOf(\"emitido\", \"registrado\")}",
      "default": true,
      "name": "Power expansion vote cast",
      "description": "Se activa cuando un Comandante vota a favor de la expansión de un sistema"
    },
    "Power joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Se ha alineado con {P(event.power)}",
      "default": true,
      "name": "Power joined",
      "description": "Se activa cuando se une a una potencia"
    },
    "Power left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Ya no se encuentra alineado con {P(event.power)}",
      "default": true,
      "name": "Power left",
      "description": "Se activa cuando abandona una potencia"
    },
    "Power preparation vote cast": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Voto\n{OneOf(\"emitido\", \"registrado\")}",
      "default": true,
      "name": "Power preparation vote cast",
      "description": "Se activa cuando un Comandante vota por la preparación de un sistema"
    },
    "Power salary claimed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.amount > 1300000: {set esde to \"es de\"}}\r\n{if event.amount <= 1300000: {set esde to \" de\"}}\r\n{if event.amount < 1000000: {set esde to \"\"}}\r\n\r\n\r\nReclamado salario por importe de \r\n\r\n{if event.amount = 1000: mil créditos\r\n|else:\r\n{Humanise(event.amount)}{esde} créditos\r\n}\r\n\r\n{Occasionally(2, \"de {P(event.power)}\")}.",
      "default": false,
      "name": "Power salary claimed",
      "description": "Se activa cuando un Comandante reclama su salario de una potencia"
    },
    "Power voucher received": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Power voucher received",
      "description": "Se activa cuando se entrega un bono de combate en contra de una potencia opositora"
    },
    "Repair drone": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set systemsrepaired to []}\n\n{if event.hull:\n   {set systemsrepaired to cat(systemsrepaired, [\"el casco\"])} \n}\n{if event.cockpit:\n   {set systemsrepaired to cat(systemsrepaired, [\"la cabina\"])} \n}\n{if event.corrosion:\n   {set systemsrepaired to cat(systemsrepaired, [OneOf(\"sistemas corroidos\", \"sistemas afectados por corrosión\")])} \n}\n\n{if len(systemsrepaired) > 0:\n\n    {set remote to Occasionally(2, \"remotas\")}\n    {set sequence to OneOf(\"el drón ha\", \"Se han\")} \n    {OneOf(\n        \"{sequence} completado las reparaciones {remote} de\", \n        \"secuencia remota completa. {sequence} hecho las reparaciones en\",\n        \"ciclo completado. {sequence} finalizado las reparaciones {remote} en\"\n    )}\n\n    {set cur to 0}\n    {while cur < len(systemsrepaired):\n        {if cur = 0:\n        |elif cur < len(systemsrepaired) - 1:\n            , \n        |else:\n            and\n        }\n        {systemsrepaired[cur]}\n        {set cur to cur + 1}\n    }\n}.\n",
      "default": true,
      "name": "Repair drone",
      "description": "Se activa cuando su nave es reparada por medio de un controlador de drones"
    },
    "Repeat last speech": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{state.eddi_context_last_speech}",
      "default": true,
      "name": "Repeat last speech",
      "description": "Repite lo último que se ha dicho"
    },
    "Report last scan value": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences }\r\n{set minScanValue to 100000} {_ Set the minimum credit value that should be voiced _}\r\n\r\n{_ Context }\r\n{set scanValue to state.eddi_context_last_scan_estimated_value}\r\n\r\n{if scanValue > minScanValue:\r\n   {OneOf(\"Este escaneo puede\",\"Este paquete de datos puede\",\"Estos datos pueden\",\"Esto puede\")} \r\n   {OneOf(\"dar \",\"ser vendido por\",\"dar un beneficio de\",\"valer unos\") } \r\n   {Humanise(scanValue)} créditos.\r\n}\r\n",
      "default": true,
      "name": "Report last scan value",
      "description": "Informa sobre el valor estimado del último cuerpo celeste escaneado"
    },
    "Route details": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Route details }\r\n{_ Triggered when a route has been generated or updated }\r\n\r\n\r\n{if event.routetype = \"expiring\":\r\n     {if event.distance > 0:\r\n         {set mission to MissionDetails(event.missionids[0])}\r\n\r\n         {if find(mission.typeEDName, \"Passenger\") > -1:\r\n             {set type to \"Transport \"}\r\n             {set type to cat(type, mission.passengertype)}\r\n         |else:\r\n             {set type to mission.type}\r\n         }\r\n         {set type to cat(type, \" mission\")}\r\n\r\n         {type} {if mission.faction: for {mission.faction}}\r\n         {if mission.destinationsystem: in the\r\n             {if mission.destinationsystem = system.name:\r\n                 current\r\n             |else:\r\n                 {mission.destinationsystem}\r\n             } system\r\n         } is expiring next.\r\n     |else:\r\n         No active missions found.\r\n     }\r\n|elif event.routetype = \"facilitator\":\r\n    {if event.distance > 0:\r\n        The nearest interstellar factors contact is at\r\n        {destinationstation.name} station, in the\r\n        {if event.system = system.name:\r\n            current system\r\n        |else:\r\n            {event.system} system, {round(event.distance, 1)} lightyears away\r\n        }.\r\n     |else:\r\n         Interstellar factors contact not found within sensor range.\r\n     }\r\n|elif event.routetype = \"farthest\":\r\n     {if event.distance > 0:\r\n         Your {if missionsCount = 1: only |else: farthest}\r\n         mission target is in the\r\n         {if event.system = system.name:\r\n             current system\r\n         |else:\r\n             {event.system} system, {round(event.distance, 1)} lightyears away\r\n         }.\r\n     |else:\r\n         Mission not found with a designated target system.\r\n     }\r\n|elif event.routetype = \"most\":\r\n     {if missionsCount = 1:\r\n         Your only mission target is {Occasionally(2,\"located\")} in\r\n         {if missions[0].destinationsystem = \"\":\r\n             an unknown\r\n         |elif missions[0].destinationsystem = system.name:\r\n             the current\r\n         |else:\r\n             the {missions[0].destinationsystem}\r\n         }\r\n         {Occasionally(2,\"star\")} system.\r\n     |else:\r\n         {set systems to split(event.systems, \"_\")}\r\n         {set system_most to event.system}\r\n         {set systems_count to len(systems)}\r\n\r\n         {if systems_count = 1:\r\n             {if system_most = system.name:\r\n                 {set system_most to \"The current system\"}\r\n             |else:\r\n                 {set system_most to cat(\"The \", system_most, \" system\")}\r\n             }\r\n             {OneOf(\"Most of your missions are {Occasionally(2,'located')} in {system_most}\",\r\n                 \"{system_most} has {OneOf('the most','most of your')} missions\",\r\n                 \"{system_most} has the most missions for you to complete\")}.\r\n         |elif systems_count > 1:\r\n             You have {event.count} mission target{if event.count > 1:s} each, in the\r\n\r\n             {set cur to 0}\r\n             {while cur < len(equal):\r\n                 {systems[cur]}\r\n                 {set cur to cur + 1}\r\n                 {if cur = systems_count-1: and |elif cur < systems_count: ,}\r\n             } systems.\r\n         }\r\n     }\r\n|elif event.routetype = \"nearest\":\r\n     {if event.distance > 0:\r\n         Your {if missionsCount = 1: only |else: nearest}\r\n         mission target is in the\r\n         {if event.system = system.name:\r\n             current system\r\n         |else:\r\n             {event.system} system, {round(event.distance, 1)} lightyears away\r\n         }.\r\n     |else:\r\n         Mission not found with a designated target system.\r\n     }\r\n|elif event.routetype = \"route\":\r\n     {if event.routedistance > 0:\r\n         Missions route calculated for {event.count} systems.\r\n         Total route distance is {round(event.routedistance, 1)} lightyears.\r\n         First mission destination is {event.system}, {round(event.distance, 1)} lightyears away.\r\n     |else:\r\n         Unable to calculate missions route.\r\n     }\r\n|elif event.routetype = \"source\":\r\n     {if event.count > 0:\r\n         {set systems to split(event.route, \"_\")}\r\n\r\n         {set pos to 0}\r\n         {while pos < event.count:\r\n\r\n             {set source_cargo to []}\r\n             {for missionid in event.missionids:\r\n                 {set haulage to HaulageDetails(missionid)}\r\n                 {if haulage.sourcesystem = systems[pos]:\r\n                     {set cargo to CargoDetails(missionid)}\r\n                     {if find(source_cargo, cargo.name) = -1:\r\n                         {set source_cargo to cat(source_cargo, [cargo.name])}\r\n                     }\r\n                 }\r\n             }\r\n\r\n             {if pos = 0:\r\n                 Your {if event.count = 1: only |else: nearest}\r\n             |elif pos = 1:\r\n                 Additionally, your\r\n             |elif pos = event.count - 1:\r\n                 Lastly, your\r\n             |else:\r\n                 Your\r\n             }\r\n\r\n             mission cargo source for\r\n             {set cur to 0}\r\n             {while cur < len(source_cargo):\r\n                 {source_cargo[cur]}\r\n                 {set cur to cur + 1}\r\n                 {if cur = len(source_cargo) - 1: and |elif cur < len(source_cargo): ,}\r\n             }\r\n\r\n             is in the\r\n             {if systems[pos] = system.name:\r\n                 current system\r\n             |else:\r\n                 {systems[pos]} system,\r\n                 {set distance to Distance(system.name, systems[pos])}\r\n                 {round(distance, 1)} light years away\r\n             }.\r\n             {set pos to pos + 1}\r\n         }\r\n         {SetState('eddi_context_cargo_source', event.route)}\r\n     |else:\r\n         Cargo source not found with a designated target system.\r\n     }\r\n|elif event.routetype = \"update\":\r\n     {if event.system && event.system != \"\":\r\n         Next mission destination is {event.system}, {round(event.distance, 1)} lightyears away.\r\n     }\r\n}\r\n\r\n",
      "default": true,
      "name": "Route details",
      "description": "Triggered when a route has been generated or updated"
    },
    "Screenshot": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Screenshot",
      "description": "Se activa cuando se toma una captura de pantalla"
    },
    "Search and rescue": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"recuperado\", \"salvado\")}{if event.amount > 1:s}\n{event.amount}\n{if event.commodity.rare: raro}\n\n{if event.commodity.name = \"Cajas negras\":\n   {if event.amount > 1:\n      {OneOf(\" registros de vuelo\", \" cajas negras\")}\n   |else: \n      {OneOf(\" registro de vuelo\", \"a caja negra\")}\n   }\n\n|elif event.commodity.name = \"Cápsula de escape dañada\":\n   {if event.amount > 1:\n   {OneOf(\" cápsulas criogénicas dañadas\", \" cápsulas de escápe dañadas\")}\n   |else:\n   {OneOf(\"a cápsula criogénica dañada\", \"a cápsula de escápe dañada\")}\n   }\n\n|elif event.commodity.name = \"Cápsula de escape ocupada\":\n   {if event.amount > 1:\n   {OneOf(\" cápsulas criogénicas ocupadas\", \" cápsulas de escápe ocupadas\")}\n   |else:\n   {OneOf(\"a cápsula criogénica ocupada\", \"a cápsula de escápe ocupada\")}\n   }\n\n|elif event.commodity.name = \"Efectos personales\":\n   {OneOf(\"conjunto\", \"bulto\")}{if event.amount > 1:s} de\n   {OneOf(\"objetos personales\", \"recuerdos personales\")}\n\n|elif event.commodity.name = \"Restos de accidentes\":\n   {set wreckage to OneOf(\"escombros\", \"restos\", \"resíduos\", basura espacial)}\n   {set fragment to tonelada}\n   {OneOf(\"{fragment}{if event.amount > 1:s} de {wreckage}\", \n          \"{fragment}{if event.amount > 1:s} de {wreckage} provenientes de accidentes\")}\n\n|elif event.commodity.name = \"Rehenes\":\n   {OneOf(\"rehen\")}{if event.amount > 1:es}\n\n|else:\n   tonelada{if event.amount > 1:s} de {event.commodity.name},\n}\n\npor {(event.reward)} créditos\n",
      "default": true,
      "name": "Search and rescue",
      "description": "Se activa cuando se entregan elementos a un contacto de Búsqueda y Rescate"
    },
    "Security presence report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if system.population > 0:\n    {OneOf ('los sensores detectan','detecto')} \n\n    {if system.security = \"None\":\n        OneOf(\"una falta total\",\"una ausencia total\", \"la inexistencia\")\n    |elif system.security = \"Low\":\n        {OneOf(\"una mínima presencia\", \"una baja presencia\", \"muy poca presencia\",\"escasa presencia\")}\n    |elif system.security = \"Medium\":\n        {OneOf(\"un nivel medio\", \"alguna presencia\", \"cierta presencia\")}\n    |elif system.security = \"High\":\n        {OneOf(\"una alta presencia\", \"una fuerte presencia\", \"una abundante presencia\")}\n    |else:\n        {system.security}\n    } \n    {OneOf(\"de fuerzas policiales\", \"de seguridad\", \"de agentes de la ley\",\"de agentes de seguridad\")} {OneOf(\"por aquí\", \"en este sistema\", \"en esta zona\")}.\n}",
      "default": true,
      "name": "Security presence report",
      "description": "Función para informar sobre los detalles del nivel de seguridad del sistema"
    },
    "Self destruct": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Secuencia de autodestrucción iniciada. \r\nCerrando orificios de ventilación.\r\nPreparando cápsula de escápe.\r\nEnviando señal de socorro.\r\n{Pause(2000)}\r\nBuenasuerte. Comandante.",
      "default": true,
      "name": "Self destruct",
      "description": "Se activa cuando comienza la secuencia de auto destrucción"
    },
    "Settlement approached": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Settlement approached }\r\n{_ Triggered when you approach a settlement }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'settlement')}\r\n{SetState('eddi_context_last_action', 'approach')}\r\n{SetState('eddi_context_last_settlement', event.name)}\r\n{SetState('eddi_context_approach_time', SecondsSince(0))}\r\n",
      "default": true,
      "name": "Settlement approached",
      "description": "Se activa cuando se aproxima a un asentamiento (TEST)"
    },
    "Shields down": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Shields down",
      "description": "Se activa cuando los escudos de la nave se desconectan"
    },
    "Shields up": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Shields up",
      "description": "Se activa cuando los escudos de la nave se activan"
    },
    "Ship arrived": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, '{F(\\'Honorific\\')}, ')}\nSu {event.ship} ha \n\n{OneOf('llegado a {if station.name != event.station && event.station:}', \n       'completado su transferencia a {if station.name != event.station && event.station:}')}\n\n{if station.name != event.station && event.station:\n   {event.station}\n   {if system.name != event.system && event.system:\n      en el sistema  {event.system}\n   }\n}.",
      "default": true,
      "name": "Ship arrived",
      "description": "Se activa cuando se completa la transferencia de una nave a otro sistema"
    },
    "Ship delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipCallsign()} entrega completada.",
      "default": true,
      "name": "Ship delivered",
      "description": "Se activa cuando se le hace entrega de una nave recién comprada"
    },
    "Ship fsd": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship fsd",
      "description": "Se activa cuando hay un cambio en el estado del FSD de su nave"
    },
    "Ship interdicted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship interdicted",
      "description": "Se activa cuando su nave es interdictada por otra"
    },
    "Ship interdiction": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship interdiction",
      "description": "Se activa cuando interdicta a otra nave"
    },
    "Ship loadout": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship loadout",
      "description": "Se activa cuando obtienes carga a tu nave"
    },
    "Ship purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{P(event.ship)} adquirida.",
      "default": true,
      "name": "Ship purchased",
      "description": "Se activa cuando compra una nave"
    },
    "Ship rebooted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship rebooted",
      "description": "Se activa cuando efectúa un reinicio o una reparación en su nave"
    },
    "Ship refuelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.source = \"Scoop\":\r\n   {SetState('eddi_context_fuel_remaining', event.total)}\r\n|elif event.full:\r\n   {SetState('eddi_context_fuel_remaining', ship.fueltanktotalcapacity)}\r\n|else:\r\n   {SetState('eddi_context_fuel_remaining', state.eddi_context_fuel_remaining + event.amount)}\r\n}\r\n\r\n{Pause(2000)}\r\n{if event.full:\r\n   {set refueled_desc to OneOf(\"totalmente repostado\", \"al máximo de su capacidad\",\"al 100%\")}\r\n   {OneOf(\"Repostado\", \"Combustible al máximo\", \"combustible de {ShipName()} {refueled_desc}\" )}\r\n|else:\r\n   {if event.amount <= 5.0000:\r\n      {F('Fuel check')}\r\n   }\r\n}",
      "default": false,
      "name": "Ship refuelled",
      "description": "Se activa cuando se reposta combustible en su nave (TEST)"
    },
    "Ship renamed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "El nombre {ShipName()} ha sido registrado con {P(system.faction)}. \r\n\r\n{set ICAO_ID to ICAO(event.ident)}\r\n{if len(ICAO_ID) > 0:\r\n    La identificación es: {ICAO_ID}.\r\n|else:\r\n    Aviso: Ha registrado ua ID de nave que no es pronunciable en el alfabeto de radio estándar.\r\n}\r\n",
      "default": true,
      "name": "Ship renamed",
      "description": "Se activa cuando se cambia el nombre de una nave"
    },
    "Ship repaired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName()} reparada.",
      "default": true,
      "name": "Ship repaired",
      "description": "Se activa cuando se repara su nave"
    },
    "Ship repurchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship repurchased",
      "description": "Se activa cuando se recompra su nave"
    },
    "Ship restocked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName()} {OneOf(\"reaprovisionada\",\"rearmada\")}.",
      "default": true,
      "name": "Ship restocked",
      "description": "Se activa cuando se recarga la munición de su nave"
    },
    "Ship shutdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship shutdown",
      "description": "Se activa cuando se desconectan los sistemas de su nave"
    },
    "Ship sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Retirada {ShipName(event.shipid, event.ship)} del servicio activo\",\n             \"{ShipName(event.shipid, event.ship)} Dada de baja\",\n             \"{ShipName(event.shipid, event.ship)} vendida\",)}\n\n{if event.system != system.name:\n   en el sistema {event.system}\n}",
      "default": true,
      "name": "Ship sold",
      "description": "Se activa cuando se vende una nave"
    },
    "Ship sold on rebuy": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.ship}, con identificación {event.shipid}, vendida en {event.system} por {event.price} créditos",
      "default": true,
      "name": "Ship sold on rebuy",
      "description": "Se activa cuando se vende una nave para obtener fondos para el seguro o recompra de la nave"
    },
    "Ship swapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.storedship:\n    {OneOf(\"Almacenando\", \"Aparcando\", \"Almacenando\")} {ShipName(event.storedshipid, event.storedship)} \n|elif event.soldship:\n    Vendiendo {ShipName(event.soldshipid, event.soldship)} \n} \n{OneOf(\"e intercambiando\",\"y moviendo\",\"y transfiriendo\")} a {ShipName(event.shipid, event.ship)}.\n\n{F(\"Limpet check\")}\n{_ F(\"List launchbays\")}\n\n{set fighterhangar to false}\n{for compartment in ship.compartments:\n    {if find(compartment.module.name, \"Fighter Hangar\") != -1:\n        {set fighterhangar to true}\n    } \n} \n{if fighterhangar = true:\n    Recuerde: debe asignar un miembro del equipo al servicio activo\n} \n",
      "default": true,
      "name": "Ship swapped",
      "description": "Se activa cuando se cambia de nave"
    },
    "Ship targeted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Ship targeted }\r\n{_ Triggered when the player selects a target }\r\n\r\n{_ event Parameters:   targetlocked - bool (ie false when losing target) }\r\n{_ If target locked:   name (of ship), scanstage (ie 0, 1, 2, 3) }\r\n{_ If Scan stage >= 1: name (of pilot), rank (of pilot) }\r\n{_ If scan stage >= 2: shieldhealth, hullhealth (both 0-100) }\r\n{_ If scan stage >= 3: faction, legalstatus (ie clean, wanted, etc), bounty (if appicable), }\r\n{_                     subsystem (ie FSD, power plant, etc), subsystemhealth (0-100) }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'ship')}\r\n{SetState('eddi_context_last_action', 'targeted')}\r\n\r\n{if event.targetlocked && event.scanstage > 2:\r\n    {set legalstatus to event.legalstatus}\r\n    {if legalstatus = \"Wanted\" || legalstatus = \"Wanted Enemy\" || legalstatus = \"Warrant\":\r\n        {event.name} {OneOf(\"has a bounty\", \"is fair game\", \"is a legitimate target\")}.\r\n    }\r\n}\r\n\r\n",
      "default": true,
      "name": "Ship targeted",
      "description": "Triggered when the player selects a target"
    },
    "Ship transfer initiated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName(event.shipid, event.ship)} {OneOf(\"en camino\",\"está siendo transferida\", \"transferencia iniciada\", \"está siendo transportada\", \"está siendo transferida\")} desde {P(event.system)}.\n\n{if event.transfercost: por un coste de {event.price} créditos.}\n\n{set t_remaining to event.time}\n\n{if t_remaining:\n\n   {Pause(1000)}\n   Llegada prevista, en \n\n   {if t_remaining > (60*60*24):\n      {set t_days to floor(t_remaining/(60*60*24))}\n      {t_days} días,\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\n   }\n\n   {if t_remaining > 3600:\n      {set t_hours to floor(t_remaining/3600)}\n      {t_hours} horas,\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\n   }\n\n   {if t_remaining > 60:\n      {if t_days || t_hours: and}\n      {set t_minutes to round(t_remaining/(60),0)}\n      {t_minutes} minutos.\n   }\n}",
      "default": true,
      "name": "Ship transfer initiated",
      "description": "Se activa cuando se inicia la transferencia de una nave a otro sistema"
    },
    "Shutdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Shutdown",
      "description": "Se activa cuando se hace un cierre limpio del juego"
    },
    "Signal detected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Edit the true/false values of `spokenSources` to identify signal types that should be announced whenever they are first detected within a system (otherwise, only signal sources detected while in fss or saa mode will be taken into account. _}\r\n\r\n{set spokenSources to [\r\n    \"Anomaly\": true,\r\n    \"AX Conflict Zone\": true,\r\n    \"Capitol Ship\": false,\r\n    \"Ceremonial Comms\": false,\r\n    \"Combat Aftermath\": false,\r\n    \"Compromised Nav Beacon\": false,\r\n    \"Convoy Dispersal Pattern Detected\": false,\r\n    \"Degraded Emissions\": false,\r\n    \"Distress Call\": true,\r\n    \"Encoded Emissions\": false,\r\n    \"Hazardous Resource Extraction Site\": false,\r\n    \"High Grade Emissions\": false,\r\n    \"High Intensity Combat Zone\": false,\r\n    \"High Intensity Resource Extraction Site\": false,\r\n    \"Listening Post\": true,\r\n    \"Low Intensity Combat Zone\": false,\r\n    \"Low Intensity Resource Extraction Site\": false,\r\n    \"Medium Intensity Combat Zone\": false,\r\n    \"Mission Target\": true,\r\n    \"Nav Beacon\": false,\r\n    \"Non-Human Signal Source\": false,\r\n    \"Notable Stellar Phenomena\": true,\r\n    \"Resource Extraction Site\": false,\r\n    \"Trading Beacon\": false,\r\n    \"Unidentified Signal Source\": false,\r\n    \"Unregistered Comms Beacon\": true,\r\n    \"Weapons Fire\": false,\r\n]}\r\n\r\n{if status.guifocus = \"fss mode\" || status.gui_focus = \"saa mode\" || \r\n(spokenSources[event.source] = true && find(system.signalsources, event.source) = -1):\r\n    {if event.source && !event.stationsignal:\r\n        {if event.threatlevel > 0:\r\n            Class {event.threatlevel} \r\n        }\r\n        {event.source} \r\n        {if event.faction != \"None\":\r\n            for {event.faction}\r\n        }\r\n        detected.\r\n    }\r\n}",
      "default": true,
      "name": "Signal detected",
      "description": "Triggered when a signal source is detected"
    },
    "Silent running": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Silent running",
      "description": "Triggered when you activate or deactivate silent running"
    },
    "Squadron rank": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Squadron rank }\r\n{_ Triggered when your rank with a squadron has changed }\r\n\r\n\r\nYou have been\r\n{if event.newrank > event.oldrank:\r\n    promoted \r\n|else:\r\n    demoted\r\n}\r\nto {cmdr.squadronrank.name} in the {event.name} squadron.\r\n",
      "default": true,
      "name": "Squadron rank",
      "description": "Triggered when your rank with a squadron has changed"
    },
    "Squadron status": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Squadron status }\r\n{_ Triggered when your status with a squadron changes }\r\n\r\n\r\n{if event.status = \"applied\":\r\n    You have applied for admission into the {event.name} squadron.\r\n|elif event.status = \"created\":\r\n    You have created the {event.name} squadron.\r\n|elif event.status = \"disbanded\":\r\n    The {event.name} squadron has been disbanded.\r\n|elif event.status = \"invited\":\r\n    You have been invited into the {event.name} squadron.\r\n|elif event.status = \"joined\":\r\n    You have joined the {event.name} squadron.\r\n|elif event.status = \"kicked\":\r\n    You have been kicked from the {event.name} squadron.\r\n|elif event.status = \"left\":\r\n    You have left the {event.name} squadron.\r\n}\r\n",
      "default": true,
      "name": "Squadron status",
      "description": "Triggered when your status with a squadron has changed"
    },
    "SRV docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Bugui\", \"uve erre ese\")} {OneOf(\"embarcado\",\"recogido\")}",
      "default": true,
      "name": "SRV docked",
      "description": "Se activa cuando embarca un VRS en su nave"
    },
    "SRV launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Bugui\", \"uve erre ese\")} {OneOf(\"lanzado\", \"fuera\",\"desplegado\")}{Occasionally (2,OneOf(\"-comandante\",\"-señor\"))}.",
      "default": true,
      "name": "SRV launched",
      "description": "Se activa cuando se desembarca un VRS desde su nave"
    },
    "SRV turret": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "SRV turret",
      "description": "Se activa cuando despliega o repliega la torreta de armas de su VRS"
    },
    "SRV turret deployable": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if !event.deployable:\n   {OneOf(\"Bugui\", \"VRS\")} esperando para embarque.\n}",
      "default": true,
      "name": "SRV turret deployable",
      "description": "Se activa cuando su VRS entra o sale de la zona de seguridad de alrededor de su nave"
    },
    "Star habitable zone": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{if event: {set reportbody to event} }\r\n{if !event: {set reportbody to BodyDetails(state.eddi_context_star_star, state.eddi_context_star_system)}}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    I'm not sure which star you are asking about.\r\n|else:\r\n    {if (reportbody.estimatedhabzoneinner && reportbody.estimatedhabzoneouter) && \r\n     (reportbody.estimatedhabzoneinner > 0 && reportbody.estimatedhabzoneouter> 0):\r\n       Habitable zone\r\n       {Occasionally(2, OneOf(\"calculated at\", \"calculated to fall from\"))}: \r\n       {Humanise(reportbody.estimatedhabzoneinner)} \r\n       to {Humanise(reportbody.estimatedhabzoneouter)} \r\n       lightseconds.\r\n    |elif reportbody.estimatedhabzoneouter && reportbody.estimatedhabzoneouter > 0:\r\n       Habitable zone\r\n       {Occasionally(2, OneOf(\"calculated at\", \"calculated to fall from\"))}: \r\n       {Humanise(reportbody.estimatedhabzoneouter)} \r\n       lightseconds maximum.\r\n    }\r\n}",
      "default": true,
      "name": "Star habitable zone",
      "description": "Report on the habitable zone around a star"
    },
    "Star report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{set reportAge to 0}              {_ Set to 1 if you want to hear about the age of the star. _}\r\n{set reportChromaticity to 0}     {_ Set to 1 if you want to hear about the colour of the star. _}\r\n{set reportNotables to 1}         {_ Set to 0 if you don't want to hear about noteworthy main sequence star features. _}\r\n{set reportScanValue to 0}        {_ Set to 1 if you want scan value reported _}\r\n{set reportHabZone to 0}          {_ Set to 1 if you want habitable zone details for the primary star_}\r\n{set mainSequenceFrequency to 2}  {_ Set to determine the frequency (1 chance in n) for describing stars as \"main sequence\" _}\r\n\r\n{_ Fetch from context }\r\n{if event: {set reportbody to event} }\r\n{if !event: {set reportbody to BodyDetails(state.eddi_context_star_star, state.eddi_context_star_system)}}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n\r\n    No consigo saber a que estrella se refiere.\r\n\r\n|else:\r\n\r\n    {set mainsequence to [\"O\", \"B\", \"A\", \"F\", \"G\", \"K\", \"M\"]}\r\n    {for starclass in mainsequence:\r\n        {if reportbody.stellarclass = starclass:\r\n            {set mainsequence to 1}\r\n        }\r\n    }    \r\n\r\n    {if mainsequence = 1 && reportNotables = 1:\r\n\r\n        {set notables to []}\r\n        {if reportbody.massprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"una masa solar increíblemente baja de \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"una masa solar extremadamente baja de \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability < 1:\r\n            {set notables to cat(notables, [\"una masa solar inusualmente baja\"])}\r\n        |elif reportbody.massprobability < 10:\r\n            {set notables to cat(notables, [\"menor que la masa solar promedio\"])}\r\n        |elif reportbody.massprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"una masa solar increíblemente alta de \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"una masa solar extremadamente alta de \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability > 99:\r\n            {set notables to cat(notables, [\"una masa solar inusualmente alta\"])}\r\n        |elif reportbody.massprobability > 90:\r\n            {set notables to cat(notables, [\"mayor que la masa solar promedio\"])}\r\n        }\r\n\r\n        {if reportbody.radiusprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"un radio solar increíblemente bajo de \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"un radio solar extremadamente bajo de \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability < 1:\r\n            {set notables to cat(notables, [\"un radio solar inusualmente bajo\"])}\r\n        |elif reportbody.radiusprobability < 10:\r\n            {set notables to cat(notables, [\"menor que el radio solar promedio\"])}\r\n        |elif reportbody.radiusprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"un radio solar extremadamente alto de \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"un radio solar increíblemente alto de \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability > 99:\r\n            {set notables to cat(notables, [\"un radio solar inusualmente alto\"])}\r\n        |elif reportbody.radiusprobability > 90:\r\n            {set notables to cat(notables, [\"más alto que el radio solar promedio\"])}\r\n        }\r\n\r\n        {if reportbody.tempprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"una temperatura  de superficie increíblemente baja de \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n        |elif reportbody.tempprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"una temperatura de superficie extremadamente baja de \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n        |elif reportbody.tempprobability < 1:\r\n            {set notables to cat(notables, [\"una temperatura de superficie inusualmente baja\"])}\r\n        |elif reportbody.tempprobability < 10:\r\n            {set notables to cat(notables, [\"inferior a la temperatura media de la superficie\"])}\r\n        |elif reportbody.tempprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"una temperatura de superficie extremadamente alta \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n        |elif reportbody.tempprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"una temperatura de superficie increíblemente alta de \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n        |elif reportbody.tempprobability > 99:\r\n            {set notables to cat(notables, [\"una temperatura superficial inusualmente alta\"])}\r\n        |elif reportbody.tempprobability > 90:\r\n            {set notables to cat(notables, [\"mayor que la temperatura media de la superficie\"])}\r\n        }\r\n    }\r\n\r\n    {_ Report notable main sequence stars and all stars not found on the main sequence _}\r\n    {if len(notables) > 0 || mainsequence != 1:\r\n\r\n        {if reportbody.stellarclass = \"O\":\r\n            Una estrella {Occasionally(mainSequenceFrequency, \"de secuencia principal\")}\r\n            de clase {P(reportbody.stellarclass)} increíblemente rara {OneOf(\"de ver\",\"\")}\r\n        |elif reportbody.stellarclass = \"B\":\r\n            Una estrella {Occasionally(mainSequenceFrequency, \"de secuencia principal\")}\r\n            de clase {P(reportbody.stellarclass)} muy rara {OneOf(\"de ver\",\"\")}\r\n        |elif reportbody.stellarclass = \"A\":\r\n            Una estrella {Occasionally(mainSequenceFrequency, \"de secuencia principal\")}\r\n            de clase {P(reportbody.stellarclass)}particularmente rara{OneOf(\"de ver\",\"\")}\r\n        |elif reportbody.stellarclass = \"F\":\r\n            Una estrella {Occasionally(mainSequenceFrequency, \"de secuencia principal\")}\r\n            de clase {P(reportbody.stellarclass)}poco común{OneOf(\"de ver\",\"\")}\r\n        |elif reportbody.stellarclass = \"G\":\r\n            Una estrella común {Occasionally(mainSequenceFrequency, \"de secuencia principal\")}\r\n            de clase {P(reportbody.stellarclass)}\r\n        |elif reportbody.stellarclass = \"K\":\r\n            Una estrella de clase {P(reportbody.stellarclass)}\r\n            bastante común {OneOf(\"de encontrar\",\"\")}\r\n        |elif reportbody.stellarclass = \"M\":\r\n            Una típica estrella {Occasionally(mainSequenceFrequency, \"de secuencia principal\")} \r\n            de clase {P(reportbody.stellarclass)} {OneOf(\"muy común\",\"\")}\r\n        |elif find([\"L\", \"T\", \"Y\"], reportbody.stellarclass) > -1:\r\n           Una enana marrón {P(reportbody.stellarclass)}-class\r\n    |elif reportbody.stellarclass = \"TTS\":\r\n        una estrella T tauri de clase {P(reportbody.stellarclass)}, en proceso de {OneOf(\"colapso gravitatorio\",\"colapso gravitacional\",\"contracción gravitacional\",\"convertirse en un posible agujero negro, estrella de neutrones, o supernova\")}\r\n    |elif reportbody.stellarclass = \"AEBE\":\r\n        una protoestrella muy joven de clase {P(reportbody.stellarclass)}, que aún no ha empezado su secuencia principal {Occasionally(4, \", pero está en camino de convertirse en una estrella de clase A, o B\")}\r\n    |elif reportbody.stellarclass = \"WC\":\r\n        una estrella Wolf-Rayet clase {P(reportbody.stellarclass)}, rica en carbono{Occasionally(2, \", de combustión rápida\")} \r\n        {Occasionally(2, \", con una pérdida considerable de su masa, y exponiendo carbono ionizado a su núcleo, \")}\r\n    |elif reportbody.stellarclass = \"WN\":\r\n        una estrella Wolf-Rayet clase {P(reportbody.stellarclass)}, rica en helio y nitrógeno{Occasionally(2, \" de combustión rápida\")}\r\n        {Occasionally(2, \", con una pérdida considerable de su masa, y exponiendo helio ionizado y nitrógeno a su núcleo, \")}\r\n    |elif reportbody.stellarclass = \"WO\":\r\n        una estrella Wolf-Rayet clase {P(reportbody.stellarclass)} rica en oxígeno{Occasionally(2, \" de combustión rápida\")} \r\n        {Occasionally(2, \",  con una pérdida considerable de su masa, y exponiendo oxígeno ionizado a su núcleo, \")}\r\n    |elif reportbody.stellarclass = \"WNC\":\r\n        una estrella Wolf-Rayet clase {P(reportbody.stellarclass)} {Occasionally(2, \" de combustión rápida\")} \r\n        {Occasionally(2, \", con una pérdida considerable de su masa, y exponiendo a su núcleo, nitrógeno ionizado, carbono, oxígeno, y helio, \")}\r\n    |elif reportbody.stellarclass = \"W\":\r\n        una estrella Wolf-Rayet clase {P(reportbody.stellarclass)} {Occasionally(2, \" de combustión rápida\")} \r\n        {Occasionally(2, \", con una pérdida considerable de su masa, y exponiendo a su núcleo todos los elementos mas pesados, \")}\r\n    |elif reportbody.stellarclass = \"CS\":\r\n        una estrella de carbono de clase {P(reportbody.stellarclass)}\r\n    |elif find([\"C\", \"CN\", \"CH\", \"CHd\"], reportbody.stellarclass) > -1:\r\n        una estrella de carbono clase {P(reportbody.stellarclass)} {Occasionally(2, \", de tipo tardío\")}{Occasionally(4, \", con una atmósfera dominada por el carbono\")}\r\n    |elif reportbody.stellarclass = \"CJ\":\r\n        una estrella de carbono clase {P(reportbody.stellarclass)} {Occasionally(2, \", de tipo tardío\")}{Occasionally(2, \", con altos niveles de carbono 13 en su atmósfera\")}\r\n    |elif reportbody.stellarclass = \"MS\":\r\n        una estrella clase {P(reportbody.stellarclass)} de tipo tardío{Occasionally(4, \", que antes fue una Estrella Clase M, y ahora está en camino de convertirse en una de carbono\")}\r\n    |elif reportbody.stellarclass = \"S\":\r\n        una estrella clase {P(reportbody.stellarclass)} de tipo tardío{Occasionally(4, \", que antes fue una Estrella Clase M, y que ahora se está convirtiendo ya en una de carbono\")}\r\n    |elif reportbody.stellarclass = \"D\":\r\n        una enana blanca de clase {P(reportbody.stellarclass)}\r\n    |elif reportbody.stellarclass = \"DA\":\r\n        una enana blanca de clase {P(reportbody.stellarclass)} {Occasionally(4, \" con una atmósfera rica en hidrógeno\")}\r\n    |elif reportbody.stellarclass = \"DAB\":\r\n        una enana blanca de clase {P(reportbody.stellarclass)} {Occasionally(4, \" con una atmósfera rica en hidrógeno y helio\")}\r\n    |elif slice(reportbody.stellarclass, 0, 1) = \"D\":\r\n        una enana blanca de clase {P(reportbody.stellarclass)}\r\n    |elif slice(reportbody.stellarclass, 0, 1) = \"N\":\r\n        una estrella de neutrones clase {P(reportbody.stellarclass)} {Occasionally(4, \" con un peligroso núcleo de alta densidad\")}\r\n    |elif reportbody.stellarclass = \"H\":\r\n        un agujero negro\r\n    |elif reportbody.stellarclass = \"X\":\r\n        una entidad estelar muy exótica...\r\n    |elif reportbody.stellarclass = \"SuperMassiveBlackHole\":\r\n        un agujero negro supermasivo\r\n    |elif reportbody.stellarclass = \"A_BlueWhiteSuperGiant\":\r\n        una supergigante blanco-azulada clase {P(reportbody.stellarclass)} {Occasionally(4, \", que se está expandiendo hacia convertirse en una supergigante roja\")}\r\n    |elif reportbody.stellarclass = \"F_WhiteSuperGiant\":\r\n        una supergigante amarilla clase {P(reportbody.stellarclass)}{Occasionally(4, \", que se está expandiendo hacia convertirse en una supergigante roja\")}\r\n    |elif reportbody.stellarclass = \"M_RedSuperGiant\":\r\n        una supergigante roja clase {P(reportbody.stellarclass)} {Occasionally(4, \", en su fase de combustión de helio\")}\r\n    |elif reportbody.stellarclass = \"M_RedGiant\":\r\n        una gigante roja clase {P(reportbody.stellarclass)} {Occasionally(4, \", que se está expandiendo hacia convertirse en supergigante\")}\r\n    |elif reportbody.stellarclass = \"K_OrangeGiant\":\r\n        una gigante naranja clase {P(reportbody.stellarclass)} {Occasionally(4, \", que se expande mientras se dirige hacia el final de su vida\")}\r\n    |elif reportbody.stellarclass = \"RoguePlanet\":\r\n        un planeta {OneOf(\"interestelar\",\"vagabundo\",\"errante\",\"huérfano\")}\r\n    |elif reportbody.stellarclass = \"Nebula\":\r\n        una nebulosa\r\n    |elif reportbody.stellarclass = \"StellarRemnantNebula\":\r\n        un{OneOf(\"a nebulosa remanente\",\" remanente de Supernova\")}\r\n    |else:\r\n        una estrella clase {Spacialise(reportbody.stellarclass)}\r\n    }\r\n\r\n        {if reportAge = 1:\r\n            {set ageInYears to reportbody.age * 1000000}\r\n            {if reportbody.age > 0:\r\n               {OneOf(\"Que existe desde {Humanise(ageInYears)} de años\",\r\n               \"que tiene {Humanise(ageInYears)} de años de vida\",\r\n               \"de {Humanise(ageInYears)} de años\",\r\n                )}\r\n            |else:\r\n                que existe solo desde hace menos de un millón de años,\r\n            }\r\n            {if ageInYears < 1000000:\r\n                por lo que es una de las estrellas más jóvenes de la galaxia\r\n            |elif ageInYears >14000000000:\r\n                por lo que es una de las estrellas más {OneOf(\"lonjevas\",\"viejas\",\"ancianas\")} de la galaxia\r\n            }\r\n        }\r\n\r\n        {OneOf(\"detectada\", \"identificada\")}.\r\n\r\n        {if mainsequence = 1 && reportChromaticity = 1:\r\n            {Occasionally(2,\"Como puedes ver, emite una luz {reportbody.chromaticity}.\")}\r\n        }\r\n\r\n        {if reportScanValue: {F(\"Report last scan value\")} }\r\n\r\n        {if event.mainstar && reportHabZone : {F(\"Star habitable zone\")} } \r\n\r\n    }   \r\n}",
      "default": true,
      "name": "Star report",
      "description": "Función para informar de los detalles del objeto estelar contextual (TEST)"
    },
    "Star scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'star')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', system.name)}\r\n{SetState('eddi_context_star_star', event.name)}\r\n{SetState('eddi_context_last_scan_estimated_value', event.estimatedvalue)}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n    {F(\"Star report\")}\r\n}",
      "default": true,
      "name": "Star scanned",
      "description": "Se activa cuando completa un escaneo de un cuerpo estelar (TEST)"
    },
    "Station no fire zone entered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Station no fire zone entered",
      "description": "Se activa cuando su nave entra en la zona de seguridad de una estación espacial"
    },
    "Station no fire zone exited": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Station no fire zone exited",
      "description": "Se activa cuando su nave abandona la zona de seguridad de una estación espacial"
    },
    "Station report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "No hay nada interesante aquí",
      "default": true,
      "name": "Station report",
      "description": "Función para informar sobre los detalles de la actual estación espacial"
    },
    "Swapout check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to find a given module in outfitting}\r\n{set outfitting(module) to:\r\n    {for outfittingmodule in station.outfitting:\r\n        {if outfittingmodule.EDDBID = module.EDDBID:\r\n            {return outfittingmodule}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Function to report if a module is cheaper in outfitting that on the ship}\r\n{set reportIfCheaper(shipmodule) to:\r\n    {_ Only consider if this has no modifications}\r\n    {if !shipmodule.modified:\r\n        {set outfittingmodule to outfitting(shipmodule)}\r\n        {if outfittingmodule:\r\n            {if outfittingmodule.price < shipmodule.price:\r\n                {set saving to shipmodule.price - outfittingmodule.price}\r\n                {_ Only bother if it's a relatively good saving}\r\n                {if saving / cmdr.credits > 0.001:\r\n                    Puede ahorrar {saving} créditos cambiando su {shipmodule.name} aquí.\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{reportIfCheaper(ship.powerplant)}\r\n{reportIfCheaper(ship.thrusters)}\r\n{reportIfCheaper(ship.frameshiftdrive)}\r\n{reportIfCheaper(ship.lifesupport)}\r\n{reportIfCheaper(ship.powerdistributor)}\r\n{reportIfCheaper(ship.sensors)}\r\n{for hardpoint in ship.hardpoints:\r\n    {if hardpoint.module:\r\n        {reportIfCheaper(hardpoint.module)}\r\n    }\r\n}\r\n{for compartment in ship.compartments:\r\n    {if compartment.module:\r\n        {reportIfCheaper(compartment.module)}\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Swapout check",
      "description": "Comprueba si algún módulo de los instalados en la nave está disponible más barato en la ubicación actual"
    },
    "Synthesised": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Síntesis completada.",
      "default": true,
      "name": "Synthesised",
      "description": "Se activa cuando se realiza alguna síntesis utilizando materiales"
    },
    "System distance report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\n\n{if !reportsystem.name || reportbody.name = \"\":\n   No tengo la certeza sobre a qué sistema se refiere.\n|else:\n    La distancia a {P(reportsystem.name)} es de {Humanise(Distance(reportsystem.x, reportsystem.y, reportsystem.z, system.x, system.y, system.z))} años luz.\n}\n\n\n\n",
      "default": true,
      "name": "System distance report",
      "description": "Función para informar sobre la distancia al sistema contextual"
    },
    "System faction changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "System faction changed",
      "description": "Se activa cuando hay algún cambio en la facción que controla un sistema vigilado"
    },
    "System report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\n\n{if !reportsystem.name || reportbody.name = \"\":\n    No tengo la certeza sobre a qué sistema se refiere\n|else:\n    {P(reportsystem.name)} es un sistema \n\n    {if reportsystem.population && reportsystem.population > 0:\r\n\r\n        {if reportsystem.government = \"Colonia prisión\": \r\n          Colonia prisión\r\n        |elif reportsystem.government = \"Anarquía:\r\n          Anárquico\r\n        |elif reportsystem.government = \"Colonia\":\r\n          Colonial\r\n        |elif reportsystem.government = \"Communismo\":\r\n          Comunista\r\n        |elif reportsystem.government = \"Confederación\":\r\n          Confederado\r\n        |elif reportsystem.government = \"Cooperativa\":\r\n          Cooperativo\r\n        |elif reportsystem.government = \"Corporación\":\r\n          Corporativo\r\n        |elif reportsystem.government = \"Democracia\":\r\n          Demócrata\r\n        |elif reportsystem.government = \"Dictadurap\":\r\n          Dictatorial\r\n        |elif reportsystem.government = \"Feudal\":\r\n          Feudal\r\n        |elif reportsystem.government = \"Imperio\":\r\n          Imperialista\r\n        |elif reportsystem.government = \"Patronazgo\":\r\n          Patronal\r\n        |elif reportsystem.government = \"Teocracia\":\r\n          Teocrático\r\n        |elif reportsystem.government = \"Taller\":\r\n          Taller\r\n        |elif reportsystem.government = \"Engineer\":\r\n          Tecnológico\n            \n            \n        {if reportsystem.allegiance = \"La Federación\":\n            de la Federación\n        |elif reportsystem.allegiance = \"El Imperio\":\n            del Imperio\n        |else:\n            independiente\n        }\n\n        |else:\n          \n        }\n        {OneOf(\"de\", \"con una población de\", \"que acoje a\")} \r\n        {Humanise(reportsystem.population)}{if find(Humanise(reportsystem.population),\"coma cinco\") != -1:es}\r\n        de habitantes\n        {if reportsystem.power:\n            , {OneOf(\"alineados con\", \"aliados con\", \"controlados por\")} {P(reportsystem.power)}\n        }.\n\n        {if reportsystem.faction:\n          {P(reportsystem.faction)} es la {OneOf(\"potencia\", \"facción\")} {OneOf(\"dominante\", \"local\", \"que gobierna\")}.\n        }\n\n        {if len(reportsystem.stations) = 0:\n          No hay ninguna estación presente\n        |else:\n            {if len(reportsystem.orbitalstations) = 0:\n                {if len(reportsystem.planetarystations) = 1:\n                    Hay {OneOf(\"una sola\", \"solo una\", \"una solitaria\", \"una\")} estación planetaria\n                |else:\n                    Hay {len(reportsystem.planetarystations)} estaciones planetarias\n                }\n            |elif len(reportsystem.orbitalstations) = 1:\n                Hay {OneOf(\"una sola\", \"solo una\", \"una solitaria\", \"una\")} estación orbital\n                {if len(reportsystem.planetarystations) = 1:\n                    y {OneOf(\"una sola\", \"solo una\", \"una\")} estación planetaria\n                |elif len(reportsystem.planetarystations) > 1:\n                    y {len(reportsystem.planetarystations)} estaciones planetarias\n                }\n            |else:\n                Hay {len(reportsystem.orbitalstations)} estaciones orbitales\n                {if len(reportsystem.planetarystations) = 1:\n                    y {OneOf(\"una sola\", \"solo una\", \"una\")} estación planetaria\n                |elif len(reportsystem.planetarystations) > 1:\n                    y {len(reportsystem.planetarystations)} estaciones planetarias\n                }\n            }\n        }\n        en este sistema\n    |else:\n       {OneOf(\"inhabitado\",\"despoblado\",\"sin habitantes\",\"sin ningún habitante\",\"sin ninguna población\")}\n   }.\n}",
      "default": true,
      "name": "System report",
      "description": "Función para informar sobre los detalles del sistema estelar contextual (TEST)"
    },
    "System scan complete": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Preferences _}\r\n{set reportGreenSystems to true}  {_ if true, reports systems containing all fsd synthesis elements. _}\r\n{set reportGoldSystems to true}   {_ if true, reports systems containing all surface prospectable elements. _}\r\n{set reportBodiesToMap to true}   {_ If true, recommends bodies to map using the `Bodies to map` script. _}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n    {for compartment in ship.compartments:\r\n        {if compartment.module.invariantName = \"Planetary Vehicle Hangar\":\r\n            {set hasSRV to true}\r\n        }\r\n    }\r\n    {if hasSRV:\r\n        {if system.isgold:\r\n            {if reportGoldSystems:\r\n                This {Occasionally(2, \"star\")} system is {OneOf(\"extraordinary\", \"incredible\")}, \r\n                containing every element \r\n                {OneOf(\"that can be found\", \"available\")}\r\n                {OneOf(\"on a planetary surface.\", \"by surface prospecting.\")}\r\n                Exploration class: Gold.\r\n            }\r\n        |elif system.isgreen:\r\n            {if reportGreenSystems:\r\n                This {Occasionally(2, \"star\")} system is {OneOf(\"remarkable\", \"notable\")}, \r\n                containing every element that may be required to \r\n                {OneOf(\"augment\", \"boost\")} \r\n                {OneOf(\"the jump range of this ship.\", \"an explorer's jump range.\")}\r\n                Exploration class: Green.\r\n            }\r\n        }\r\n    }\r\n\r\n    {if reportBodiesToMap:\r\n        {set bodiesToMap to F(\"Bodies to map\")}\r\n        {if bodiesToMap:\r\n            {Pause(2000)}\r\n            {bodiesToMap}\r\n        }\r\n    }\r\n}",
      "default": true,
      "name": "System scan complete",
      "description": "Se activa al completar el escaneo de un sistema estelar"
    },
    "System state changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'system')}\n{SetState('eddi_context_last_action', 'change_state')}\n{SetState('eddi_context_system', event.system)}\n{SetState('eddi_context_system_system', event.system)}\n\n{_ Set up our system name}\n{if event.system = homesystem.name:\n  {set system to OneOf('{P(event.system)}',\n                       'Tu sistema hogar')}\n|elif event.system = system.name:\n  {set system to OneOf('{P{event.system)}',\n                       'este sistema')}\n|else:\n  {set system to OneOf('sistema {P(event.system)}'\n                       '{P(event.system)}'))}\n}\n\n{if event.newstate != 'None':\n  {_ System has entered a new state}\n  {OneOf('Las transmisiones locales informan que', 'Información: ', 'Transmisión interceptada. Informan que ')}\n  {if event.newstate = 'Boom':\n    {OneOf('{system} está experimentando un auge comercial',\n           '{system} está entrando en un período de mayor éxito comercial')}\n  |elif event.newstate = 'Bust':\n    {system} está experimentando dificultades económicas\n  |elif event.newstate = 'Civil Unrest':\n    {OneOf('{system} está experimentando disturbios civiles',\n           'hay disturbios en el {system} system')}\n  |elif event.newstate = 'Civil War':\n    {OneOf('{system} está en guerra con otra facción en el mismo sistema',\n           'una guerra civil estalló en {system}',\n           '{system} ha caído en una guerra civil',\n           'han estallado hostilidades en {system}')}\n  |elif event.newstate = 'Election':\n    {system} está pasando por elecciones\n  |elif event.newstate = 'Expansion':\n    {OneOf(\"una facción en {system} está intentando expandirse a un sistema vecino\",\n           \"una facción en {system} está preparándose para expandirse a un sistema vecino\")}\n  |elif event.newstate = 'Famine':\n    {system} está sufriendo hambruna\n  |elif event.newstate = 'Investment':\n    En {system} la facción controladora está invirtiendo fuertemente en su infraestructura local\n  |elif event.newstate = 'Lockdown':\n    {system} ha aumentado la seguridad debido a un bloqueo por parte de la facción dominante\n  |elif event.newstate = 'Outbreak':\n    {system} sufre de un brote de enfermedad contagiosa\n  |elif event.newstate = 'Retreat':\n    La facción que controla {system} se está retirando de un sistema vecino\n  |elif event.newstate = 'War':\n    {system} ahora está en guerra con un sistema vecino\n  |else:\n   el {OneOf('{system} ha entrado en {event.state}',\n           '{system} ahora está en {event.state}')}\n  }.\n}\n\n",
      "default": true,
      "name": "System state changed",
      "description": "Se activa cuando hay un cambio en el estado de un sistema vigilado"
    },
    "System state report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportsystem.name = \"\":\r\n    No tengo claro a que sistema se refiere.\r\n|elif reportsystem.state && reportsystem.state != 'Ninguno':\r\n    {P(reportsystem.name)}\r\n    {if reportsystem.state = \"Retirada\":\r\n        está en retirada\r\n    |elif reportsystem.state = \"Guerra\":\r\n        está en guerra; se recomienda precaución\r\n    |elif reportsystem.state = \"Auge\":\r\n        está experimentando un auge económico; podría hacer buenos negocios\r\n    |elif reportsystem.state = \"Desórdenes públicos\":\r\n        está experimentando disturbios civiles; se recomienda precaución\r\n    |elif reportsystem.state = \"Guerra civil\":\r\n        está en guerra civil; se recomienda precaución\r\n    |elif reportsystem.state = \"Hambruna\":\r\n        hay hambruna; se recomienda precaución\r\n    |elif reportsystem.state = \"Bloqueo\":\r\n        está en bloqueo; se recomienda precaución\r\n    |elif reportsystem.state = \"Epidemia\":\r\n        está tratando de contener un brote de enfermedad; se recomienda precaución\r\n    |elif reportsystem.state = \"Expansión\":\r\n        se está preparando para expandirse a otro sistema\r\n    |elif reportsystem.state = \"Quiebra\":\r\n        está en quiebra\r\n    |elif reportsystem.state = \"Elecciones\":\r\n        está en periodo electoral\r\n    |elif reportsystem.state = \"Inversión\":\r\n        está invirtiendo en infraestructuras\r\n    |elif reportsystem.state = \"Libertad Civil\":\r\n        tiene libertad civil. Hay una anarquía. Puede que no sea un sistema seguro.\r\n    |elif reportsystem.state = \"Incursión\":\r\n        está sufriendo una invasión alienígena. {Emphasize(\"¡Alerta!\",'strong')}\r\n    |elif reportsystem.state = \"Ataque Pirata\":\r\n        está sufriendo ataques de piratas. Tenga precaución\r\n    |else:\r\n    }\r\n    .\r\n}",
      "default": false,
      "name": "System state report",
      "description": "Informa sobre el estado actual del sistema contextual"
    },
    "Technology broker": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Technology broker",
      "description": "Se activa cuando se utiliza el Broker de Tecnología para desbloquear nuevos elementos"
    },

    "Touchdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set body to BodyDetails(state.eddi_context_body_name, state.eddi_context_system_name)}\n\n{if event.playercontrolled = true:\n  Hemos aterrizado {if body.name: en {body.name} }.\n|else:\n  {ShipName()} ha aterrizado\n  {if body.name: en {body.name} }.\n}\n\n\n{Pause(2000)}\n\n{if type(event.latitude) != \"void\" && type(event.longitude) != \"void\" :\n   Las coordenadas son: {round(event.latitude, 1)} grados de latitud, y {round(event.longitude, 1)} grados de longitud.\n}",
      "default": true,
      "name": "Touchdown",
      "description": "Se activa cuando su nave aterriza en la superficie de un planeta"
    },
    "Trade data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'tradedata')}\n{SetState('eddi_context_last_action', 'buy')}\n{SetState('eddi_context_tradedata_name', event.system)}\n\n{OneOf(\"Adquiridos datos de comercio del sistema {event.system}\",\n            \"Datos comerciales del sistema {event.system} disponibles\",\"Datos comerciales del sistema {event.system} recibidos correctamente\"\n            \"Recibidos datos comerciales del sistema {event.system} desde los servicios de la estación\",\n            \"Recepción de datos comerciales del sistema {event.system} confirmada\")}.",
      "default": true,
      "name": "Trade data purchased",
      "description": "Se activa cuando compra datos de comercio"
    },
    "Trade promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{F(\"Honorific\")}, se ha reconocido su habilidad como comerciante.",
      "default": true,
      "name": "Trade promotion",
      "description": "Se activa cuando aumenta su rango de comercio"
    },
    "Trade voucher redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'trade_voucher')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_trade_voucher_amount', event.amount)}\r\n\r\nDevengados {event.amount} créditos en vales de comercio\r\n{Occasionally(2, \"\r\n  {if len(event.rewards) = 1:\r\n    por parte de la facción {event.rewards[0].faction}\r\n  |else:\r\n    por parte de \r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n        {if cur = 0:\r\n        |elif cur < len(event.rewards) - 1:\r\n            , \r\n        |else:\r\n            y\r\n        }\r\n        {event.rewards[cur].faction}\r\n        {set cur to cur + 1}\r\n    }\r\n  }\r\n\")}.\r\n",
      "default": true,
      "name": "Trade voucher redeemed",
      "description": "Se activa cuando canjea un bono comercial"
    },
    "Under attack": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Under attack",
      "description": "Se activa cuando está siendo atacado (al mismo tiempo que el mensaje de voz de Bajo Ataque)"
    },
    "Undocked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Reestablecido control completo\", \"Anclajes de aterrizaje desconectados\", \"Desconectado de redes locales\")}.\n\n{set limpetcheck to F(\"Limpet check\")}\n\n{if limpetcheck:\n    {Pause(5000)}\n    {limpetcheck}\n}\n",
      "default": true,
      "name": "Undocked",
      "description": "Se activa cuando su nave despega de una estación espacial o puesto avanzado"
    },
    "VA initialized": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "VA initialized",
      "description": "Se activa cuando se inicializa el plugin de Voice Attack"
    },
    "Vehicle destroyed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\n{OneOf(\"Enlace neuronal\", \"Enlace\", \"Nexo\", \"Vínculo\")} {OneOf(\"finalizado\", \"desactivado\")}.",
      "default": true,
      "name": "Vehicle destroyed",
      "description": "Se activa cuando su vehículo ha resultado destruido"
    }
  }
}