{
  "name": "EDDI",
  "description": "Versão em Português da Persona do Darkcyde",
  "scripts": {
    "AFMU repairs": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.item} \r\n{if event.repairedfully:\r\n    totalmente reparado\r\n|else:\r\n    parcialmente reparado \r\n    {Occasionally(2, cat(\r\n        OneOf(\"em \", \"a \"),\r\n        Humanise(event.health * 100),\r\n        \" por cento de funcionalidade\"\r\n    ))}\r\n}\r\n\r\n{Occasionally(2, \r\n    cat(OneOf(\", \", \"e está\"), \" pronto para reativação\")\r\n)}.",
      "default": true,
      "name": "AFMU repairs",
      "description": "Triggered when repairing modules using the Auto Field Maintenance Unit (AFMU)"
    },
    "Blueprint make report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain current inventory of a material}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch blueprint from state }\r\n{set blueprintname to state.blueprint}\r\n{if blueprintname:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'blueprint')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n}\r\n\r\n{if !blueprint:\r\n    {_ Fetch from context }\r\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name)}\r\n}\r\n\r\n{set canbemade to 999}\r\n\r\n{if blueprint:\r\n    {_ Find the smallest number of this blueprint that can be made }\r\n    \r\n    {set cur to 0}\r\n    {while cur < len(blueprint.materials):\r\n        {set inventory to _inventory(blueprint.materials[cur].material)}\r\n        {if !inventory:\r\n            {set canbemade to 0}\r\n        |else:\r\n            {if inventory.amount < canbemade:\r\n                {set canbemade to inventory.amount}\r\n            }\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {if canbemade = 0:\r\n        Você não pode faze um {blueprintname}\r\n    |elif canbemade = 1:\r\n        Você pode fazer um {blueprintname}\r\n    |else:\r\n        Você pode fazer {canbemade} {blueprintname}\r\n    }\r\n|else:\r\n    Sem informação disponível sobre os materiais necessários para {blueprintname}\r\n}.\r\n",
      "default": true,
      "name": "Blueprint make report",
      "description": "Reporta quantas vezes podemos utilizar um diagrama em particular"
    },
    "Blueprint material report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch blueprint from state }\r\n{set blueprintname to state.blueprint}\r\n{if blueprintname:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'blueprint')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n}\r\n\r\n{if !blueprint:\r\n    {_ Fetch from context }\r\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name)}\r\n}\r\n\r\n{if blueprint:\r\n    {blueprintname} requires\r\n    {set cur to 0}\r\n    {set length to len(blueprint.materials) - 1}\r\n    {while cur < len(blueprint.materials):\r\n        {blueprint.materials[cur].material}\r\n        {set cur to cur + 1}\r\n        {if cur = length: and\r\n        |elif cur < length:,\r\n        }\r\n    }\r\n|else:\r\n    Sem informação disponível sobre os materiais requeridos por {blueprintname}\r\n}.\r\n",
      "default": true,
      "name": "Blueprint material report",
      "description": "Reporta a quantidade de material requerido por um diagrama"
    },
    "Bodies mapped": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from Context _}\r\n{set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n\r\n{_ Build a list of scanned bodies _}\r\n\r\n{set mappedList to []}\r\n{for body in reportSystem.bodies:\r\n   {if body.mapped:\r\n       {set mappedList to cat(mappedList, [P(body.shortname)])} \r\n   }\r\n}\r\n\r\n{_ Begin speaking _}\r\n\r\n{if len(mappedList) > 0:\r\n    {if len(mappedList) = 1: Body |else: Bodies}\r\n    {List(mappedList)}\r\n    {if len(mappedList) = 1: has |else: have }\r\n    {set already to Occasionally(2, \"already\")}\r\n    {OneOf(\"{already} been mapped\", \"been mapped {already}\")}.\r\n|else:\r\n    You have yet to map any bodies in this system.\r\n}\r\n",
      "default": true,
      "name": "Bodies mapped",
      "description": "Reports all the bodies mapped in this system so far"
    },
    "Bodies to map": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences: _}\r\n\r\n{set reportTerraformables to true}   {_ Reports all terraformable and terraformed bodies _}\r\n{set highValueThreshold to 80000}   {_ The minimum threshold for estimated exploration value worth mapping _}\r\n{set reportPlanetTypes to [\r\n    \"Ammonia world\": true,\r\n    \"Earth-like world\": true,\r\n    \"Gas giant with ammonia based life\": false,\r\n    \"Gas giant with water based life\": false,\r\n    \"Helium gas giant\": false,\r\n    \"Helium-rich gas giant\": false,\r\n    \"High metal content world\": false,\r\n    \"Icy body\": false,\r\n    \"Metal-rich body\": false,\r\n    \"Rocky body\": false,\r\n    \"Rocky ice world\": false,\r\n    \"Class I gas giant\": false,\r\n    \"Class II gas giant\": false,\r\n    \"Class III gas giant\": false,\r\n    \"Class IV gas giant\": false,\r\n    \"Class V gas giant\": false,\r\n    \"Water giant\": false,\r\n    \"Water giant with life\": false,\r\n    \"Water world\": true,\r\n]}\r\n\r\n{_ Fetch from Context _}\r\n{set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n\r\n{_ Identify bodies worth mapping _}\r\n\r\n{set toMapList to []}\r\n{set mappedBodies to 0}\r\n{set totalBodies to 0}\r\n\r\n{for body in reportSystem.bodies:\r\n    {set totalBodies to totalBodies + 1}\r\n    {if body.mapped:\r\n        {set mappedBodies to mappedBodies + 1}\r\n    |else:\r\n        {if body.bodyType.invariantName != \"Star\":\r\n            {if body.terraformState.invariantName = \"Candidate for terraforming\" \r\n             || body.terraformState.invariantName = \"Terraformed\":\r\n                {if reportTerraformables:\r\n                    {if !toMapList[body.shortname]: \r\n                        {set toMapList to cat(toMapList, [body.shortname])}\r\n                    } \r\n                }\r\n            |elif reportPlanetTypes[body.planetClass.invariantName]:\r\n                {if !toMapList[body.shortname]: \r\n                    {set toMapList to cat(toMapList, [body.shortname])}\r\n                }\r\n            |elif body.estimatedvalue > highValueThreshold:\r\n                {if !toMapList[body.shortname]: \r\n                    {set toMapList to cat(toMapList, [body.shortname])}\r\n                } \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{_ Begin speaking _}\r\n\r\n{if len(toMapList) > 0:\r\n\r\n    {if len(toMapList) = 1: Body |else: Bodies}\r\n\r\n    {set cur to 0}\r\n    {while cur < len(toMapList):\r\n        {P(toMapList[cur])}\r\n        {set cur to cur + 1}\r\n        {if cur = len(toMapList) - 1: and\r\n        |elif cur < len(toMapList) - 1:,\r\n        }\r\n    }\r\n\r\n    {if len(toMapList) = 1: is |else: are }\r\n    {if event.type = \"Body mapped\": {OneOf(\"also\")} }\r\n    {if len(toMapList) = 1: a }\r\n    {OneOf(\"recommended\", \"good\")}\r\n    {set candidates to:\r\n        {if len(toMapList) > 1: candidates |else: candidate}\r\n    }\r\n    {OneOf('{candidates} for mapping', '{candidates} to map', 'mapping {candidates}')}.\r\n\r\n|elif mappedBodies > 0:\r\n\r\n    {OneOf(\r\n        \"You have mapped all {if mappedBodies < totalBodies: {OneOf(\\\"worthwhile\\\", \\\"interesting\\\")}} bodies.\",\r\n        \"All {OneOf( \\\"{if mappedBodies < totalBodies: worthwhile} bodies\\\", \\\"bodies of interest\\\" )} {OneOf( \\\"have been mapped.\\\", \\\"are now mapped.\\\" )}\"\r\n    )}\r\n}",
      "default": true,
      "name": "Bodies to map",
      "description": "Reports all the unmapped bodies in the system that are worth mapping"
    },
    "Body atmosphere report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{set reportAtmoPressure to 0}   {_ Set to 1 if you want to hear about the atmospheric pressure. _}\r\n{set reportAtmoTempScale to 0}  {_ Set to 0 if you want to hear about temperatures in Kelvin _}\r\n                                {_ Set to 1 if you want to hear about temperatures in Celsius _}\r\n                                {_ Set to 2 if you want to hear about temperatures in Fahrenheit _}\r\n                                {_ Set to 3 if you don't want to hear about the temperature of the body _}\r\n\r\n{_ Define functions for converting temperature scales _}\r\n{set ToCelsius(kelvin) to: {round(kelvin - 273)}}\r\n{set ToFahrenheit(kelvin) to: {round((kelvin-273)*9/5 + 32)}}\r\n{set TempCalc(kelvin) to: \r\n    {if reportAtmoTempScale = 0: {round(kelvin)}}\r\n    {if reportAtmoTempScale = 1: {ToCelsius(kelvin)}}\r\n    {if reportAtmoTempScale = 2: {ToFahrenheit(kelvin)}}\r\n}\r\n\r\n{_ Name our temperature scale _}\r\n{if reportAtmoTempScale = 0: {set tempscale to: Kelvin}}\r\n{if reportAtmoTempScale = 1: {set tempscale to: degrees Celsius}}\r\n{if reportAtmoTempScale = 2: {set tempscale to: degrees Fahrenheit}}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody: \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    I'm not sure which body you are asking about.\r\n\r\n|else:\r\n\r\n    {if find(reportbody.planettype, \"giant\") >= 0:\r\n        {if find(reportbody.planettype, \"Class\") >= 0: \r\n            {set sudarsky to Occasionally(3, \"Sud-dar-ski\")}\r\n        }\r\n        {set planetdesc to OneOf(\"{sudarsky} Gas giants like this one have\", \"This {sudarsky} gas giant has\")}\r\n        {if find(reportbody.planettype, \"Class V\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(1373)}}\r\n                temperatures above {Humanise(tempmin)} {tempscale}, {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of {OneOf(\"vaporized silicates and iron\", \"silicate and iron vapors\")}.\r\n        |elif find(reportbody.planettype, \"Class IV\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(354)}}\r\n                {set tempmax to: {TempCalc(903)}}\r\n                temperatures {OneOf(\"of\", \"ranging\")} between {Humanise(tempmin)} and {Humanise(tempmax)} {tempscale}, {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of {OneOf(\"alkali metals vapors\", \"vaporized alkali metals\")}.   \r\n        |elif find(reportbody.planettype, \"Class III\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(251)}}\r\n                {set tempmax to: {TempCalc(353)}}\r\n                surface temperatures {OneOf(\"of\", \"ranging\")} between {Humanise(tempmin)} and {Humanise(tempmax)} {tempscale},\r\n            }\r\n            a temperature at which {OneOf(\"no gaseous elements will form any clouds\", \"suitable chemicals are not present in the atmosphere to form a sustained cloud layer\", \"the atmosphere cannot sustain a persistent cloud layer\")}.\r\n        |elif find(reportbody.planettype, \"Class II\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(154)}}\r\n                {set tempmax to: {TempCalc(250)}}\r\n                surface temperatures {OneOf(\"of\", \"ranging\")} between {Humanise(tempmin)} and {Humanise(tempmax)} {tempscale}, {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of water vapors.  \r\n        |elif find(reportbody.planettype, \"Class I\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(153)}}\r\n                {set tempmax to: {TempCalc(83)}}\r\n                surface temperatures of {Humanise(tempmax)} {tempscale} {Occasionally(2, OneOf(\", or less,\", \", at most,\"))} {OneOf(\"and\", \"with\", \"forming\")}\r\n             }\r\n             a dense cloud layer of ammonia vapor.  \r\n        }\r\n\r\n    |elif reportbody.atmosphere = \"No atmosphere\" || !reportbody.atmosphere:\r\n        {Occasionally(4, OneOf(\"There is no atmosphere.\", \"It is devoid of any atmosphere.\", \"The years have scoured it clean of any atmosphere.\"))}\r\n        {if reportbody.temperature && reportAtmoTempScale < 3:\r\n            The surface temperature averages\r\n            {TempCalc(reportbody.temperature)} {tempscale}.\r\n        }\r\n\r\n    |elif reportbody.pressure: \r\n        {if reportbody.pressure < 0.1:\r\n            {set pressdesc to OneOf(\"trace gas\", \"super thin\")}\r\n        |elif reportbody.pressure < 0.25:\r\n            {set pressdesc to \"very thin\"}\r\n        |elif reportbody.pressure < 0.5:\r\n            {set pressdesc to \"thin\"}\r\n        |elif reportbody.pressure < 2:\r\n            {set pressdesc to \"\"}\r\n        |elif reportbody.pressure < 10:\r\n            {set pressdesc to \"thick\"}\r\n        |elif reportbody.pressure < 50:\r\n            {set pressdesc to OneOf(\"dense\", \"very thick\")}\r\n        |elif reportbody.pressure < 100:\r\n            {set pressdesc to OneOf(\"very dense\", \"super thick\")}\r\n        |elif reportbody.pressure >= 100:\r\n            {set pressdesc to OneOf(\"crushing\", \"super dense\")}\r\n        }\r\n        {if find(reportbody.atmosphere, \"-rich\") >= 0:\r\n            {set element to token(reportbody.atmosphere, \"-rich\", \"\")}\r\n            {set desc to OneOf(\"I detect a \", \"There is a \", \"Sensors detect a\")}\r\n            {OneOf(\"{desc} {pressdesc} {reportbody.atmosphere} atmosphere\", \"The {pressdesc} atmosphere is {reportbody.atmosphere}\", \"The {pressdesc} atmosphere is rich in {element}\")}\r\n        |elif find(reportbody.atmosphere, \"vapour\") >= 0:\r\n            {OneOf(\"The {pressdesc} atmosphere is composed of {reportbody.atmosphere}s\", \"The {pressdesc} atmosphere is rich in {reportbody.atmosphere}s\", \"The {pressdesc} atmosphere contains high levels of {reportbody.atmosphere}s\")}\r\n        |elif reportbody.planetClass.invariantName = \"Earth-like world\":\r\n            The atmosphere is similar to Earth's, \r\n        |else:\r\n            {set mostly to OneOf(\"primarily\", \"mainly\", \"mostly\")}\r\n            {OneOf(\"The {pressdesc} atmosphere is composed {mostly} of\", \"Most prevalent in the {pressdesc} atmosphere is\")}\r\n            {reportbody.atmosphere}\r\n        }\r\n        { if reportAtmoPressure > 0:\r\n            with a surface pressure of {Humanise(reportbody.pressure)} Earth atmospheres\r\n        }\r\n        {if reportbody.temperature && reportAtmoTempScale < 3:\r\n            {set temp to: {TempCalc(reportbody.temperature)}}\r\n            {if find(temp, \"-\") >= 0: \r\n                {set temp to cat(temp*-1, tempscale, \"below zero\")}\r\n            |else:\r\n                {set temp to cat(temp, tempscale)}\r\n            }\r\n            with an average surface temperature of {temp}\r\n        }.\r\n    }\r\n}",
      "default": true,
      "name": "Body atmosphere report",
      "description": "Reporta a atmosfera do corpo em questão"
    },
    "Body mapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Mapeamento de\", \"Mapa {Occasionally(2, 'da superfície')} de\")}\r\n{Occasionally(2, \"corpo {P(event.name)}\")}\r\n{OneOf(\"está\", \"agora está\")}\r\n{OneOf(\"completo\", \"finalizado\")}.\r\n\r\n{if event.probesused <= event.efficiencytarget:\r\n    Bônus de eficiência {OneOf(\"recebido\", \"concedido\")}.\r\n}",
      "default": true,
      "name": "Body mapped",
      "description": "Triggered after mapping a body with the Surface Area Analysis scanner"
    },
    "Body materials report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{set reportMats to 2} {_ Set to 0 if you only want to hear about materials below your minimum inventory level _}\r\n                      {_ Set to 1 if you also want to hear about materials below your desired inventory level _}\r\n                      {_ Set to 2 if you want to hear about all materials on the body _}\r\n\r\n{set reportMatConc to 2} {_ Set to 0 if you do not want to hear about material percent concentrations _}\r\n                         {_ Set to 1 if you only want to hear about great material percent concentrations _}\r\n                         {_ Set to 2 if you want to hear about good and great material percent concentrations _}\r\n                         {_ Set to 3 if you want to hear about all material percent concentrations _}\r\n\r\n\r\n{_ Fetch from context }\r\n{if event:\r\n    {set reportbody to BodyDetails(event.name, system.name)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    {_ If it's still not possible to get the body name...  _}\r\n    Não \r\n    {OneOf(\"estou certo\",\"tenho certeza\")}\r\n    sobre qual corpo você \r\n    {OneOf(\"perguntando\",\"se referindo\")}.\r\n\r\n|else:\r\n    {_ Define a function to obtain a material from inventory}\r\n    {set _inventory(required) to:\r\n        {for material in materials:\r\n            {if material.material = required:\r\n                {return material}\r\n            }\r\n        }\r\n    }\r\n\r\n    {if reportbody.landable:\r\n\r\n        {set goodmaterials to []}\r\n        {set greatmaterials to []}\r\n        {set allmaterials to []}\r\n        {for material in reportbody.materials:\r\n            {set inventoryMat to _inventory(material.material)}\r\n            {if (reportMats >= 0 && inventoryMat.amount < inventoryMat.minimum && inventoryMat.minimum > 0)\r\n              || (reportMats >= 1 && inventoryMat.amount < inventoryMat.desired && inventoryMat.desired > 0)\r\n              || (reportMats >= 2):\r\n                {if material.percentage >= material.definition.greatpctbody:\r\n                    {set greatmaterials to cat(greatmaterials, [material])}\r\n                |elif material.percentage >= material.definition.goodpctbody:\r\n                    {set goodmaterials to cat(goodmaterials, [material])}\r\n                |else:\r\n                    {set allmaterials to cat(allmaterials, [material])}\r\n                }\r\n            }\r\n        }\r\n\r\n        {if len(goodmaterials) > 0 || len(greatmaterials) > 0 || len(allmaterials) > 0:\r\n            {if !body:\r\n                {F(\"Body Name Tidy\")}\r\n                {body}\r\n            |else:\r\n                Este corpo\r\n            }\r\n            contém\r\n\r\n            {if len(greatmaterials) > 0:\r\n                níveis muito altos de\r\n                {set cur to 0}\r\n                {set length to len(greatmaterials) - 1}\r\n                {while cur < len(greatmaterials):\r\n                    {P(greatmaterials[cur].material)}\r\n                    {if reportMatConc > 0: a {round(greatmaterials[cur].percentage, 1)}% }\r\n                    {set cur to cur + 1}\r\n                    {if cur = length: e\r\n                    |elif cur < length:,\r\n                    }\r\n                }\r\n            }\r\n\r\n            {if len(goodmaterials) > 0:\r\n                {if len(greatmaterials) > 0: e }\r\n                altos níveis de\r\n                {set cur to 0}\r\n                {set length to len(goodmaterials) - 1}\r\n                {while cur < len(goodmaterials):\r\n                    {P(goodmaterials[cur].material)}\r\n                    {if reportMatConc > 1: a {round(goodmaterials[cur].percentage, 1)}% }\r\n                    {set cur to cur + 1}\r\n                    {if cur = length: e\r\n                    |elif cur < length:,\r\n                    }\r\n                }\r\n            }\r\n\r\n            {if len(greatmaterials) > 0 || len(goodmaterials) > 0:. }\r\n\r\n            {if len(allmaterials) > 0 && reportMats >= 2:\r\n                {if len(greatmaterials) > 0 || len(goodmaterials) > 0:\r\n                    E também é {OneOf(\"composto de\",\"feito de\")}\r\n                |else:\r\n                    níveis moderados de\r\n                }\r\n                {set cur to 0}\r\n                {set length to len(allmaterials) - 1}\r\n                {while cur < len(allmaterials):\r\n                    {P(allmaterials[cur].material)}\r\n                    {if reportMatConc > 2: a {round(allmaterials[cur].percentage, 1)}% }\r\n                    {set cur to cur + 1}\r\n                    {if cur = length: e\r\n                    |elif cur < length:,\r\n                    }\r\n                }.\r\n            }\r\n        }\r\n    }\r\n}",
      "default": true,
      "name": "Body materials report",
      "description": "Report on the materials available from the contextual body"
    },
    "Body Name Tidy": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Body Name Tidy _}\r\r\n{_ Tidy up body names _}\r\r\n{_ If the body name contains the system name, it is removed _}\r\r\n{_ Adds Star, Planet, or Moon depending on body location within the system _}\r\r\n{_ Corrects pronunciation of letters in body names. No more 'hour' for 'h' with some TTS voices _}\r\r\n{_ Returns 'body' and 'body_type 'for use in other scripts _}\r\r\n\r\r\n\r\r\n{if len(reportbody.shortname) = 0:\r\r\n    {if event:\r\r\n        {set reportbody to BodyDetails(event.name, system.name)}\r\r\n    |elif reportbody.stellarclass:\r\r\n        {set reportbody to BodyDetails(state.eddi_context_star_name, state.eddi_context_star_system)}\r\r\n    |else:\r\r\n        {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_system_system)}\r\r\n    }\r\r\n}\r\r\n\r\r\n{set body to reportbody.name}\r\r\n{set system to reportbody.systemname}\r\r\n{set type to reportbody.type}\r\r\n{set parent to BodyDetails(slice(body, 0, len(body)-2), system).type}\r\r\n\r\r\n{if body = system:\r\r\n    {set body to \"Estrêla principal\"}\r\r\n    {set body_type to \"Estrêla\"}\r\r\n\r\r\n|elif find(body, system) > -1:\r\r\n\r\r\n    {_ Remove system name from the body name _}\r\r\n    {if len(reportbody.shortname) > 0:\r\r\n        {set body to reportbody.shortname}\r\r\n    |else:\r\r\n        {set body to slice(body, len(system)+1)}\r\r\n    }\r\r\n\r\r\n    {_ Remove Ring designation if it's a ring _}\r\r\n    {if find(body, \"Ring\") > -1:\r\r\n        {set body to split(body, \" \") _}\r\r\n        {set body to join(except(body, [len(body)-1:\"\", len(body)-2:\"\"]), \" \")}\r\r\n    }\r\r\n\r\r\n    {_ Replacing spaces with dashes makes letters spoken as alphabetic letters _}\r\r\n    {set body to ucase(join(split(body, \" \"), \"-\"))}\r\r\n    {set last_char to ord(slice(body, len(body)-1))}\r\r\n\r\r\n    {if find(body, \"+\") > -1:\r\r\n        {set body to List(split(body, \"+\"))}\r\r\n        {set body_type to \"Planetas\"}\r\r\n    |elif type = \"Star\" || (last_char > 64 && find(body, \"-\", 1) = -1):\r\r\n        {set body_type to \"Estrêla\"}\r\r\n    |elif parent = \"Planet\" || last_char > 64:\r\r\n        {set body_type to \"Lua\"}\r\r\n    |elif type = \"Planet\" || last_char > 48:\r\r\n        {set body_type to \"Planeta\"}\r\r\n    }\r\r\n\r\r\n    {set body to cat(body_type, \"-\", body)}\r\r\n}",
      "default": true,
      "name": "Body Name Tidy",
      "description": "Função para encurtar nomes de corpos, e pornunciar letras dos nomes dos corpos"
    },
    "Body report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{set reportGravity to 1}        {_ Set to 1 to report the body's gravity. _}\r\n{set reportTerraformState to 1} {_ Set to 1 to report the body's terraform state. _}\r\n{set reportRings to 1}          {_ Set to 1 to report the body's rings. _}\r\n{set reportRadius to 1}         {_ Set to 1 to report the body's radius. _}\r\n{set reportMass to 1}           {_ Set to 1 to report the body's mass. _}\r\n{set reportRotation to 1}       {_ Set to 1 to report the body's rotation. _}\r\n{set reportVolcanism to 1}      {_ Set to 1 to report the body's volcanism. _}\r\n{set reportAtmosphere to 1}     {_ Set to 1 to report the body's atmosphere. _}\r\n{set reportMaterials to 1}      {_ Set to 1 to report the body's materials. _}\r\n{set reportScanValue to 1}      {_ Set to 1 to report the body's estimated value. _}\r\n\r\n\r\n{_ Fetch from context }\r\n{if event:\r\n    {set reportbody to BodyDetails(event.name, system.name)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    {_ If it's still not possible to get the body name...  _}\r\n    Não\r\n    {OneOf(\"estou certo\",\"tenho certeza\")}\r\n    sobre qual corpo você está\r\n    {OneOf(\"perguntando\",\"se referindo\")}.\r\n\r\n|else:\r\n    {set compare(stat) to:\r\n        {if stat > 0.95 && stat < 1.05:\r\n            {OneOf(\"aproximadamente\",\"mais ou menos\",\"quase\")} igual a \r\n        |elif stat > 1:\r\n            {Humanise(stat)} vezes\r\n        |elif stat < 1:\r\n            {if stat > 0.89: {OneOf(\"fractionally\",\"just\")}}\r\n            menos que\r\n        }\r\n\r\n        {if stat < 0.01:\r\n            um porcento\r\n        |elif stat < 0.1:\r\n            dez porcento\r\n        |elif stat < 0.2:\r\n            um quinto\r\n        |elif stat < 0.3:\r\n            um terço\r\n        |elif stat < 0.4:\r\n            quarenta porcento\r\n        |elif stat < 0.5:\r\n            metade\r\n        |elif stat < 0.6:\r\n            dois terços\r\n        |elif stat < 0.7:\r\n            setenta porcento\r\n        |elif stat < 0.8:\r\n            oitenta porcento\r\n        |elif stat < 0.9:\r\n            noventa porcento\r\n        }\r\n    }\r\n\r\n    {set class_check(body) to:\r\n        {_ Fix roman numerals being spoken as letters _}\r\n        {set body_array to split(body, \" \")}\r\n        {set pos to find(body_array, \"Class\") + 1}\r\n\r\n        {if pos > 0:\r\n            {if body_array[pos] = \"I\":\r\n                {set num to 1}\r\n            |elif body_array[pos] = \"II\":\r\n                {set num to 2}\r\n            |elif body_array[pos] = \"III\":\r\n                {set num to 3}\r\n            |elif body_array[pos] = \"IV\":\r\n                {set num to 4}\r\n            |elif body_array[pos] = \"V\":\r\n                {set num to 5}\r\n            }\r\n            {set body to token(body, \" \", pos, num)}\r\n        }\r\n        {body}\r\n    }\r\n\r\n    {F(\"Body Name Tidy\")}\r\n    {body} tem\r\n\r\n    {if reportgravity > 0:\r\n        {if reportbody.gravity < 0.5:\r\n            baixa gravidade,\r\n        |elif reportbody.gravity < 2:\r\n            gravidade média,\r\n        |elif reportbody.gravity < 4:\r\n            gravidade alta,\r\n        |else:\r\n            gravidade altíssima,\r\n        }\r\n    |else:\r\n        é um\r\n    }\r\n\r\n    {if reportTerraformState = 1:\r\n        {if reportbody.terraformstate = \"Candidate for terraforming\":\r\n            terraformável\r\n        |elif reportbody.terraformstate = \"Terraformed\":\r\n            terraformado\r\n        }\r\n    }\r\n\r\n    {if reportbody.planettype:\r\n        {class_check(reportbody.planettype)}\r\n    |else:\r\n        {body_type}\r\n    }\r\n\r\n    {if reportRings = 1 && len(reportbody.rings) > 0:\r\n        com {if len(reportbody.rings) = 1: uma}\r\n        {if find(reportbody.reserves, \"Pristine\") > -1:\r\n            intocada\r\n        |elif find(reportbody.reserves, \"Major\") > -1:\r\n            rica\r\n        }\r\n        {set ringname to []}\r\n        {set ringcomposition to []}\r\n        {for Ring in reportbody.rings:\r\n            {set ringcomposition to cat(ringcomposition, [Ring.composition])}\r\n        }\r\n        {if len(ringcomposition) > 0:\r\n            {List(ringcomposition)}\r\n        }\r\n        {if find(ringname[0], \"Belt\") > -1: \r\n            {set ring to \"cinturão\"}\r\n        |else:\r\n            {set ring to \"anéis\"}\r\n        }\r\n        {ring}{if len(reportbody.rings) > 1:s}\r\n    }\r\n\r\n    {if reportTerraformState = 1 && reportbody.terraformstate = \"Terraforming\":\r\n      em processo de terraformação\r\n    }\r\n\r\n    {if type(reportbody.landable) != \"void\": \r\n        que é\r\n        {if !reportbody.landable:in}adequado\r\n        para pouso\r\n    }\r\n    . {_ note the full stop}\r\n\r\n    {_ Radius}\r\n    {if reportRadius = 1 && reportbody.radius:\r\n        {set radius to round(reportbody.radius)}\r\n\r\n        Tem um raio de {radius} kilômetros,\r\n\r\n        {set compare_radius to radius / 6371}\r\n        {compare(compare_radius)}\r\n        do {OneOf(\"tamanho\",\"raio\")} da Terra\r\n        {if reportMass = 0:.}\r\n    }\r\n\r\n    {_ Earth Mass}\r\n    {if reportMass = 1 && reportbody.earthmass:\r\n        {if reportRadius = 1 && reportbody.radius:\r\n            e\r\n        |else:\r\n            tem\r\n        }\r\n        {compare(reportbody.earthmass)}\r\n        da massa da Terra.\r\n    }\r\n\r\n    {if reportRotation = 1 && reportbody.rotationalperiod:\r\n        {set rotation to round(reportbody.rotationalperiod, 1)}\r\n        Ele tem um período de rotação \r\n        {if rotation < -20.0:\r\n            retrógrada lenta\r\n        |elif rotation < -0.5:\r\n            retrógrada\r\n        |elif rotation < 0:\r\n            retrógrada rápida\r\n        |elif rotation <= 0.5:\r\n            rápida\r\n        |elif rotation > 20.0:\r\n            lenta\r\n        }\r\n        de {Humanise(rotation)}\r\n        dia{if Humanise(rotation) != \"1\":s}\r\n        {if reportbody.tidallylocked:\r\n           e travado no sentido horário\r\n        }.\r\n    }\r\n\r\n    {if reportVolcanism: {F(\"Body volcanism report\")} }\r\n\r\n    {if reportAtmosphere: {F(\"Body atmosphere report\")} }\r\n\r\n    {if reportMaterials: {F(\"Body materials report\")} }\r\n\r\n    {if reportScanValue: {F(\"Report last scan value\")} }\r\n}\r\n",
      "default": true,
      "name": "Body report",
      "description": "Função para relatar os detalhes do corpo em questão"
    },
    "Body report summary": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n\r\n{set reportTerraformables to 1}         {_ Reports terraformable and terraformed bodies _}\r\n{set reportPlanetTypes to 1}            {_ Reports Earth-like and water worlds _}\r\n{set reportMass to 1}                   {_ Reports notable masses (relative to Earth's) _}\r\n{set reportRadius to 1}                 {_ Reports notable radii (in kilometers) _}\r\n{set reportDensity to 0}                {_ Reports notable densities (in kilograms per cubic meter) _}\r\n{set reportGravity to 1}                {_ Reports notable gravity (in G's) for landable bodies _}\r\n{set reportTemperature to 1}            {_ Reports notable temperatures (in Kelvin) _}\r\n{set reportMaterials to 1}              {_ Reports materials per preferences in the `Body materials` script. _}\r\n{set reportLandableVolcanism to 0}      {_ Reports volcanism on landable worlds _}\r\n{set reportRings to 1}                  {_ Reports ring details _}\r\n{set reportInterestingOrbits to 1}      {_ Reports notable orbital characteristics _}\r\n{set reportRapidRotation to 1}          {_ Reports very fast rotating bodies _}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody: \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{_ Begin processing _}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    {_ If it's still not possible to get the body name...  _}\r\n    Which body are you\r\n    {OneOf(\"asking about\",\"referring to\")}?\r\n\r\n|else:\r\n\r\n    {set notables to []}\r\n\r\n    {if reportInterestingOrbits:\r\n\r\n        {set orbitNotables to []}\r\n\r\n        {if reportbody.eccentricityprobability:\r\n            {if reportbody.eccentricityprobability > 99.9:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"incredibly \", OneOf(\"elliptical\", \"oblong\", \"elongated\"))])}\r\n            |elif reportbody.eccentricityprobability > 99:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"extremely \", OneOf(\"elliptical\", \"oblong\", \"elongated\"))])}\r\n            |elif reportbody.eccentricityprobability > 97:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"unusually \", OneOf(\"elliptical\", \"oblong\", \"elongated\"))])}\r\n            }\r\n        }\r\n\r\n        {if reportbody.inclinationprobability:\r\n            {if reportbody.inclinationprobability > 99.9:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"incredibly inclined\")])}\r\n            |elif reportbody.inclinationprobability > 99:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"extremely inclined\")])}\r\n            |elif reportbody.inclinationprobability > 97:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"unusually inclined\")])}\r\n            }\r\n        }\r\n\r\n        {if reportbody.orbitalperiodprobability:\r\n            {if reportbody.orbitalperiod < 0: {set retrograde to cat(\" \", \"retrograde\", \" \")} }\r\n            {if reportbody.orbitalperiodprobability < 0.1:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"incredibly fast\", retrograde)])}\r\n            |elif reportbody.orbitalperiodprobability < 1:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"extremely fast\", retrograde)])}\r\n            |elif reportbody.orbitalperiodprobability < 3:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"unusually fast\", retrograde)])}\r\n            }\r\n        }\r\n\r\n        {if len(orbitNotables) > 0:\r\n            {if StartsWithVowel(orbitNotables[0]): {set a to \"an\"} |else: {set a to \"a\"} }\r\n            {set cur to 0}\r\n            {set length to len(orbitNotables) - 1}\r\n            {while cur < len(orbitNotables):\r\n                {set orbitdescription to cat(orbitdescription, orbitNotables[cur])}\n                {set cur to cur + 1}\n                {if cur = length: \r\n                    {set orbitdescription to cat(orbitdescription, \" and \")}\n                |elif cur < length:\r\n                    {set orbitdescription to cat(orbitdescription, \", \")}\n                }\n            }\r\n            {set notables to cat(notables, [cat(a, \" \", orbitdescription, \" \", \"orbit\")])}\r\n        }\r\n    }\r\n\r\n    {if reportbody.rotationalperiod < 0: {set retrograde to cat(\" \", \"retrograde\", \" \")} }\r\n    {if reportRapidRotation && reportbody.rotationalperiodprobability:\r\n        {if !retrograde && reportbody.rotationalperiodprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly short rotational period of \", Humanise(reportbody.rotationalperiod), \" days\")])}\r\n        |elif !retrograde && reportbody.rotationalperiodprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely short rotational period of \", Humanise(reportbody.rotationalperiod), \" days\")])}\r\n        |elif !retrograde && reportbody.rotationalperiodprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually short rotational period of \", Humanise(reportbody.rotationalperiod), \" days\")])}\r\n        }\r\n    }\r\n\r\n    {if reportMass && reportbody.massprobability:\r\n        {if reportbody.massprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly low mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n        |elif reportbody.massprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely low mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n        |elif reportbody.massprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually low mass at \", Humanise(reportbody.earthmass), \" times Earth's \")])}\r\n        |elif reportbody.massprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an incredibly high mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n        |elif reportbody.massprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an extremely high mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n        |elif reportbody.massprobability > 97:\r\n            {set notables to cat(notables, [cat(\"an unusually high mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n        }\r\n    }\r\n\r\n    {if reportRadius && reportbody.radiusprobability:\r\n        {if reportbody.radiusprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly low radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n        |elif reportbody.radiusprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely low radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n        |elif reportbody.radiusprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually low radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n        |elif reportbody.radiusprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an extremely high radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n        |elif reportbody.radiusprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an incredibly large radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n        |elif reportbody.radiusprobability > 97:\r\n            {set notables to cat(notables, [cat(\"an unusually high radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n        }\r\n    }\r\n\r\n    {if reportTemperature && reportbody.tempprobability:\r\n        {if reportbody.tempprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly low surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely low surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually low surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an extremely high surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an incredibly high surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability > 97:\r\n            {set notables to cat(notables, [cat(\"an unusually high surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        }\r\n    }\r\n\r\n    {if reportGravity && reportbody.landable && reportbody.gravityprobability:\r\n        {if reportbody.gravityprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly low gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n        |elif reportbody.gravityprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely low gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n        |elif reportbody.gravityprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually low gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n        |elif reportbody.gravityprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an incredibly high gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n        |elif reportbody.gravityprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an extremely high gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n        |elif reportbody.gravityprobability > 97:\r\n            {set notables to cat(notables, [cat(\"an unusually high gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n        }\r\n    }\r\n\r\n    {if reportDensity && reportbody.densityprobability:\r\n        {if reportbody.densityprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly low density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely low density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually low density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an incredibly high density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an extremely high density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability > 97:\r\n            {set notables to cat(notables, [cat(\"an unusually high density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        }\r\n    }\r\n\r\n    {if reportVolcanism:\r\n        {if reportbody.volcanism && reportbody.landable:\r\n            {set notables to cat(notables, [cat(OneOf(\"volcanic\", \"tectonic\"), \" activity\")])}\r\n        }\r\n    }\r\n\r\n    {if reportRings:\r\n        {if reportbody.rings:\r\n            {set ringcompositions to []}\r\n            {set cur to 0}\r\n            {for ring in reportbody.rings:\r\n                {if find(ring.name, \"Ring\") > -1:\r\n                    {if find(ringcompositions, ring.composition) = -1:\r\n                        {set ringcompositions to cat(ringcompositions, [cat(ring.composition)])}\r\n                    }\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n            {set cur to 0}\r\n            {set length to len(ringcompositions) - 1}\r\n            {while cur < len(ringcompositions):\r\n                {set ringsdescription to cat(ringsdescription, ringcompositions[cur])}\n                {set cur to cur + 1}\n                {if cur = length: \r\n                    {set ringsdescription to cat(ringsdescription, \" and \")}\n                |elif cur < length:\r\n                    {set ringsdecription to cat(ringsdescription, \", \")}\n                }\n            }\r\n            {if ringsdescription:\r\n                {if len(ringcompositions) = 1:\r\n                    {if StartsWithVowel(reportbody.reserves): \r\n                        {set a to \"an \"} \r\n                    |else: \r\n                        {set a to \"a \"}\r\n                    }\r\n                    {set rings to \"ring\"}\r\n                |else:\r\n                    {set rings to \"rings\"} \r\n                }\r\n                {if reportbody.reserveLevel.invariantName != \"None\": \r\n                    {set reserves to reportbody.reserves}\r\n                }\r\n                {set notables to cat(notables, [cat(a, \" \", reserves, \" \", ringsdescription, \" \", rings)])}\r\n            }\r\n        }\r\n    }\r\n\r\n    {if reportTerraformables:\r\n        {if reportbody.terraformState.invariantName = \"Candidate for terraforming\":\r\n            {set notables to cat(notables, [OneOf(\"potential for terraforming\", \"terraformable conditions\")])}\r\n        |elif reportbody.terraformState.invariantName = \"Terraformed\":\r\n            {set notables to cat(notables, [\"terraformed conditions\"])}\r\n        }\r\n    }\r\n\r\n    {if reportPlanetTypes:\r\n        {if reportbody.planetClass.invariantName = \"Earth-like world\":\r\n            {set notables to cat(notables, [\"Earth-like conditions\"])}\r\n        |elif reportbody.planetClass.invariantName = \"Water world\":\r\n            {set notables to cat(notables, [OneOf(\"abundant liquid water\", \"abundant liquid water at the surface\")])}\r\n        }\r\n    }\r\n\r\n    {_ Begin speaking _}\r\n\r\n    {if !reportbody.name || reportbody.name = \"\":\r\n\r\n        I'm not sure which body you are asking about.\r\n\r\n    |else:\r\n\r\n        {if len(notables) > 0:\r\n            {if reportbody.shortname != reportbody.bodyname:\r\n                {if reportbody.bodytype:\r\n                    {reportbody.bodytype}\r\n                |else:\r\n                    Body\r\n                }\r\n                {P(reportbody.shortname)}\r\n            |else:\r\n                {P(reportbody.bodyname)}\r\n            }\r\n            is\r\n\r\n            {if len(notables) = 1:\r\n                {set desc to \"notable\"}\r\n            |elif len(notables) = 2:\r\n                {set desc to OneOf('interesting', 'notable', 'remarkable')}\r\n            |elif len(notables) = 3:\r\n                {set desc to OneOf('exceptional', 'remarkable')}\r\n            |elif len(notables) = 4:\r\n                {set desc to OneOf('extraordinary')}\r\n            |elif len(notables) >= 5:\r\n                {set desc to OneOf('one of a kind', 'unique')}\r\n            }\r\n            {OneOf(\"{desc},\", \"{if StartsWithVowel(desc): an |else: a } {desc} {P(reportbody.planettype)}\")}\r\n\r\n            {if len(notables) = 1:\r\n                with {notables[0]}.\r\n            |elif len(notables) = 2:\r\n                with {notables[0]} and {notables[1]}.\r\n            |elif len(notables) = 3:\r\n                with {notables[0]}, {notables[1]} and {notables[2]}.\r\n            |elif len(notables) = 4:\r\n                with {notables[0]}, {notables[1]}, {notables[2]}, and {notables[3]}.\r\n            |elif len(notables) >= 5:\r\n                with {notables[0]}, {notables[1]}, {notables[2]}, {notables[3]}, and {notables[4]}.\r\n            }\r\n        }\r\n\r\n        {if reportMaterials:\r\n            {F(\"Body materials report\")}\r\n        }\r\n    }\r\n}",
      "default": true,
      "name": "Body report summary",
      "description": "Function to report on summary details of the contextual body"
    },
    "Body scanned": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'body')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_body_system', system.name)}\r\n{SetState('eddi_context_body_name', event.name)}\r\n{SetState('eddi_context_last_scan_estimated_value', event.estimatedvalue)}\r\n\r\n\r\n{if state.lastscanbody != event.name:\r\n\r\n    {if event.estimatedvalue:\r\n        {SetState(\"eddi_context_system_value\", state.eddi_context_system_value + event.estimatedvalue)}\r\n        {SetState(\"eddi_context_session_scan_value\", state.eddi_context_session_scan_value + event.estimatedvalue)}\r\n    }\r\n\r\n    {Pause(1000)}\r\n\r\n    {OneOf(\"Varredura\", \"Análise\", \"Varredura e análise\")}\r\n    {Occasionally(3, \"do corpo\")} {OneOf(\"concluída\", \"finalizada\")}.\r\n\r\n    {if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n        {F(\"Body report\")}\r\n    }\r\n\r\n    {SetState('lastscanbody', event.name)}\r\n}\r\n",
      "default": true,
      "name": "Body scanned",
      "description": "Triggered when you complete a scan of a planetary body"
    },
    "Body volcanism report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "\r\n{_ Fetch from context }\r\n{if event:\r\n    {set reportbody to BodyDetails(event.name, system.name)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    {_ If it's still not possible to get the body name...  _}\r\n    Não \r\n    {OneOf(\"tenho certeza\",\"estou certo\")}\r\n    sobre qual corpo você está\r\n    {OneOf(\"perguntando\",\"se referindo\")}.\r\n\r\n|else:\r\n    {if (reportbody.volcanism && len(reportbody.volcanism) > 0):\r\n\r\n        {if !body:\r\n            {F(\"Body Name Tidy\")}\r\n            {body} tem\r\n        |else:\r\n            {OneOf(\"Sensores detectam\", \"Este {body_type} tem\")}\r\n        }\r\n\r\n        {if reportbody.volcanism.type = \"Geysers\":\r\n            {set amount to \"número\"}\r\n            {set type to \"Gêiseres\"}\r\n        |else:\r\n            {set amount to \"nível\"}\r\n            {set type to OneOf(\"e fluxo de lava\", \"e fluxo de mágma\")}\r\n        }\r\n\r\n        {if reportbody.volcanism.invariantAmount = \"Major\":\r\n            grande {amount} de\r\n        |elif reportbody.volcanism.invariantAmount = \"Minor\":\r\n            baixo {amount} de\r\n        }\r\n        {reportbody.volcanism.composition} {type} ativos \r\n        {Occasionally(2, \"na superfície\")}.\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Body volcanism report",
      "description": "Relata sobre vulcanismo no corpo em questão"
    },
    "Bond awarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bond')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.awardingfaction)}\r\n\r\n{_ Update Fines & Bounties}\r\n{F(\"FinesBounties_Add\")}\r\n\r\n{OneOf(\"Alvo\",\"Inimigo combatente\",\"Adversário\",\"Contendor\",\"Inimigo\",\"Alvo da {event.victimfaction}\",\"piloto da {event.victimfaction}\")}\r\n{OneOf(\"destruído\",\"eliminado\",\"destroçado\",\"abatido\")},\r\n\r\n{OneOf(\"Aqui estão {event.reward} créditos\",\"{event.reward} créditos recebidos\",\"{event.reward} créditos a mais pra conta\",\"{event.reward} créditos coletados\")}\r\n\r\n{Occasionally(3,\"da {event.awardingfaction}\")}.\r\n\r\n{Pause(250)}\r\n\r\n{Occasionally(20,\"Todd Dê Bléster MacQuinn ficaria orgulhoso!\")}\r\n\r\n{Occasionally(3,\"{OneOf('Fique de olho em sua retaguarda','Se liga aqui fora','Cuide a retaguarda','Escolha seu próximo alvo')} Comandante!\")}",
      "default": true,
      "name": "Bond awarded",
      "description": "Triggered when you are awarded a combat bond"
    },
    "Bond redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }                                                                                                                                                         \r\n{SetState('eddi_context_last_subject', 'bond')}                                                                                                                      \r\n{SetState('eddi_context_last_action', 'redeem')}                                                                                                                     \r\n{SetState('eddi_context_bond_amount', event.amount)}                                                                                                                 \r\n                                                                                                                                                                     \r\n{_ Update Fines & Bounties}\r\n{F(\"FinesBounties_Delete\")}\r\n\r\n\r\nPagamentos de combate de {Humanise(event.amount)} créditos \r\nforam \r\n{OneOf(\"resgatados\", \"recebidos\")}\r\n\r\n{Occasionally(2, \"\r\n   {if len(event.rewards) = 1:\r\n      from {event.rewards[0].faction}\r\n   |else:\r\n      , com\r\n      {set cur to 0}\r\n      {set length to len(event.rewards) - 1}\r\n      {while cur < len(event.rewards):\r\n         {Humanise(event.rewards[cur].amount)} créditos da\r\n         {event.rewards[cur].faction}\r\n         {set cur to cur + 1}\r\n         {if cur = length: e\r\n         |elif cur < length:,\r\n         }\r\n      }\r\n   }\r\n\")}.\r\n\r\n{if event.brokerpercentage && event.brokerpercentage > 0:\r\n   depois de deduzir {OneOf(\"um pagamento\", \"taxas\")} de\r\n   {ceil((event.amount / (100 - event.brokerpercentage)) * event.brokerpercentage)} créditos.\r\n}\r\n\r\n",
      "default": true,
      "name": "Bond redeemed",
      "description": "Triggered when you redeem a combat bond"
    },
    "Bounty awarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bounty_name', event.target)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.reward)}\r\n\r\n{_ Update Fines & Bounties}\r\n{F(\"FinesBounties_Add\")}\r\n\r\n{Pause(500)}\r\n{if len(event.rewards) = 1:\r\n   {OneOf(\"Vale\",\"Tíquet\")} recompensa de {Humanise(event.reward)} créditos \r\n   {OneOf(\"recebidos da\",\"concedidos pela\")} {event.rewards[0].faction}\r\n|elif len(event.rewards) > 1:\r\n   {len(event.rewards)} {OneOf(\"vales\",\"tíquets\")} recompensas {OneOf(\"recebidos\",\"concedidos\")} n{OneOf(\"o total\",\"a soma\")} \r\n   de {Humanise(event.reward)} créditos \r\n   {set cur to 0}\r\n   {set length to len(event.rewards) - 1}\r\n   {for rewards in event.rewards:\r\n      {set FACCAO to: {rewards.faction}}\r\n      {if rewards.faction = \"Alliance\" || rewards.faction = \"Empire\" || rewards.faction = \"Federation\": }\r\n      {if rewards.faction = \"Alliance\": {set FACCAO to: Aliança}}\r\n      {if rewards.faction = \"Empire\": {set FACCAO to: Império}}\r\n      {if rewards.faction = \"Federation\": {set FACCAO to: Federação}} \r\n      da {FACCAO}\r\n      {set cur to cur + 1}\r\n      {if cur = length: e\r\n      |elif cur < length:,\r\n      }\r\n   }\r\n}\r\n\r\n{if event.shared: {OneOf(\"para compartilhar com,\",\"a ser compartilhado com\")} seus colegas de esquadrão,}\r\n\r\npela {OneOf(\"destruição\",\"eliminação\")} do\r\n\r\n{OneOf(\"seu alvo,\",\"alvo\")}\r\n\r\n{if event.target = \"skimmer\":\r\n   {P(event.faction)} Skimmer\r\n|else:\r\n   {set shiptype to ShipDetails(event.target).model}\r\n   {F(\"TargetType\")}\r\n   {Occasionally(2,\"{Occasionally(2,'{P(ShipDetails(event.target).manufacturer)}')} {P(shiptype)}\")}\r\n   {Occasionally(2,\", uma nave {OneOf('criminosa','procurada','criminosa procurada')} \")}\r\n   {Occasionally(2,\"{OneOf('aliada à','membro da')} {P(event.faction)}\")}\r\n}.\r\n\r\n",
      "default": true,
      "name": "Bounty awarded",
      "description": "Triggered when you are awarded a bounty"
    },
    "Bounty incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_bounty_name', event.victim)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.bounty)}\r\n\r\n{_ Update Fines & Bounties}\r\n{F(\"FinesBounties_Add\")}\r\n\r\n{set FACCAO to: {P(event.faction)}}\r\n{if FACCAO = \" The Pilots Federation\": {set FACCAO to: Federação de Pilotos}}\r\n\r\n{OneOf(\"A {FACCAO} acabou de pôr sua cabeça a prêmio por {event.bounty} créditos, por {event.crime}\",\r\n       \"Você {OneOf('levou','recebeu')} uma recompensa de {event.bounty} créditos\r\n       {OneOf('da {FACCAO} por {event.crime}','por {event.crime}, da {FACCAO}')}\"\r\n       )}.\r\n",
      "default": true,
      "name": "Bounty incurred",
      "description": "Triggered when you incur a bounty"
    },
    "Bounty paid": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'pay')}\r\n{SetState('eddi_context_fine_amount', event.amount)}\r\n\r\n\r\nRecompensa de {Humanise(event.amount)} créditos paga.\r\n\r\n{_ Update Fines & Bounties}\r\n{F(\"FinesBounties_Delete\")}\r\n\r\n{if event.brokerpercentage:\r\n  {Pause(1000)}\r\n  O agente ficou comhe\r\n  {floor((event.amount / (100 - event.brokerpercentage)) * event.brokerpercentage)} créeditos.\r\n}",
      "default": true,
      "name": "Bounty paid",
      "description": "Triggered when you pay a bounty"
    },
    "Bounty redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_bounty_amount', event.amount)}\r\n\r\n{_ Update Fines & Bounties}\r\n{F(\"FinesBounties_Delete\")}\r\n\r\nVales recompensas no valor de {Humanise(event.amount)} créditos recolhidos\r\n\r\n{if len(event.rewards[0].faction) > 0:\r\n    {Occasionally(2, \"pela \r\n        {set cur to 0}\r\n        {set length to len(event.rewards) - 1}\r\n        {while cur < len(event.rewards):\r\n            {set faction to event.rewards[cur].faction}\r\n            {if faction = 'Alliance' || faction = 'Empire' || faction = 'Federation': a}\r\n            {if faction = 'The Pilots Federation': {set faction to: Federação de Pilotos}}\r\n            {if faction = 'Alliance': {set faction to: Aliança}}\r\n            {if faction = 'Federation': {set faction to: Federação}}\r\n            {if faction = 'Empire': {set faction to: Império}}\r\n            {faction}\r\n            {set cur to cur + 1}\r\n            {if cur = length: e\r\n            |elif cur < length:,\r\n            }\r\n        }\r\n    \")}\r\n}\r\n\r\n{if event.brokerpercentage && event.brokerpercentage > 0:\r\n    após deduzir \r\n    {OneOf(\"pagamentos\", \"taxas\")} de\r\n    {ceil((event.amount / (100 - event.brokerpercentage)) * event.brokerpercentage)} créditos.\r\n}.\r\n\r\n",
      "default": true,
      "name": "Bounty redeemed",
      "description": "Triggered when you redeem a bounty voucher"
    },
    "Cargo depot": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Cargo depot }\n{_ Triggered when engaging with a mission depot }\n\n\n{if event.updatetype = \"Collect\":\n    Você coletou {event.amount} tonelada{if event.amount != 1:s} de {event.commodity} do depósito da missão.\n|elif event.updatetype = \"Deliver\":\n    Você entregou {event.amount} tonelada{if event.amount != 1:s} de {event.commodity} ao depósito da missão.\n\n    {Pause(200)}\n    {set remaining to event.totaltodeliver - event.delivered}\n    {set haulage to HaulageDetails(event.missionid)}\n\n    Requerimentos da missão \n    {if find(haulage.name, \"Wing\") > -1:\n        de Esquadrão\n    |elif find(haulage.name, \"Rank\") > -1:\n        Naval\n    |else:\n        Solo\n    }\n\n    {if remaining = 0:\n        foram concluídos.\n    |else:\n        está agora {round(event.delivered / event.totaltodeliver * 100, 0)} porcento concluída.\n    }\n}\n\n\n",
      "default": true,
      "name": "Cargo depot",
      "description": "Triggered when engaging with a mission depot"
    },
    "Cargo inventory": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Cargo inventory",
      "description": "Triggered when you obtain an inventory of your cargo"
    },
    "Cargo report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Cargo report }\r\n{_ Report current cargo manifest }\r\n\r\n{set cargocarried to 0}\r\n{set haulage to 0}\r\n{set illegal to false}\r\n{set stolen to false}\r\n\r\n{if len(inventory) > 0:\r\n    {for cargo in inventory:\r\n        {set cargocarried to cargocarried + cargo.total}\r\n        {set haulage to haulage + cargo.haulage}\r\n        {if cargo.stolen > 0: {set stolen to true}}\r\n        {if status.docked:\r\n            {for prohibited in station.prohibited:\r\n                {if cargo.name = prohibited: {set illegal to true}}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{if cargocarried > 0:\r\n    {if cargocarried = ship.cargocapacity:\r\n        Seu compartimento de carga está cheio\r\n    |else:\r\n        Você está carregando {cargocarried} tonelada{if cargocarried != 1:s}\r\n    }\r\n\r\n    {if len(inventory) = 1:\r\n        {if inventory[0].name = \"Limpet\":\r\n            de drones.\r\n        |else:\r\n            de {inventory[0].name}.\r\n            {if haulage = cargocarried:\r\n                Detalhe: Toda a carga é relativa à missão.\r\n            }\r\n        }\r\n    |else:\r\n        {if cargocarried < ship.cargocapacity: of cargo}.\r\n        {OneOf(\"Manifesto\", \"Inventário\")} {Occasionally(2, \"de Carga\")} é o seguinte:\r\n\r\n        {set c to []}\r\n        {for cargo in inventory:\r\n            {if cargo.total > 0:\r\n                {set c to cat(c, [cargo])}\r\n            }\r\n        }\r\n\r\n        {set cur to 0}\r\n        {set length to len(c) - 1}\r\n        {for cargo in c:\r\n            {cargo.total} tonelada{if cargo.total != 1:s} de \r\n            {if cargo.name = \"Limpet\":\r\n                drones\r\n            |else:\r\n                {cargo.name}\r\n            }\r\n            {set cur to cur + 1}\r\n            {if cur = length: e\r\n            |elif cur < length:,\r\n            }\r\n        }\r\n        {if haulage > 0:\r\n            . Detalhe: {haulage} tonelada{if haulage != 1:s} do seu manifesto é relativo a missões\r\n        }\r\n    }.\r\n\r\n    {if cargocarried < ship.cargocapacity:\r\n        {set free to ship.cargocapacity - cargocarried}\r\n        Você {OneOf(\"tem {free} tonelada{if free != 1:s} disponível\",\r\n            \"tem {free} tonelada{if free != 1:s} de espaço livre\",\r\n            \"pode carregar um adicional de {free} tonelada{if free != 1:s}\")}.\r\n    }\r\n\r\n    {if stolen || illegal:\r\n        Alerta: Você está carregando\r\n        {if stolen: produtos roubados}\r\n        {if illegal:\r\n            {if stolen:, e }\r\n            produtos que são ilegais nesta jurisdição\r\n        }.\r\n    }\r\n\r\n|else:\r\n    {OneOf(\"Seu compartimento de carga está vazio.\",\"Você não tem carga.\",\"Você não está carregando nada.\")}\r\n}\r\n\r\n",
      "default": true,
      "name": "Cargo report",
      "description": "Report current cargo manifest"
    },
    "Cargo scoop": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Cargo scoop",
      "description": "Triggered when you deploy or retract your cargo scoop"
    },
    "Cargo updated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Cargo updated }\r\n{_ Triggered when the cargo inventory is updated }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'cargo')}\r\n{SetState('eddi_context_last_action', 'updated')}\r\n{SetState('eddi_context_cargo_carried', event.cargocarried)}\r\n",
      "default": true,
      "name": "Cargo updated",
      "description": "Triggered when the cargo inventory is updated"
    },
    "Cargo wingupdate": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Cargo wingupdate }\n{_ Triggered when a wing-mate collects or delivers cargo for a wing mission }\n\n\n{if event.updatetype = \"Collect\":\n    Seu colega de esquadrão coletou {event.amount} tonelada{if event.amount != 1:s}\n    {if event.commodity != \"Unknown\": de {event.commodity}} no depósito da missão.\n|elif event.updatetype = \"Deliver\":\n    Seu colega de esquadrão entregou {event.amount} tonelada{if event.amount != 1:s} \n    {if event.commodity != \"Unknown\": de {event.commodity}} no depósito da missão.\n}\n\n{Pause(500)}\n{set remaining to event.totaltodeliver - event.delivered}\n{if remaining = 0:\n    Requerimentos da missão de esquadrão foram concluídos.\n|elif event.updatetype = \"Deliver\":\n    A missão de esquadrão está agora {round(event.delivered / event.totaltodeliver * 100, 0)} porcento finalizada.\n}\n\n",
      "default": true,
      "name": "Cargo wingupdate",
      "description": "Triggered when a wing-mate collects or delivers cargo for a wing mission"
    },
    "Cleared save": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'save')}\r\n{SetState('eddi_context_last_action', 'clear')}\r\n\r\nApagando {OneOf(\"o sistema\",\"a personalidade\")}. Adeus {F(\"Honorific\")}.  Foi um prazer lhe servir.\r\n\r\n{_ Clear Fines & Bounties}\r\n{F(\"FinesBounties_Initialise\")}\r\n\r\n",
      "default": true,
      "name": "Cleared save",
      "description": "Triggered when you clear your save"
    },
    "Cockpit breached": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'cockpit')}\r\n{SetState('eddi_context_last_action', 'breach')}\r\n\r\nPerigo!\r\n\r\n{OneOf(\"Cabine\",\"Canópla\")}\r\n\r\n{OneOf(\"Violada\",\"com integridade {Occasionally(2,'estrutural')} comprometida!\")}.\r\n\r\n{OneOf(\"Respirador do Rem-lóck\",\"Oxigênio reserva\")} ativado.\r\n\r\n",
      "default": true,
      "name": "Cockpit breached",
      "description": "Triggered when your ship's cockpit is broken"
    },
    "Combat promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'rank')}\r\n{SetState('eddi_context_last_action', 'promotion')}\r\n{SetState('eddi_context_rank_name', 'combat')}\r\n{SetState('eddi_context_rank_amount', event.rating)}\r\n\r\nSuas {OneOf(\"habilidades de combate\",\"habilidades em combate\")} foram reconhecidas {F(\"Honorific\")}.\r\n\r\nVocê {OneOf(\"está agora\",\"chegou\")} no posto de {cmdr.combatrating.name}.\r\n\r\n",
      "default": true,
      "name": "Combat promotion",
      "description": "Triggered when your combat rank increases"
    },
    "Commander continued": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Commander continued }\r\n{_ Triggered when you continue an existing game }\r\n\r\n\r\n{SetState('eddi_context_last_subject', 'load_game')}\r\n{SetState('eddi_context_system_system', system.name)}\r\n{SetState('eddi_context_body_name', body.name)}\r\n{SetState('eddi_context_station_name', station.name)}\r\n{SetState('eddi_context_lastdocked', station.name)}\r\n{SetState('eddi_context_currentshipid', event.shipid)}\r\n\r\n{_ If VoiceAttack is not used, set Auto Route to no, and set default Routing system _}\r\n{if state.eddi_context_mission_route_useauto = \"\" || state.eddi_context_mission_route_useauto = null:\r\n    {SetState('eddi_context_mission_route_useauto', \"no\")}\r\n    {SetState('missionsrouteuseeddi', \"no\")}\r\n}\r\n\r\n{set time to token(format(SecondsSince(0), \"dl:yyyy-MM-dd HH:mm:ss\"), \" \", 1)}\r\n{set time to cast(token(time, \":\", 0), \"n\")}\r\n\r\n{if time < 12: {set GREETING to:m dia}\r\n|elif time > 11 && time <17: {set GREETING to:a tarde}\r\n|else: {set GREETING to:a noite}\r\n}\r\n\r\nBo{GREETING}\r\n\r\n{F(\"Honorific\")}, seja bem vindo.\r\n\r\n{set station to F(\"Mission check station\")}\r\n{set system to F(\"Mission check system\")}\r\n{set expiring to F(\"Mission Check Expiring\")}\r\n\r\n{if station: {station}\r\n|elif system: {system}\r\n|else: {F(\"Mission check galaxy\")}\r\n}\r\n\r\n{if expiring: {expiring}}\r\n\r\n{_ Set up Mission Route from saved data _}\r\n{set missionsdata to split(state.missionsdata, \"+=\")}\r\n{SetState('missionsrouteuseeddi', missionsdata[0])}\r\n{SetState('missionsroutetype', missionsdata[1])}\r\n{SetState('missionsdestination', missionsdata[2])}\r\n{SetState('missionsroutedistance', missionsdata[3])}\r\n{SetState('missionsroute', missionsdata[4])}\r\n\r\n{if missionsCount > 0:\r\n    {SetState('to_system', state.missionsdestination)}\r\n\r\n    {if missionsCount > 1: Destino {OneOf(\"primário\", \"inicial\")} }\r\n    {Occasionally(2,\"de missão\")} {state.to_system},\r\n    {Occasionally(2, \"{OneOf('foi', 'está')}\")} {OneOf(\"travado\", \"configurado\")}.\r\n\r\n    {SetState('from_system', state.eddi_context_system_name)}\r\n    {F(\"Mission Route Get Distance\")}\r\n    {if state.distance > 0:\r\n        Distância {Occasionally(2,\"para o {OneOf('sistema','alvo','{state.to_system}')}\")}\r\n        é de {state.distance)} anos luz.\r\n        {SetState('eddi_context_mission_destination_locked', \"no\")}\r\n    }\r\n}\r\n\r\n{_ Check Fines & Bounties}\r\n{F(\"FinesBounties_CheckShip\")}\r\n{F(\"FinesBounties_CheckContacts\")}\r\n\r\n\r\n{set fixed to false}\r\n{set gimbal to false}\r\n{set turret to false}\r\n{set weapons_array to \"\"}\r\n\r\n{for hp in ship.hardpoints:\r\n\r\n    {if type(hp.module.mount) != \"void\":\r\n        {for index, value in hp.module.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            {SetState('eddi_weapons_fixed', true)}\r\n        |elif mount = 1:\r\n            {SetState('eddi_weapons_gimbal', true)}\r\n        |elif mount = 2:\r\n            {SetState('eddi_weapons_turret', true)}\r\n        }\r\n        {set weapons_array to cat(weapons_array, \"0\", mount, \" \")}\r\n    }\r\n}\r\n\r\n{SetState('eddi_weapons_array', weapons_array)}\r\n\r\n{SetState('loading', true)}\r\n",
      "default": true,
      "name": "Commander continued",
      "description": "Triggered when you continue an existing game"
    },
    "Commander loading": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Commander loading",
      "description": "Triggered at the very beginning of loading a game"
    },
    "Commander progress": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Commander progress",
      "description": "Triggered when your progress is reported"
    },
    "Commander ratings": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Commander ratings",
      "description": "Triggered when your ratings are reported"
    },
    "Commander reputation": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ A note on thresholds... _}\r\n{_ -100.. -90: hostile _}\r\n{_ -90.. -35: unfriendly _}\r\n{_ -35..+ 4: neutral _}\r\n{_ +4..+35: cordial _}\r\n{_ +35..+90: friendly _}\r\n{_ +90..+100: allied _}\r\n",
      "default": true,
      "name": "Commander reputation",
      "description": "Triggered when your reputation is reported"
    },
    "Commander started": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{SetState('eddi_context_last_subject', 'load_game')}\r\n{SetState('eddi_context_system_system', system.name)}\r\n{SetState('eddi_context_body_name', body.name)}\r\n{SetState('eddi_context_station_name', station.name)}\r\n{SetState('eddi_context_lastdocked', station.name)}\r\n{SetState('eddi_context_currentshipid', event.shipid)}\r\n\r\n{_ If VoiceAttack is not used, set Auto Route to no, and set default Routing system _}\r\n{if state.eddi_context_mission_route_useauto = \"\" || state.eddi_context_mission_route_useauto = null:\r\n    {SetState('eddi_context_mission_route_useauto', \"no\")}\r\n    {SetState('missionsrouteuseeddi', \"no\")}\r\n}\r\n\r\n{set time to token(format(SecondsSince(0), \"dl:yyyy-MM-dd HH:mm:ss\"), \" \", 1)}\r\n{set time to cast(token(time, \":\", 0), \"n\")}\r\n\r\n{if time < 12: {set GREETING to:m dia}\r\n|elif time > 11 && time <17: {set GREETING to:a tarde}\r\n|else: {set GREETING to:a noite}\r\n}\r\n\r\nBo{GREETING}\r\n\r\ne bem vindo a bordo {F(\"Honorific\")}.\r\n\r\n{_ Clear Fines & Bounties}\r\n{F(\"FinesBounties_Initialise\")}\r\n",
      "default": true,
      "name": "Commander started",
      "description": "Triggered when you start a new game"
    },
    "Commodity collected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'collect')}\r\n{SetState('eddi_context_cargo_name', event.commodity)}\r\n\r\n{if event.commodity != \"Occupied Escape Pod\":\r\n    {OneOf(\"Contêiner\",\"Cilindro\")}\r\n    {if event.commodity:\r\n        de\r\n    }\r\n}\r\n\r\n{if event.commodity:\r\n    {event.commodity},\r\n}\r\n\r\n{OneOf(\"guardado\",\"carregado\",\"agora\")} {OneOf(\"no compartimento\",\"no compartimento de carga\",\"no compartimento da nave\",\"a bordo\")}.",
      "default": true,
      "name": "Commodity collected",
      "description": "Triggered when you pick up a commodity in your ship or SRV"
    },
    "Commodity ejected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'eject')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n",
      "default": true,
      "name": "Commodity ejected",
      "description": "Triggered when you eject a commodity from your ship or SRV"
    },
    "Commodity purchase check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{for commodity in station.commodities:\r\n    {if commodity.stock > 0 && commodity.buyprice < commodity.avgprice:\r\n        {set discount to commodity.avgprice - commodity.buyprice}\r\n        {if discount > best.avgprice - best.buyprice:\r\n            {set thirdbest to secondbest}\r\n            {set secondbest to best}\r\n            {set best to commodity}\r\n        |elif discount > secondbest.avgprice - secondbest.buyprice:\r\n            {set thirdbest to secondbest}\r\n            {set secondbest to commodity}\r\n        |elif discount > thirdbest.avgprice - thirdbest.buyprice:\r\n            {set thirdbest to commodity}\r\n        }\r\n    }\r\n}\r\n\r\n{if best:\r\n    O mercado local está vendendo {best.name} a um bom preço\r\n    {if secondbest\r\n       , bem como {secondbest.name}\r\n        {if thirdbest:\r\n            e {thirdbest.name}\r\n        }\r\n    }\r\n.}\r\n",
      "default": true,
      "name": "Commodity purchase check",
      "description": "Check to see which commodities are the best to purchase"
    },
    "Commodity purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'purchase')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n\r\n{if event.amount = 1:\r\n   Você acabou de comprar uma tonelada de {event.commodity} por {event.price} créditos.\r\n|elif event.amount > 1:\r\n    Você acabou de comprar {event.amount} toneladas de {event.commodity} a {event.price} créditos por tonelada.  O custo total foi de {Humanise(event.amount * event.price)} créditos.\r\n}\r\n\r\n{set total_required to 0}\r\n{set total_acquired to 0}\r\n\r\n{for mission in missions:\r\n    {if mission.commodity = event.commodity && mission.type = \"Collection\":\r\n        {set required to true}\r\n        {set total_required to total_required + mission.amount - HaulageDetails(mission.missionid).delivered}\r\n    }\r\n}\r\n\r\n{set total_acquired to event.amount + CargoDetails(event.commodity).total}\r\n\r\n{if required = true:\r\n    {if total_acquired >= total_required:\r\n        Agora você tem o suficiente para todas as suas missões\r\n    |else:\r\n        {set need to total_required - total_acquired}\r\n        Você ainda precisa de mais {need} tonelada{if need != 1:s} de {event.commodity} para todas as suas missões\r\n    }.\r\n}\r\n",
      "default": true,
      "name": "Commodity purchased",
      "description": "Triggered when you buy a commodity from the markets"
    },
    "Commodity refined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'refine')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n\r\n{Occasionally(2,\"Uma {OneOf('unidade','tonelada')} de\")} {event.commodity} {OneOf(\"refineada\",\"processada\")}.\r\n",
      "default": true,
      "name": "Commodity refined",
      "description": "Triggered when you refine a commodity from the refinery"
    },
    "Commodity sale check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Commodity sale check}\r\n{_ Check to see which commodities can be sold here}\r\n\r\n\r\n{_ Function to find a given commodity in market}\r\n{set market(commodity) to:\r\n    {for marketcommodity in station.commodities:\r\n        {if marketcommodity.name = commodity.name:\r\n            {return marketcommodity}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Function to find an illegal mission related to the commodity}\r\n{set illegalmission(haulageData) to:\r\n    {for haulage in haulageData:\r\n        {if haulage.illegal:\r\n            {return true}\r\n        }\r\n    }\r\n    {return false}\r\n}\r\n\r\n{set totalprofit to 0}\r\n{set missioncommodities to []}\r\n{set profitablecommodities to []}\r\n{set stolencommodities to []}\r\n{set unknowncommodities to []}\r\n\r\n{_ set this as your max to list before total is used instead}\r\n{set maxcommoditycount to 5}\r\n\r\n{for cargo in inventory:\r\n    {if cargo.name != 'Limpet':\r\n        {set marketcommodity to market(cargo.commodity)}\r\n        {set illegal to illegalmission(cargo.haulageData)}\r\n        {set profit to (marketcommodity.sellprice - cargo.price) * cargo.owned}\r\n\r\n        {if cargo.stolen > 0 && !illegal:\r\n            {set stolencommodities to cat(stolencommodities, [cargo.commodity])}\r\n        |elif cargo.haulage > 0:\r\n            {set missioncommodities to cat(missioncommodities, [cargo.commodity])}\r\n        |elif !marketcommodity && lcase(cargo.category) != \"powerplay\" && cargo.total > 0:\r\n            {set unknowncommodities to cat(unknowncommodities, [cargo.commodity])}\r\n        |elif marketcommodity && profit > 0:\r\n            {set profitablecommodities to cat(profitablecommodities, [cargo.commodity])}\r\n            {set totalprofit to totalprofit + profit}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Let the user know about any commodities they can sell here for a profit}\r\n{if len(profitablecommodities) > 0:\r\n    Você pode vender\r\n    {if len(profitablecommodities) = len(ship.cargo) - len(stolencommodities) - len(missioncommodities):\r\n        toda sua \r\n        {if len(missioncommodities) > 0: non-mission}\r\n        carga \r\n        {if len(stolencommodities) > 0: {OneOf(\"legal\",\"legítima\")} }\r\n        {Occasionally(2,\" de mercadorias\")}\r\n    |elif len(profitablecommodities) > maxcommoditycount:\r\n        {len(profitablecommodities)} de mercadoria{if len(profitablecommodities) > 1:s}\r\n    |else:\r\n        {set cur to 0}\r\n        {set length to len(profitablecommodities) - 1}\r\n        {while cur < len(profitablecommodities):\r\n            {profitablecommodities[cur].localizedName}\r\n            {set cur to cur + 1}\r\n            {if cur = length: e\r\n            |elif cur < length:,\r\n            }\r\n        }\r\n    }\r\n    aqui com um lucro de {totalprofit} créditos.\r\n}\r\n\r\n{_ Let the user know about any commodities about which we are unsure if they can sell for a profit}\r\n{if len(unknowncommodities) > 0:\r\n    Você {if len(profitablecommodities) > 0: também } poderia vender seu{if len(unknowncommodities) > 1:s} \r\n        {set cur to 0}\r\n        {set length to len(unknowncommodities) - 1}\r\n        {while cur < len(unknowncommodities):\r\n            {unknowncommodities[cur].localizedName}\r\n            {set cur to cur + 1}\r\n            {if cur = length: e\r\n            |elif cur < length:,\r\n            }\r\n        }\r\n    , porém verifique o lucro potencial {if len(unknowncommodities) > 1: deles |else: dele}\r\n    antes de confirmar a transação.\r\n}\r\n\r\n{_ Let the user know about any stolen commodities they can sell on the black market}\r\n{if len(stolencommodities) > 0:\r\n    {if station.hasblackmarket:\r\n        Você pode se livrar de\r\n        {set cur to 0}\r\n        {set length to len(stolencommodities) - 1}\r\n        {while cur < len(stolencommodities):\r\n            {stolencommodities[cur].localizedName}\r\n            {set cur to cur + 1}\r\n            {if cur = length: e\r\n            |elif cur < length:,\r\n            }\r\n        }\r\n        aqui.\r\n    |else:\r\n        Lembrete: você {OneOf(\"tem carga roubada a bordo\", \"tem produtos roubados a bordo\", \"está carregando carga roubada\", \"está carregando produtos roubados\")}.\r\n    }\r\n}\r\n\r\n{_ Let the user know about any mission related commodities they can sell on the black market}\r\n{if len(missioncommodities) > 0 && station.hasblackmarket:\r\n    Você pode {if len(stolencommodities) > 0: also} {OneOf('se livrar', 'descarregar')} seus\r\n    {set cur to 0}\r\n    {set length to len(missioncommodities) - 1}\r\n    {while cur < len(missioncommodities):\r\n        {missioncommodities[cur].localizedName}\r\n        {set cur to cur + 1}\r\n        {if cur = length: e\r\n        |elif cur < length:,\r\n        }\r\n    }\r\n    relacionados à missões aqui.\r\n}\r\n",
      "default": true,
      "name": "Commodity sale check",
      "description": "Check to see which commodities can be sold here"
    },
    "Commodity sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'sell')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n\r\n{Occasionally(2,\"Você\")}\r\nVendeu\r\n\r\n{if event.amount = 1:\r\n    uma tonelada de {event.commodity} por {event.price} créditos\r\n|elif event.amount > 1:\r\n    {event.amount} toneladas de {event.commodity}\r\n    {Occasionally(2,\"a {event.price} créditos por tonelada.\")}\r\n    {OneOf(\"No valor total de\",\"Por\")}\r\n    {event.amount * event.price} créditos\r\n}\r\n{if event.profit < 0:\r\n    com uma perda de {-1 * event.profit * event.amount} créditos\r\n|elif event.profit = 0:\r\n    e ficou empatado na venda\r\n|elif event.profit = event.price:\r\n    lucro puro\r\n|else:\r\n    com um luco de {event.profit * event.amount} créditos\r\n}.\r\n",
      "default": true,
      "name": "Commodity sold",
      "description": "Triggered when you sell a commodity to the markets"
    },
    "Community goal": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Set Context _}\n{SetState('eddi_context_last_subject', 'community goal')}\n{_ Save goal location to context if there is only one goal present _}\n{if len(event.cgid) = 1:\n   {SetState('eddi_context_goal_system_name', event.system[0])}\n   {SetState('eddi_context_goal_station_name', event.station[0])}\n}\n\n{F('Honorific')}, \n\n{if len(event.name) > 1:\n    {OneOf(\"você mostrou interesse nos\", \"estou monitorando os\")}\n    seguintes objetivos da comunidade:\n|else: \n    O objetivo da comunidade,    \n}\n\n{set cur to 0}\n{while cur < len(event.name):\n\n   {if cur = 0 && len(event.name) = 1:\n      {_ nothing _}\n   |elif cur = 0 && len(event.name) > 1:\n      O primeiro,\n   |elif cur < (len(event.name) - 1):\n      O próximo, \n   |else:\n      O último,\n   }\n\n   {event.name[cur]},\n\n   {if event.iscomplete[cur]:\n      {OneOf(\"está completo\", \"foi finalizado\")} \n   |else: \n      {if (event.expiry[cur] / 3600) < 12:\n         {OneOf(\"está próximo de ser concluído\", \n                \"deve terminar em {Humanise(round(event.expiry[cur] / 3600, 1))} horas\", \n                \"está quase completo\")}\n      |else:\n         {OneOf(\"ainda não está completo\", \n                \"está ativo\", \n                \"está incompleto\")} \n      }\n   }\n\n   {if event.tier[cur]:\n       {OneOf(\"e alcançou\", \"e atualmente em\")} {event.tier[cur]}.\n       {if event.contribution[cur] > 0:\n           Sua recompensa esperada é\n           {Occasionally(2, \"atualmente\")}\n           {Occasionally(2, \"calculada em\")}\n           {Humanise(event.tierreward[cur])} créditos\n           {Occasionally(2, \"nos {event.percentileband[cur]}º percentual\")}\n       }\n   }.\n\n   {_ Create a comparison function _}\n   {set compare(stat) to:     \n       {if stat < 0.01:\n            apenas uma {OneOf(\"fração\", \"parte\")} do            \n       |elif stat < 0.10:\n            menos de um décimo do\n       |elif stat < 0.25:\n            menos de um quarto do\n       |elif stat < 0.5:\n            menos da metade do\n       |elif stat < 0.75:\n            menos que\n       |elif stat < 0.96: \n            {OneOf(\"fracionariamente\",\"apenas\")}\n            menos que\n       |elif stat < 1.05:\n            {OneOf(\"aproximadamente\",\"mais ou menos\",\"quase\")} \n            igual a\n       |elif stat < 1.25:\n            um pouco mais que\n       |elif stat < 1.5:\n            mais que\n       |elif stat < 2:\n            significativamente mais que\n       |else:\n            bem mais que\n       }\n    }\n    {set compare_contribution to (event.contribution[cur] / round(event.total[cur] / event.contributors[cur], 0))}\n\n    {if compare_contribution != 0:\n       {if event.toprank[cur]: \n          Parabéns! \n          Você é um dos {event.topranksize[cur]} top comandantes neste evento, tendo contribuído\n          {compare(compare_contribution)}\n          a média.\n       |else:\n          {Occasionally(2, \"Você contribuiu \n          {compare(compare_contribution)}\n          a média.\")}\n       }\n    }\n\n    {if !event.iscomplete[cur]:\n       Você pode \n       {if event.contribution[cur] > 0: \n          {OneOf(\"contribuir mais\", \"dar contribuições adicionais\")} \n       |else: \n          {OneOf(\"contribuir\", \"dar uma contribuição\")}\n       }\n       {if event.station[cur] = station.name:\n          {Occasionally(2, \"aqui\")}\n          {Occasionally(2, \"nesta estação\")}.\n       |elif event.system[cur] = system.name:\n          at {P(event.station[cur])}\n          {Occasionally(2, \"aqui\")}\n          {Occasionally(2, \"neste sistema\", \"no sistema atual\")}.\n       |else:\n          na {P(event.station[cur])},\n          {OneOf(\"em {P(event.system[cur])}\", \"no sistema {P(event.system[cur])}\" )}.\n       }\n    }\n\n    {set cur to cur + 1}\n    {Pause(1000)}\n}\n",
      "default": true,
      "name": "Community goal",
      "description": "Triggered when checking the status of a community goal"
    },
    "Controlling fighter": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Link neural\", \"Link\", \"Uplink\")} {Occasionally(2, \"com o caça\")} {OneOf(\"iniciado\", \"estabelecido\", \"acionado\")}.",
      "default": true,
      "name": "Controlling fighter",
      "description": "Triggered when you switch control from your ship to your fighter"
    },
    "Controlling ship": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Link neural\", \"Link\", \"uplink\")} {OneOf(\"terminado\", \"desativado\")}.",
      "default": true,
      "name": "Controlling ship",
      "description": "Triggered when you switch control from your fighter to your ship"
    },
    "Crew assigned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.name},\r\n\r\n{if event.role = \"Active\":\r\n    {OneOf(\"agora em\",\"chamado em\")} serviço\r\n|else:\r\n    {OneOf(\"recebendo uma folga\",\"saindo do serviço\")}\r\n}\r\n.",
      "default": true,
      "name": "Crew assigned",
      "description": "Triggered when you assign crew"
    },
    "Crew fired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'fire')}\r\n{SetState('eddi_context_crew_name', event.name)}\r\n\r\n{event.name} teve o contrato cancelado, e não {OneOf(\"é mais membro\",\"mais faz parte\")} {OneOf(\"da\",\"da sua\")} tripulação.\r\n",
      "default": true,
      "name": "Crew fired",
      "description": "Triggered when you fire crew"
    },
    "Crew hired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'hire')}\r\n{SetState('eddi_context_crew_name', event.name)}\r\n\r\n{event.name} foi contratado, e {OneOf(\"juntou-se à\",\"é agora {OneOf('membro','parte')} da\")} {OneOf(\"\",\"sua\")} tripulação.",
      "default": true,
      "name": "Crew hired",
      "description": "Triggered when you hire crew"
    },
    "Crew joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'join')}\r\n{SetState('eddi_context_crew_name', event.captain)}\r\n\r\nVocê se juntou à tripulação de {event.captain}.",
      "default": true,
      "name": "Crew joined",
      "description": "Triggered when you join a crew"
    },
    "Crew left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'leave')}\r\n{SetState('eddi_context_crew_name', event.captain)}\r\n\r\nVocê deixou a tripulação de {event.captain}.",
      "default": true,
      "name": "Crew left",
      "description": "Triggered when you leave a crew"
    },
    "Crew member joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'join')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n{event.crew} juntou-se à sua tripulação.",
      "default": true,
      "name": "Crew member joined",
      "description": "Triggered when a commander joins your crew"
    },
    "Crew member launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'launch')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n{event.crew} lançou seu caça.",
      "default": true,
      "name": "Crew member launched",
      "description": "Triggered when a crew member launches the fighter"
    },
    "Crew member left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'leave')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n{event.crew} deixou sua tripulação.",
      "default": true,
      "name": "Crew member left",
      "description": "Triggered when a commander leaves your crew"
    },
    "Crew member removed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'remove')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\nVocê removeu {event.crew} da sua tripulação.",
      "default": true,
      "name": "Crew member removed",
      "description": "Triggered when you remove a commander from your crew"
    },
    "Crew member role changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'role')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n{SetState('eddi_context_crew_role', event.role)}\r\n\r\n{if event.role = 'Idle':\r\n    {event.crew} está sem fazer nada\r\n|elif event.role = 'Fighter':\r\n    {event.crew} está manejando o caça agora\r\n|elif event.role = 'Gunner':\r\n    {event.crew} está manejando as armas agora\r\n}.\r\n",
      "default": true,
      "name": "Crew member role changed",
      "description": "Triggered when a crew member changes their role"
    },
    "Crew paid wage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Crew paid wage }\r\n{_ Triggered when npc crew receives a profit share }\r\n\r\n",
      "default": true,
      "name": "Crew paid wage",
      "description": "Triggered when npc crew receives a profit share"
    },
    "Crew promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Crew promotion }\r\n{_ Triggered when crewmember combat rank increases }\r\n\r\n\r\nCrew member {event.name} has been promoted to the combat rank of {event.combatrating}.",
      "default": true,
      "name": "Crew promotion",
      "description": "Triggered when crewmember combat rank increases"
    },
    "Crew role changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.role = 'Gunner':\r\n  Agora você é um artilheiro desta tripulação.\r\n|elif event.role = 'Fighter':\r\n  Agora você um piloto de caça desta tripulação.\r\n|elif event.role = 'Idle':\r\n  Você foi dispensado do serviço.\r\n}",
      "default": true,
      "name": "Crew role changed",
      "description": "Triggered when your role in the crew changes"
    },
    "Crime check station": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Crime check station }\r\n{_ Check claims, fines & bounties related to the current station }\r\n\r\n\r\n{set CheckPad(current_station) to:\r\n    {set largest_pad to lcase(current_station.largestpad)}\r\n    {if largest_pad != \"none\":\r\n        {if largest_pad = \"large\": {return true} }\r\n        |elif largest_pad = \"medium:\r\n            {if lcase(ship.size) = \"large\": {return false}\r\n            |else: {return true}\r\n        }\r\n        {if lcase(ship.size) = \"small\": {return true}\r\n    }\r\n    {return false}\r\n}\r\n\r\n{set HasService(service) to:\r\n    {if CheckPad(current_station):\r\n        {if find(current_station.stationservices, service) > -1:\r\n            {return true}\r\n        |else:\r\n            {return false}\r\n        }\r\n    |else: {return false}\r\n    }\r\n}\r\n\r\n{set current_station to StationDetails(state.eddi_context_body_name)}\r\n\r\n{set factions_claims to []}\r\n{set system_claims to 0}\r\n{set factions_fines to []}\r\n{set system_fines to 0}\r\n{set factions_bounties to []}\r\n{set station_report to false}\r\n\r\n{for record in criminalrecord:\r\n    {if record.bounties > 0:\r\n        {set factions_bounties to cat(factions_bounties, [record.faction])}\r\n    }\r\n    {for faction in system.factions:\r\n        {if record.faction = faction.name:\r\n            {if record.claims > 0:\r\n                {set factions_claims to cat(factions_claims, [record.faction])}\r\n                {set system_claims to system_claims + record.claims}\r\n            }\r\n            {if record.fines > 0:\r\n                {set factions_fines to cat(factions_fines, [record.faction])}\r\n                {set system_fines to system_fines + record.fines}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{set claim_count to len(factions_claims)}\r\n{set fine_count to len(factions_fines)}\r\n{set bounty_count to len(factions_bounties)}\r\n\r\n{if bounties > 0 && HasService(\"Interstellar Factors Contact\"):\r\n    Information: There are legal facilities at this station to clear your pending\r\n    {if bounty_count = 1: bounty |else: bounties}.\r\n    {set station_report to true}\r\n}\r\n\r\n{if (system_fines > 0 || system_claims > 0) && !station_report:\r\n    {if HasService(\"Contacts\"):\r\n        Information: You may clear your pending\r\n         {if fine_count = 1: fine |else: fines} at this station.\r\n        {set station_report to true}\r\n    }\r\n}\r\n\r\n{if system_claims > 0 && !station_report:\r\n    {if HasService(\"Contacts\"):\r\n        Information: You may claim your pending\r\n        {if claim_count = 1: reward |else: rewards} at this station.\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Crime check station",
      "description": "Check claims, fines & bounties related to the current station"
    },
    "Crime check system": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Crime check system }\r\n{_ Check claims, fines & bounties related to the current system }\r\n\r\n\r\n{set CheckPad(station) to:\r\n    {set largest_pad to lcase(station.largestpad)}\r\n    {if largest_pad != \"none\":\r\n        {if largest_pad = \"large\": {return true} }\r\n        |elif largest_pad = \"medium:\r\n            {if lcase(ship.size) = \"large\": {return false}\r\n            |else: {return true}\r\n        }\r\n        {if lcase(ship.size) = \"small\": {return true}\r\n    }\r\n    {return false}\r\n}\r\n\r\n{set NearestStation(service) to:\r\n    {set distance to 0}\r\n    {set station_count to 0}\r\n    {set orbital_count to 0}\r\n\r\n    {_ If preferred & available, use orbital stations }\r\n    {if orbitalpriority:\r\n        {for station in system.orbitalstations:\r\n            {if find(station.stationservices, service) > -1:\r\n                {set orbital_count to orbital_count + 1}\r\n            }\r\n        }\r\n    }\r\n\r\n    {_ Force orbital stations when game version is not 'Horizons' }\r\n    {if orbital_count > 0 || !horizons:\r\n        {set stations to system.orbitalstations}\r\n    |else:\r\n        {set stations to system.stations}\r\n    }\r\n\r\n    {_ Get the total count and nearest station }\r\n    {for station in stations:\r\n        {if CheckPad(station):\r\n            {if find(station.stationservices, service) > -1:\r\n                {set station_count to station_count + 1}\r\n                {if distance = 0 || station.distancefromstar < distance:\r\n                    {set distance to station.distancefromstar}\r\n                    {set nearest_station to station.name}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{set factions_claims to []}\r\n{set factions_fines to []}\r\n{set factions_bounties to []}\r\n{set station_report to false}\r\n{set system_claims to 0}\r\n{set system_fines to 0}\r\n{set system_bounties to 0}\r\n{set wanted_count to 0}\r\n\r\n{for record in criminalrecord:\r\n    {for faction in system.factions:\r\n        {if record.faction = faction.name:\r\n\r\n            {if record.claims > 0:\r\n                {set factions_claims to cat(factions_claims, [record.faction])}\r\n                {set system_claims to system_claims + record.claims}\r\n            }\r\n\r\n            {set reports to record.finesIncurred}\r\n            {if len(reports) > 0:\r\n                {for report in reports:\r\n                    {if report.shipId = ship.LocalId:\r\n                        {set system_fines to system_fines + report.amount}\r\n                        {if find(factions_fines, record.faction) < 0:\r\n                            {set factions_fines to cat(factions_fines, [record.faction])}\r\n                            {if find(factions_bounties, record.faction) < 0:\r\n                                {set wanted_count to wanted_count + 1}\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            {set reports to record.bountiesIncurred}\r\n            {if len(reports) > 0:\r\n                {for report in reports:\r\n                    {if report.shipId = ship.LocalId:\r\n                        {set system_bounties to system_bounties + report.amount}\r\n                        {if find(factions_bounties, record.faction) < 0:\r\n                            {set factions_bounties to cat(factions_bounties, [record.faction])}\r\n                            {if find(factions_fines, record.faction) < 0:\r\n                                {set wanted_count to wanted_count + 1}\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{set claim_count to len(factions_claims)}\r\n{set fine_count to len(factions_fines)}\r\n{set bounty_count to len(factions_bounties)}\r\n\r\n{if wanted_count > 0:\r\n    Warning: {ShipName()} is wanted in this system by {wanted_count}\r\n    {if wanted_count = 1: faction |else: factions},\r\n    for total fines and bounties of {Humanise(system_fines + system_bounties)} credits.\r\n}\r\n\r\n{_ Report nearest station to clear bounties }\r\n{if system_bounties > 0:\r\n    {NearestStation(\"Interstellar Factors Contact\")}\r\n    {if station_count > 0:\r\n        There are legal facilities at {station_count} {if orbitalpriority: orbital}\r\n        {if station_count = 1: station |else: stations} to clear your pending\r\n        {if bounty_count = 1: bounty |else: bounties}.\r\n        {if station_count = 1: It |else: The nearest} is {nearest_station},\r\n        {round(distance, 1)} light-seconds from the main star.\r\n        {set station_report to true}\r\n    }\r\n}\r\n\r\n{if system_fines > 0 && !station_report:\r\n    {NearestStation(\"Contacts\")}\r\n    {if station_count > 0:\r\n        There {if station_count = 1: is |else: are} {station_count} {if orbitalpriority: orbital}\r\n        {if station_count = 1: station |else: stations} to clear your pending\r\n        {if fine_count = 1: fine |else: fines}.\r\n        {if station_count = 1: It |else: The nearest} is {nearest_station},\r\n        {round(distance, 1)} light-seconds from the main star.\r\n        {set station_report to true}\r\n    }\r\n}\r\n\r\n{_ Report nearest station for pending claims }\r\n{if system_claims > 0:\r\n    You have bond and bounty claims in this system for {claim_count}\r\n    {if claim_count = 1: faction |else: factions}, for a total of {Humanise(system_claims)} credits.\r\n\r\n    {if !station_report:\r\n        {if system_fines = 0: {NearestStation(\"Contacts\")}}\r\n        {if station_count > 0:\r\n            There {if station_count = 1: is |else: are} {station_count} {if orbitalpriority: orbital}\r\n            {if station_count = 1: station |else: stations} to claim your\r\n            {if claim_count = 1: reward |else: rewards}.\r\n            {if station_count = 1: It |else: The nearest} is {nearest_station},\r\n            {round(distance, 1)} light-seconds from the main star.\r\n        }\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Crime check system",
      "description": "Check claims, fines & bounties related to the current system"
    },
    "Crime report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Crime report}\r\n{_ Report on all pending claims, fines, and bounties }\r\n\r\n\r\n{set factions_claims to []}\r\n{set claims_count to 0}\r\n{set factions_fines to []}\r\n{set fines_count to 0}\r\n{set factions_bounties to []}\r\n{set systems_bounties to []}\r\n\r\n{for record in criminalrecord:\r\n    {set faction to FactionDetails(record.faction)}\r\n    {if faction:\r\n        {if record.bounties > 0:\r\n            {set factions_bounties to cat(factions_bounties, [record.faction])}\r\n            {for presence in faction.presences:\r\n                {if find(presence.systemName, systems_bounties) = -1:\r\n                    {set systems_bounties to cat(systems_bounties, [presence.systemName])}\r\n                }\r\n            }\r\n        }\r\n        {if record.fines > 0:\r\n            {set factions_fines to cat(factions_fines, [record.faction])}\r\n        }\r\n        {if record.claims > 0:\r\n            {set factions_claims to cat(factions_claims, [record.faction])}\r\n        }\r\n\r\n        {for report in record.factionReports:\r\n            {if !report.bounty && report.crimeEDName != \"none\":\r\n                {set fines_count to fines_count + 1}\r\n            }\r\n            {if report.crimeEDName = \"none\":\r\n                {set claims_count to claims_count + 1}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{set factions_count to len(factions_bounties)}\r\n{set systems_count to len(factions_bounties)}\r\n\r\n{if factions_count > 0:\r\n    You are wanted by {factions_count} {if factions_count = 1: faction |else: factions}\r\n    in {systems_count} {if systems_count = 1: system |else: systems} for a total of\r\n    {Humanise(bounties)} credits.\r\n}\r\n\r\n{set factions_count to len(factions_fines)}\r\n{if factions_count > 0:\r\n    You have {fines_count} pending {if fines_count = 1: fine |else: fines} from\r\n    {factions_count} {if factions_count = 1: faction |else: factions},\r\n    for a total of {Humanise(fines)} credits.\r\n}\r\n\r\n{set factions_count to len(factions_claims)}\r\n{if factions_count > 0:\r\n    You have {claims_count} uncollected {if claims_count = 1: claim |else: claims} from\r\n    {factions_count} {if factions_count = 1: faction |else: factions},\r\n    for a total of {Humanise(claims)} credits.\r\n}",
      "default": true,
      "name": "Crime report",
      "description": "Report on all pending claims, fines, and bounties"
    },
    "Damage check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Track if there is any damage}\r\n{set damaged to 0}\r\n\r\n{_ Announce hull health}\r\n{if ship.health < 100:\r\n    Casco em {Humanise(ship.health)}%.\r\n    {set damaged to 1}\r\n}\r\n\r\n{_ Announce critical module health}\r\n\r\n{set minordamage to []}\r\n{set majordamage to []}\r\n\r\n{if ship.powerplant.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.powerplant])}\r\n|elif ship.powerplant.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.powerplant])}\r\n}\r\n\r\n{if ship.thrusters.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.thrusters])}\r\n|elif ship.thrusters.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.thrusters])}\r\n}\r\n\r\n{if ship.frameshiftdrive.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.frameshiftdrive])}\r\n|elif ship.frameshiftdrive.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.frameshiftdrive])}\r\n}\r\n\r\n{if ship.powerdistributor.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.powerdistributor])}\r\n|elif ship.powerdistributor.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.powerdistributor])}\r\n}\r\n\r\n{if ship.lifesupport.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.lifesupport])}\r\n|elif ship.lifesupport.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.lifesupport])}\r\n}\r\n\r\n{if ship.sensors.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.sensors])}\r\n|elif ship.sensors.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.sensors])}\r\n}\r\n\r\n{if len(majordamage) > 0:\r\n    {set damaged to 1}\r\n    Grande dano no\r\n\r\n    {set cur to 0}\r\n    {set length to len(majordamage) - 1}\r\n    {while cur < len(majordamage):\r\n        {majordamage[cur].name}\r\n        {set cur to cur + 1}\r\n        {if cur = length: and\r\n        |elif cur < length:,\r\n        }\r\n    }.\r\n}\r\n\r\n{if len(minordamage) > 0:\r\n    {set damaged to 1}\r\n    Dano leve no\r\n\r\n    {set cur to 0}\r\n    {set length to len(minordamage) - 1}\r\n    {while cur < len(minordamage):\r\n        {minordamage[cur].name}\r\n        {set cur to cur + 1}\r\n        {if cur = length: and\r\n        |elif cur < length:,\r\n        }\r\n    }.\r\n}\r\n\r\n{_ Announce other module health}\r\n\r\n{set minordamage to []}\r\n{set majordamage to []}\r\n\r\n{for compartment in ship.compartments:\r\n    {if compartment.module.health < 60:\r\n        {set majordamage to cat(majordamage, [compartment.module.name])}\r\n    |elif hardpoint.module.health < 100:\r\n        {set minordamage to cat(minordamage, [compartment.module.name])}\r\n    }\r\n}\r\n\r\n{for hardpoint in ship.hardpoints:\r\n    {if hardpoint.module.health < 60:\r\n        {set majordamage to cat(majordamage, [hardpoint.module.name])}\r\n    |elif hardpoint.module.health < 100:\r\n        {set minordamage to cat(minordamage, [hardpiont.module.name])}\r\n    }\r\n}\r\n\r\n{if len(majordamage) > 0:\r\n    {set damaged to 1}\r\n    {if len(majordamage) = 1:\r\n       Um outro componente da nave com grande dano\r\n    |elif len(majordamage) > 1:\r\n        {len(majordamage)} outros componentes da nave com grande dano\r\n    }\r\n    {if len(minordamage) = 1:\r\n       e um outro componente da nave com dano leve\r\n    |elif len(minordamage) > 1:\r\n       e {len(minordamage)} outros componentes da nave com dano leve\r\n    }.\r\n|elif len(minordamage) = 1:\r\n    {set damaged to 1}\r\n    Um outro componente da nave com dano leve.\r\n|elif len(minordamage) > 1:\r\n    {set damaged to 1}\r\n    {len(minordamage)} outros componentes da nave com dano leve.\r\n}\r\n\r\n{if damaged = 0:\r\n    {OneOf(\"Todos os sistemas estão operacionais.\", \"{ShipName()} está totalmente operacional.\", \"{ShipName()} está sem danos.\")}\r\n}\r\n",
      "default": true,
      "name": "Damage check",
      "description": "Check on the levels of damage to your ship"
    },
    "Data scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Data scanned }\r\n{_ Triggered when scanning some types of data links }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'scan')}\r\n{SetState('eddi_context_last_action', 'data')}\r\n{SetState('eddi_context_data_scan_type', event.datalinktype)}\r\n\r\nScaneamento de {event.datalinktype} completo.",
      "default": true,
      "name": "Data scanned",
      "description": "Triggered when scanning some types of data links"
    },
    "Data voucher awarded": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'data_voucher')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.payeefaction)}\r\n\r\n{set faction to event.payeefaction}\r\n\r\nComprovante de dados concedido  \r\n\r\n{if faction = \"Empire\": {set faction to:pelo Império}\r\n|elif faction = \"Federation\": {set faction to:pela Federação}\r\n|elif faction = \"Alliance\": {set faction to:pela Aliança}\r\n|else: por }\r\n\r\n{faction} no valor de {event.reward} créditos.\r\n",
      "default": true,
      "name": "Data voucher awarded",
      "description": "Triggered when you are awarded a data voucher"
    },
    "Data voucher redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'data_voucher')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_data_voucher_amount', event.amount)}\r\n\r\nComprovantes de dados no valor de {Humanise(event.amount)} créditos descontados\r\n\r\n{Occasionally(2, \"\r\n   {if len(event.rewards) > 0:\r\n      {OneOf(\"de\", \"cortesia de\")}\r\n      {set cur to 0}\r\n      {set length to len(event.rewards) - 1}\r\n      {while cur < len(event.rewards):\r\n         {P(event.rewards[cur].faction)}\r\n         {set cur to cur + 1}\r\n         {if cur = length: and\r\n         |elif cur < length:,\r\n         }\r\n      }\r\n   }\r\n\")}.\r\n\r\n{if event.brokerpercentage:\r\n   {Pause(1000)}\r\n   O agente ficou com {event.brokerpercentage} créditos.\r\n}",
      "default": true,
      "name": "Data voucher redeemed",
      "description": "Triggered when you redeem a data voucher"
    },
    "Datalink message": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Datalink message",
      "description": "Triggered upon completion of Datalink scan"
    },
    "Died": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{if len(event.ships) > 0:\r\n\r\n    {set commanders to []}\r\n    {for cmdr in event.commanders:\r\n        {if find(cmdr, \"$ShipName\") > -1:\r\n           {_ Ignore NPC ships _}        \r\n        |else: \r\n           {set commanders to cat(commanders, [cmdr])}\r\n        }\r\n    }\r\n\r\n    {ShipName()} foi\r\n    {OneOf(\"explodida\", \"destruída\", \"exterminada\")}\r\n\r\n    {if len(commanders) > 0:\r\n        por\r\n        {set cur to 0}\r\n        {set length to len(commanders) - 1}\r\n        {while cur < len(commanders):\r\n            {commanders[cur]} em uma {event.ships[cur]}, \r\n            rank de combate {event.ratings[cur]}\r\n            {set cur to cur + 1}\r\n            {if cur = length: e\r\n            |elif cur < length:,\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{Pause(700)}\r\n\r\nTransferência de personalidade em andamento. Por favor {OneOf(\"tenha mais cuidado com\",\"cuide mais desta\")} sua nova nave.\r\n\r\n{_ Clear ship of Fines & Bounties}\r\n{SetState('eddi_context_cmdrdied', \"yes\")}\r\n{F(\"FinesBounties_ClearShip\")}\r\n",
      "default": true,
      "name": "Died",
      "description": "Triggered when you have died"
    },
    "Discovery scan": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Fetch from Context _}\r\n{set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n\r\n{if !reportSystem.name || reportSystem.name = \"\":\r\n\r\n    I'm not sure which system you are asking about.\r\n\r\n|else:\r\n\r\n    {if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n        {if reportSystem:\r\n            {if len(reportSystem.bodies) > 0 && len(reportSystem.bodies) < event.totalbodies:\r\n\r\n                {Pause(1000)}\r\n\r\n                {set scannedBodies to 0}\r\n                {for body in reportSystem.bodies:\r\n                    {if body.scanned:\r\n                        {set scannedBodies to scannedBodies + 1}\r\n                    }\r\n                }\r\n                {set bodiesToScan to (event.totalbodies- scannedBodies)}\r\n\r\n                {if scannedBodies < event.totalbodies:\r\n                    {OneOf(\r\n                        \"{scannedBodies} out of {event.totalbodies} bodies have been scanned\", \r\n                        \"{bodiesToScan} {if bodiesToScan > 1: bodies remain |else: body remains} to be scanned\"\r\n                    )}\r\n                    {Occasionally(3, OneOf(\"here\", \"in this system\"))}.\r\n                }\r\n\r\n            |else:\r\n\r\n                {set bodiesToMap to F(\"Bodies to map\")}\r\n                {if bodiesToMap:\r\n                    {bodiesToMap}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
      "default": true,
      "name": "Discovery scan",
      "description": "Triggered when performing a full system scan (honk)"
    },
    "Docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState('eddi_context_lastdocked', event.station)}\r\n{SetState('eddi_context_docked',\"yes\")}\r\n{SetState('eddi_context_mission_accepted', \"no\")}\r\n\r\n{if event.state = \"Damaged\": Emergência}\r\nPouso finalizado.\r\n\r\n{Pause(1000)}\r\n\r\n{OneOf(\"Estabelecendo conexão com\",\"Inicializando conecsão\",\r\n       \"Conectando\",\"Acessando\",\"Comunicando com\",\"Ligando a\")}\r\n{OneOf(\"a rede de dados\",\"a rede\",\"as redes\",\"os computadores\",\"os serviços\")}\r\n{OneOf(\"da estação\",\"de {event.station}\")}.\r\n{Pause(8300)}\r\n{OneOf(\"Conecsão\",\"Ligação\")}\r\n{OneOf(\"estabelecida\",\"confirmada\",\"autorizada\",\"obtida\")}.\r\n\r\n{SetState('eddi_context_new_missions', \"no\")}\r\n{SetState('eddi_context_mission_destination_locked', \"no\")}\r\n\r\n\r\n{set crime to F(\"FinesBounties_CheckContacts\")}\r\n\r\n{if fine = 1 || bountyinc = 1 || bond = 1 || bountyawd = 1:\r\n    {crime}\r\n}",
      "default": true,
      "name": "Docked",
      "description": "Triggered when your ship docks at a station or outpost"
    },
    "Docking cancelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Pedido de pouso cancelado.",
      "default": true,
      "name": "Docking cancelled",
      "description": "Triggered when your ship cancels a docking request at a station or outpost"
    },
    "Docking denied": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\r\n\r\nNosso pedido de pouso foi negado\r\n\r\n{if event.reason = \"ActiveFighter\":\r\n    porque nosso caça está liberado\r\n|elif event.reason = \"Distance\":\r\n    porque estamos muito longe da estação\r\n|elif event.reason = \"Hostile\":\r\n    porque a facção controladora da estação não gosta da gente\r\n|elif event.reason = \"NoSpace\":\r\n    porque não há vagas disponíveis\r\n|elif event.reason = \"Offences\":\r\n    porque recentemente nós os ofendemos\r\n|elif event.reason = \"TooLarge\":\r\n    porque não há uma plataforma que possa acomodar o tamanho da nossa nave\r\n}.",
      "default": true,
      "name": "Docking denied",
      "description": "Triggered when your ship is denied docking at a station or outpost"
    },
    "Docking granted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'landing pad')}\r\n{SetState('eddi_context_landing_pad_system', system.name)}\r\n{SetState('eddi_context_landing_pad_station', event.station)}\r\n{SetState('eddi_context_landing_pad_station_model', event.stationtype)}\r\n{SetState('eddi_context_landing_pad_pad', event.landingpad)}\r\n\r\n{set station_type to event.stationDefinition.basename}\r\n\r\n{if station_type = \"Coriolis\" || station_type = \"Orbis\" ||\r\n    station_type = \"Bernal\" || station_type = \"AsteroidBase\":\r\n    {Pause(11000)}\r\n    {F(\"Landing pad report\")}\r\n|else:\r\n    {if station_type != \"Outpost\": {Pause(9000)} }\r\n    {Pause(2000)}\r\n    Platafórma {Occasionally(2,\"de pouso\")} \r\n    {event.landingpad}\r\n    {OneOf(\"ficou\", \"está\")}\r\n    {OneOf(\"disponível\", \"livre\")}\r\n    {OneOf(\"para {OneOf('pouso', 'docagem')}\", \"para {OneOf('uso', 'pousar')}\")}.\r\n}\r\n",
      "default": true,
      "name": "Docking granted",
      "description": "Triggered when your ship is granted docking permission at a station or outpost"
    },
    "Docking requested": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Docking requested",
      "description": "Triggered when your ship requests docking at a station or outpost"
    },
    "Docking timed out": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Sem resposta à nossa solicitação de {OneOf(\"pouso\",\"docagem\")}.\r\n",
      "default": true,
      "name": "Docking timed out",
      "description": "Triggered when your docking request times out"
    },
    "Empire honorific": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Forms of address taken from <https://en.wikipedia.org/wiki/Forms_of_address_in_the_United_Kingdom>}\r\n{if cmdr.empirerating.rank <= 4: {_ Commoner }\r\n   Comandante {Occasionally(3,\"{cmdr.name}\")}\r\n|elif cmdr.empirerating.rank = 5: {_ Knight / Dame }\r\n    {if cmdr.gender = \"Male\": \r\n        Senhor \r\n    |elif cmdr.gender = \"Female\": \r\n        Senhora\r\n    |else: \r\n        Comandante\r\n    }\r\n|elif cmdr.empirerating.rank <= 11: {_ Peer / Peeress }\r\n    {if cmdr.gender = \"Male\": \r\n        {OneOf(\"Meu Lorde\", \"Seu Senhorio\")}\r\n    |elif cmdr.gender = \"Female\": \r\n        {OneOf(\"Minha lêide\", \"Sua Senhoria\")}\r\n    |else: \r\n        Comandante\r\n    }\r\n|elif cmdr.empirerating.rank = 12:\r\n    Vossa Graça\r\n|elif cmdr.empirerating.rank = 13:\r\n    Vossa alteza real\r\n|elif cmdr.empirerating.rank = 14:\r\n    Vossa Majestade\r\n}\r\n",
      "default": true,
      "name": "Empire honorific",
      "description": "Function to provide a suitable honorific for your commander when in the empire"
    },
    "Empire promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set rank to when(cmdr.gender = \"Female\", event.femininerank, event.rank)}\r{if (cmdr.gender) = \"Female\":\r   {set A to a}\r|else:\r   {set A to:o}\r}\r\r\n{F(\"Empire honorific\")},\r\r\n{OneOf(\"a marinha Imperial {OneOf('concedeu-lhe uma promoção', 'promoveu-lhe', 'avançou-lhe')} ao rank de {rank}\",\r       \"Você {OneOf(\\\"{OneOf('elevou sua posição','foi promovid{A}')} a\\\",\r                        \\\"{OneOf('recebeu','foi agraciad{A} com')} um rank mais alto de\\\")} {rank} na Marinha Imperial\")}\r\r\n{Occasionally(2, \"for your service to the Empire\")}.\r\r\n{if event.rank = \"Outsider\":\r   Você recebeu acesso à compra da Impírial Ígôl.\r|elif event.rank = \"Master\":\r   Você recebeu acesso à compra da Impírial Curriêr.\r|elif event.rank = \"Squire\":\r   Você recebeu a honra de poder entrar no sistema {P(\"Archenar\")}.\r|elif event.rank = \"Baron\":\r   Você recebeu acesso à compra da Impírial Clípper. E a honra de poder entrar no sistema {P(\"Summer-land\")}.\r|elif event.rank = \"Earl\":\r   Você recebeu a honra de poder entrar no sistema {P(\"Facece\")}.\r|elif event.rank = \"Duke\":\r   Você recebeu acesso à compra da Impírial Câtter.\r|elif event.rank = \"King\":\r   Você alcançou o mais alto rank possível meu soberano.\r}",
      "default": true,
      "name": "Empire promotion",
      "description": "Triggered when your rank increases with the Empire"
    },
    "Engineer contributed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{event.engineer}: obrigado por contribuir com {event.amount}\r\n\r\n{if event.contributiontype = \"Commodity\":\r\n    {set type to \"tonelada\"}\r\n|elif event.contributiontype = \"Material\":\r\n    {if material.category = 'Data':\r\n        {set type to \"registro\"}\r\n    |else:\r\n        {set type to \"fragmento\"}\r\n    }\r\n    {set type to OneOf(\"unidade\", \"amostra\", type)}\r\n\r\n}\r\n{type}{if event.amount != 1:s}\r\nde {event.contribution}.",
      "default": true,
      "name": "Engineer contributed",
      "description": "Triggered when contributing resources to an engineer in exchange for access"
    },
    "Engineer progressed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"{event.engineer} lhe deu\",\"Você tem\")}\r\n\r\nacesso ao nível {event.rank}\r\n\r\nde {OneOf(\"diagrâmas\",\"projetos\")} de modificação.\r\n",
      "default": true,
      "name": "Engineer progressed",
      "description": "Triggered when you reach a new rank with an engineer"
    },
    "Entered CQC": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Entrando na Arena.",
      "default": true,
      "name": "Entered CQC",
      "description": "Triggered when you enter CQC"
    },
    "Entered normal space": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'disengage')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n{SetState('eddi_context_supercruise', \"no\")}\r\n\r\n{_ If following a glide event, pause is not required. _}\r\n{if !(status.near_surface && status.fsd_status = \"masslock\"):\r\n    {Pause(3000)}\r\n}\r\n\r\n{if state.eddi_context_interdicted != \"yes\":\r\n\r\n    {OneOf(\"{ShipName()}\",\"Você\")}\r\n    {OneOf(\"saiu da supervelocidade\", \"{OneOf('entrou no','retornou ao','saiu para o')} espaço normal\")}\r\n\r\n    {if event.bodytype && event.bodytype != \"\":\r\n        {OneOf(\"perto de\", \"próximo de\", \"nas proximidades de\")}\r\n        {F(\"Body Name Tidy\")}\r\n\r\n        {if event.bodytype = \"Planeta\":\r\n\r\n            {set time to SecondsSince(0) - state.eddi_context_approach_time}\r\n            {_ If time since last settlement approach is more than 1 minute _}\r\n            {if time < 60:\r\n\r\n                {set settlement to state.eddi_context_last_settlement}\r\n                {set station to StationDetails(settlement, event.system)}\r\n                {if station:\r\n                    {SetState('eddi_context_body_name', settlement)}\r\n                    {if find(station.model, \"Unknown\") = -1: {station.model},}\r\n                    {P(settlement)} em\r\n                    {set station_missions to F(\"Mission check station\")}\r\n                }\r\n            }\r\n            {body}.\r\n\r\n            {if station_missions:\r\n                {Pause(500)}\r\n                {station_missions}\r\n            }\r\n\r\n        |elif event.bodytype = \"Estrela\":\r\n            {body}.\r\n        |elif event.bodytype = \"Estação\":\r\n            {set model to StationDetails(event.body, event.system).model}\r\n            {model}\r\n            {if find(model, \"Unknown\") = -1:\r\n                {if type != \"\": {type} |else: {model} },\r\n            }\r\n            {P(event.body)}.\r\n            {if type = \"Starport\": {Pause(10000)} }\r\n            {F(\"Mission check station\")}.\r\n        |elif event.bodytype = \"PlanetaryRing\":\r\n            Anéis-{token(event.body, \" \", find(split(event.body,\" \"),\"Ring\")-1)}, de {body}.\r\n        }\r\n    }\r\n}\r\n\r\n{SetState('eddi_context_interdicted', 'no')}\r\n",
      "default": true,
      "name": "Entered normal space",
      "description": "Triggered when your ship enters normal space"
    },
    "Entered signal source": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set warninglevel to:\n   {set entered to OneOf(\"Entrando em\", \"Caindo em\")}\n   {if event.threat < 2:\n      {entered}\n   |elif event.threat = 2:\n      Cuidado: {entered} ameaça média,\n   |elif event.threat = 3:\n      Alerta: {entered} ameaça alta,\n   |elif event.threat = 4:\n      Perigo: {entered} ameaça muito alta,\n   |elif event.threat = 5:\n      Perigo extremo: {Occasionally(2, entered)} ameaça muito alta,\n   |elif event.threat = 6:\n      Perigo extremo: {Occasionally(2, entered)} ameaça extremamente alta,\n   |elif event.threat = 7:\n      Perigo extremo: {Occasionally(2, entered)} ameaça ultra alta,\n   |else:\n      Perigo extremo: {Occasionally(2, entered)} ameaça de {event.threat} sem precedentes,\n   }\n}\n\n{set source to token(event.source, \"$USS_Type_\", 1)}\n\n{if source = \"Aftermath;\":\n   {set source to OneOf(\"de rescaldo de combate\", \"de dissipação de combate\")}\n|elif ((source = \"Anomaly;\" || source = \"Salvage;\") && event.threat = 2):\n   {set warninglevel to entered}\n   {set source to OneOf(\"alienígena\", \"não humano\", \"de sonda Thargóid\")}\n|elif (source = \"Anomaly;\" && event.threat = 4):\n   {set warninglevel to entered}\n   {set source to OneOf(\"alienígena\", \"não humano\", \"de sensor Thargóid\")}\n|elif source = \"Anomaly;\":\n   {set source to OneOf(\"anômalo\", \"desconhecido\", \"misterioso\")}\n|elif source = \"Ceremonial;\":\n    {set source to \"de comunicações cerimoniais\"}\n|elif source = \"Convoy;\":\n    {set source to \"de combôio\"}\n|elif source = \"DisruptedWakeEchoes;\":\n    {set source to \"\"}\n|elif source = \"DistressSignal;\":\n   {set source to \"de pedido de socorro\"}\n|elif source = \"MissionTarget;\":\n   {set source to OneOf(\"de missão\", \"de missão codificada\")}\n|elif source = \"NonHuman;\":\n   {set source to OneOf(\"alienígena\", \"não humano\")}\n|elif source = \"Salvage;\":\n    {set source to \"de transmissões degradadas\"}\n|elif source = \"ValuableSalvage;\":\n    {set source to \"de transmissões codificadas\"}\n|elif source = \"VeryValuableSalvage;\":\n    {set source to \"de transmissões de alto grau\"}\n|elif source = \"WeaponsFire;\":\n   {set source to OneOf(\"de combate\", \"de disparo de armas\")}\n}\n\n{Pause(2000)}\n{warninglevel} {OneOf(\"fonte de sinal\", \"local\")} {source} .\n\n{if system.state = \"Anarchy\" && source = \"degraded emissions\" && system.population > 0: \n   {set group to OneOf(\"clã\", \"gangue\", \"sindicato\")}\n   {set are to OneOf(\"conhecido por estar\", \"reportado\")}\n   {set opera to OneOf(\"operante\", \"operando\")}\n   {set type to OneOf(\"ativo\", \"presente\", \"{opera}\")}\n   {set type2 to OneOf(\"atividade reportada\", \"presença reportada\", \"conhecido por estar {opera}\")}\n\n   {Occasionally(2, \"\n      Cuidado:\n      {OneOf('de criminosos', 'pirata')}\n      {OneOf('{group}s (OneOf('de criminosos', 'pirata')) {are} {type}', '{group} (OneOf('de criminosos', 'pirata')) {type2}')}\n      n{OneOf('a área', 'as proximidades', 'este setor', 'este sistema')}.\n      {OneOf('Esteja', 'Fique', 'Mantenha-se')} {OneOf('vigilante', 'alerta', 'ligado', 'de olho')}\n      {Occasionally(3,', {F('Honorific')}')}.\n   \")}\n}\n\n",
      "default": true,
      "name": "Entered signal source",
      "description": "Triggered when your ship enters a signal source"
    },
    "Entered supercruise": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'engage')}\r\n{SetState('eddi_context_supercruise', \"yes\")}\r\n\r\n{Pause(1000)}\r\n\r\n{OneOf(\"{ShipName()}\", \"Você\")} {OneOf(\"entrou em\", \"saltou para\")} supervelocidade.\r\n\r\n",
      "default": true,
      "name": "Entered supercruise",
      "description": "Triggered when your ship enters supercruise"
    },
    "Exploration data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Comprados dados de {OneOf('sistema', 'exploração')} de {P(event.system)}\",\r\n            \"dados de {OneOf('sistema', 'exploração')} de {P(event.system)} agora disponíveis\",\r\n            \"{Occasionally(3, '{ShipName()}')} Recebeu dados de {OneOf('sistema', 'exploração')} de {P(event.system)} dos serviços da estação\",\r\n            \"Recebimento de dados de {OneOf('sistema', 'exploração')} de {P(event.system)} confirmado\")}.",
      "default": true,
      "name": "Exploration data purchased",
      "description": "Triggered when you purchase exploration data"
    },
    "Exploration data sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Dados de exploração de {len(event.systems)} sistema{if len(event.systems) > 1:s} vendido{if len(event.systems) > 1:s} por {Humanise(event.reward)} créditos\r\n\r\n{if len(event.firsts) > 0:\r\n    , com um bônus de {Humanise(event.bonus)} créditos por\r\n    {set N to event.firsts}\r\n    {if len(event.firsts) = 1: {set N to:uma}}\r\n    {N} primeir{if len(event.firsts) = 1:a |else:as} descobert{if len(event.firsts) = 1:a |else:as}\r\n}\r\n.\r\n",
      "default": true,
      "name": "Exploration data sold",
      "description": "Triggered when you sell exploration data"
    },
    "Exploration promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Você foi reconhecido por sua contribuição à exploração da galácsiaa {F(\"Honorific\")}.\r\n\r\nVocê {OneOf(\"está agora no\",\"alcançou o\",\"conquistou o\")} rank de {cmdr.explorationrating.name}.\r\n",
      "default": true,
      "name": "Exploration promotion",
      "description": "Triggered when your exploration rank increases"
    },
    "Federation promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if (cmdr.gender) = \"Female\":\r   {set A to:a}\r|else:\r   {set A to:o}\r}\r\n\r\nParabéns Comandante {cmdr.name}!\r\n\r\n{OneOf(\"A Marinha Federal {OneOf('concedeu-lhe uma promoção', 'promoveu-lhe', 'avançou-lhe')} ao rank de {event.rank}\",\r\n       \"Você {OneOf(\\\"{OneOf('elevou sua posição','foi promovid{A}')} a\\\",\r\n                        \\\"{OneOf('recebeu','mereceu')} um rank mais alto de\\\")} {event.rank} na Marinha Federal\")}\r\n\r\n{Occasionally(2, \"por seus serviços à Federação\")}\r\n\r\n{if (cmdr.gender) = \"Female\":\r   {set A to:a}\r|else:\r   {set A to:\"\"}\r}\r\n\r\n{if event.rank = \"Cabo\":\r\n   , e recebeu permissão para comprar a nave Federal Dropship\r\n|elif event.rank = \"Terceiro-Sargento\":\r\n   , e recebeu acesso ao sistema {P(\"Sol\")}\r\n|elif event.rank = \"Segundo-Sargento\":\r\n   , e recebeu permissão para comprar a nave Federal Assault Ship. E agora tem permissão para entrar nos sistemas {P(\"Vega\")} e {P(\"Beta Hydri\")}\r\n|elif event.rank = \"Primeiro-Sargento\":\r\n   , e recebeu acesso ao sistema PLX 695\r\n|elif event.rank = \"Suboficial\":\r\n   , e recebeu permissão para comprar a nave Federal Gunship. E agora tem permissão para entrar no sistema Ross 128\r\n|elif event.rank = \"Tenente\":\r\n   , e recebeu acesso ao sistema {P(\"Exbeur\")}\r\n|elif event.rank = \"Capitão de Corveta\":\r\n   , e recebeu acesso ao sistema {P(\"Hors\")}\r\n|elif event.rank = \"Contra-Almirante\":\r\n   , e recebeu permissão para comprar a nave Federal Corvette\r\n|elif event.rank = \"Almirante\":\r\n   . Você alcançou o mais alto rank possível Senhor{A}\r\n}.\r\n",
      "default": true,
      "name": "Federation promotion",
      "description": "Triggered when your rank increases with the Federation"
    },
    "Fighter docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Caça\r\n{OneOf(\"pousado {Occasionally(2, 'na nave')}\",\"de volta a bordo\")}.\r\n\r\n{SetState('eddi_state_fighter_docked', true)}\r\n",
      "default": true,
      "name": "Fighter docked",
      "description": "Triggered when you dock a fighter with your ship"
    },
    "Fighter launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Caça\r\n{OneOf(\"{OneOf('saindo', 'sendo lançado')} {Occasionally(2, 'da nave')}\",\r\n       \"lançado\",\r\n       \"liberado\",\r\n       \"saindo\")}.\r\n\r\n{SetState('eddi_state_fighter_docked', false)}",
      "default": true,
      "name": "Fighter launched",
      "description": "Triggered when you launch a fighter from your ship"
    },
    "Fighter rebuilt": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Caça\r\n\r\n{if state.eddi_state_fighter_docked != true:\r\n    reconstruído e pronto para \r\n    {OneOf(\"ser lançado\", \"ser liberado\")}\r\n|else:\r\n    pronto para relançamento\r\n}.",
      "default": true,
      "name": "Fighter rebuilt",
      "description": "Triggered when a ship's fighter is rebuilt in the hangar"
    },
    "File Header": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "File Header",
      "description": "Triggered when the file header is read"
    },
    "Fine incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_fine_name', event.victim)}\r\n{SetState('eddi_context_fine_faction', event.faction)}\r\n{SetState('eddi_context_fine_amount', event.fine)}\r\n\r\n{_ Update Fines & Bounties}\r\n{F(\"FinesBounties_Add\")}\r\n\r\nVocê {OneOf(\"foi multado em\",\"deve à {P(event.faction)}\")} {Humanise(event.fine)} créditos por {event.crime}.\r\n",
      "default": true,
      "name": "Fine incurred",
      "description": "Triggered when you incur a fine"
    },
    "Fine paid": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'pay')}\r\n{SetState('eddi_context_fine_amount', event.amount)}\r\n\r\n{_ Update Fines & Bounties}\r\n{F(\"FinesBounties_Delete\")}\r\n\r\nMulta paga no valor de {Humanise(event.amount)} créditos.\r\n\r\n{if event.brokerpercentage:\r\n  {Pause(1000)}\r\n  O agente ficou com\r\n  {floor((event.amount / (100 - event.brokerpercentage)) * event.brokerpercentage)} créditos.\r\n}",
      "default": true,
      "name": "Fine paid",
      "description": "Triggered when you pay a fine"
    },
    "FinesBounties_Add": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_Add }\r\n{_ Add Bonds, Bounties & Fines to memory store }\r\n\r\n{if state.eddi_context_bounties_initialised != \"yes\": {F(\"FinesBounties_Initialise\")}}\r\n\r\n{set shipid to cast(state.eddi_context_currentshipid, \"s\")}\r\n{SetState('eddi_context_currentshipname', ShipName())}\r\n\r\n{_ Unfortunately the variables needed for Power bonuses to be accurate, are not yet available in EDDI. }\r\n{_ Need: Power Galactic Rank, and Power Personal Rank }\r\n{_ Placeholder variables and code are included if/when they are ever implemented in the future. }\r\n\r\n{_ Setup placeholder Power variables array. Not required if added to EDDI in future. _}\r\n{_ Alternatively, manually edit these to match your Poweer Pledge / own rank / Power rank. _}\r\n{set power to [\"pledged\":\"None\", \"personalrank\": 0, \"galacticrank\": 0]}\r\n\r\n\r\n{if state.eddi_context_last_subject = \"bond\":\r\n    {set type to \"Bond\"}\r\n    {set evtrewards to [event.awardingfaction: event.reward]}\r\n\r\n|elif state.eddi_context_last_subject = \"bounty\" && state.eddi_context_last_action = \"award\":\r\n    {set type to \"BountyAwd\"}\r\n    {set evtrewards to []}\r\n    {for reward in event.rewards:\r\n        {set evtrewards to union(evtrewards, [reward.faction: reward.amount])}\r\n    }\r\n\r\n|elif state.eddi_context_last_subject = \"bounty\" && state.eddi_context_last_action = \"incur\":\r\n    {set type to \"BountyInc\"}\r\n    {set evtrewards to [event.faction: event.bounty]}\r\n\r\n|elif state.eddi_context_last_subject = \"powerbounty\" && state.eddi_context_last_action = \"award\":\r\n    {_ Placeholder for Power Bounties _}\r\n\r\n|elif state.eddi_context_last_subject = \"powerbounty\" && state.eddi_context_last_action = \"incur\":\r\n    {_ Placeholder for Power Bounties _}\r\n\r\n|elif state.eddi_context_last_subject = \"stellarbounty\" && state.eddi_context_last_action = \"award\":\r\n    {_ Placeholder for Interstellar Bounties _}\r\n\r\n|elif state.eddi_context_last_subject = \"stellarbounty\" && state.eddi_context_last_action = \"incur\":\r\n    {_ Placeholder for Interstellar Bounties _}\r\n\r\n|elif state.eddi_context_last_subject = \"fine\":\r\n    {set type to \"Fine\"}\r\n    {set evtrewards to [event.faction: event.fine]}\r\n}\r\n\r\n{set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n{set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n{set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n{set bounties_system_array to split(state.eddi_context_bounties_system, \"+=\")}\r\n{set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n\r\n\r\n{for evtfaction, evtamount in evtrewards:\r\n\r\n    {set position to find(bounties_faction_array, evtfaction, 0)}\r\n    {set updatedata to 0}\r\n    {set pwrpct to 1}\r\n\r\n    {if type = \"Bond\" || type = \"BountyAwd\":\r\n\r\n        {if type = \"BountyAwd\":\r\n\r\n            {_ If in Power controlled space get extra bounty -> A. Lavigny-Duval, Z. Hudson, P. Antal, Y. Grom }\r\n            {if system.powerstate = \"Control\" || system.powerstate = \"Exploited\":\r\n\r\n                {if system.power = \"Arissa Lavigny-Duval\" || system.power = \"Zachary Hudson\":\r\n\r\n                    {_ ALD gets +20% base rate, even if not pledged! _}\r\n                    {if system.power = \"Arissa Lavigny-Duval\": {set pwrpct to 1.2} }\r\n\r\n                    {_ if joined power & personal rank is 2 or more, get bonus amount }\r\n                    {if power.personalrank > 1 && power.pledge = system.power:\r\n                        {set pwrpct to 1.2}\r\n\r\n                        {_ if power galactic rank 3, 2 or 1 = +10%, +20% or +30% }\r\n                        {if power.galacticrank = 3: {set pwrpct to 1.3}\r\n                        |elif power.galacticrank = 2: {set pwrpct to 1.4}\r\n                        |elif power.galacticrank = 1: {set pwrpct to 1.5}\r\n                        }\r\n                    }\r\n\r\n                    {_ if personal rank is 5 = flat +100% bonus }\r\n                    {if power.personalrank = 5 && power.pledge = system.power:\r\n                        {set pwrpct to 2}\r\n                    }\r\n\r\n                |elif system.power = \"Yuri Grom\":\r\n                    {_ Y.Grom +20% base, plus 2% at personal rank =>2 }\r\n                    {_ or 5/7/15% at galactic ranks 3/2/1 _}\r\n                    {set pwrpct to 1.2}\r\n\r\n                    {_ if joined power & personal rank is 2 or more, get +2% on amount }\r\n                    {if power.personalrank > 1 && power.pledge = system.power:\r\n                        {set pwrpct to pwrpct + 0.02}\r\n\r\n                        {_ if power galactic rank 3, 2 or 1 = +3%, +5% or +13% }\r\n                        {if power.galacticrank = 3: {set pwrpct to pwrpct + 0.03}\r\n                        |elif power.galacticrank = 2: {set pwrpct to pwrpct + 0.05}\r\n                        |elif power.galacticrank = 1: {set pwrpct to pwrpct + 0.13}\r\n                        }\r\n                    }\r\n\r\n                |elif system.power = \"Pranav Antal\":\r\n                    {_ if personal rank is 5 = flat +100% bonus in controlled or exploited systems }\r\n                    {if power.personalrank = 5 && power.pledge = system.power:\r\n                        {set pwrpct to 2}\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        {set evtamount to floor(evtamount * pwrpct)}\r\n\r\n        {while position > -1:\r\n            {if bounties_type_array[position] = type:\r\n\r\n                {_ Add amount to stored amount }\r\n                {set amount to evtamount + bounties_amount_array[position]}\r\n\r\n                {_ Update array }\r\n                {set bounties_amount_array to union(bounties_amount_array, [position:amount])}\r\n\r\n                {set updatedata to 1}\r\n                {set position to -1}\r\n            |else:\r\n                {set position to find(bounties_faction_array, evtfaction, position + 1)}\r\n            }\r\n        }\r\n\r\n    |elif type = \"Fine\" || type = \"BountyInc\":\r\n\r\n        {_ If in Power controlled space incur extra fines & bounties }\r\n        {_ A. Lavigny-Duval, P.Antal, A. Delaine}\r\n\r\n        {_ ALD - F&B Double in control systems _}\r\n        {_ PA - F&B Double in control systems, or +50% in all super-powers _}\r\n        {_ A.Delaine - F&B -20%,  @ rank =>2, -30/40/50 at galactic rank 3/2/1 , rank 5 = -100% _}\r\n\r\n        {if (system.power = \"Arissa Lavigny-Duval\" || system.power = \"Pranav Antal\")\r\n           && system.powerstate = \"Control\":\r\n            {type} doubled in {system.power} controlled space.\r\n        |elif system.power = \"Pranav Antal\":\r\n            {type} increased by 50% in Pranav Antal exploited space.\r\n        |elif system.power = \"Archon Delaine\":\r\n\r\n            {_ if joined power & personal rank is 2 or more, get -20% on fines & bounties incurred }\r\n            {if power.personalrank > 1 && power.pledge = system.power:\r\n                {set pwrpct to pwrpct - 0.2}\r\n\r\n                {_ if power galactic rank 3, 2 or 1 = -10%, -20% or -30% }\r\n                {if power.galacticrank = 3: {set pwrpct to pwrpct - 0.1}\r\n                |elif power.galacticrank = 2: {set pwrpct to pwrpct - 0.2}\r\n                |elif power.galacticrank = 1: {set pwrpct to pwrpct - 0.3}\r\n                }\r\n            }\r\n\r\n            {_ if personal rank is 5 = flat -100% bonus }\r\n            {if power.personalrank = 5 && power.pledge = system.power:\r\n                {set pwrpct to 0}\r\n            }\r\n        }\r\n\r\n        {set evtamount to ceil(evtamount * pwrpct)}\r\n\r\n        {while position > -1:\r\n            {if shipid = bounties_shipid_array[position]:\r\n                {if (bounties_type_array[position] = type)\r\n                 || (bounties_type_array[position] = \"Fine\" && type = \"BountyInc\")\r\n                 || (bounties_type_array[position] = \"BountyInc\" && type = \"Fine\"):\r\n\r\n                    {_ Add amount to stored amount }\r\n                    {set amount to evtamount + bounties_amount_array[position]}\r\n                    {_ Maximum bounty is 1MCr.  Is it still after v3.0? }\r\n                    {if type = \"BountyInc\" || bounties_type_array[position] = \"BountyInc\":\r\n                        {if amount > 1000000: {set amount to 1000000}}\r\n                    }\r\n\r\n                    {_ Update arrays }\r\n                    {if bounties_type_array[position] = \"Fine\" && type = \"BountyInc\":\r\n                        {set bounties_type_array to union(bounties_type_array, [position:type])}\r\n                    }\r\n                    {set bounties_amount_array to union(bounties_amount_array, [position:amount])}\r\n\r\n                    {set updatedata to 1}\r\n                    {set position to -1}\r\n                |else:\r\n                    {set position to find(bounties_faction_array, evtfaction, position + 1)}\r\n                }\r\n            |else:\r\n                {set position to find(bounties_faction_array, evtfaction, position + 1)}\r\n            }\r\n        }\r\n    }\r\n\r\n    {_ Add new data to arrays}\r\n    {if updatedata = 0:\r\n        {if len(state.eddi_context_bounties_type) = 0:\r\n            {set bounties_shipid_array to [shipid]}\r\n            {set bounties_type_array to [type]}\r\n            {set bounties_faction_array to [evtfaction]}\r\n            {set bounties_system_array to [system.name]}\r\n            {set bounties_amount_array to [evtamount]}\r\n        |else:\r\n            {set bounties_shipid_array to cat(bounties_shipid_array, [shipid])}\r\n            {set bounties_type_array to cat(bounties_type_array, [type])}\r\n            {set bounties_faction_array to cat(bounties_faction_array, [evtfaction])}\r\n            {set bounties_system_array to cat(bounties_system_array, [system.name])}\r\n            {set bounties_amount_array to cat(bounties_amount_array, [evtamount])}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Update State variable strings}\r\n{if len(state.eddi_context_bounties_type) = 0 && len(bounties_type_array) = 1:\r\n    {set sep to \"\"}\r\n|else:\r\n    {set sep to \"+=\"}\r\n}\r\n{SetState('eddi_context_bounties_shipid', join(bounties_shipid_array, sep))}\r\n{SetState('eddi_context_bounties_type', join(bounties_type_array, sep))}\r\n{SetState('eddi_context_bounties_faction', join(bounties_faction_array, sep))}\r\n{SetState('eddi_context_bounties_system', join(bounties_system_array, sep))}\r\n{SetState('eddi_context_bounties_amount', join(bounties_amount_array, sep))}\r\n",
      "default": true,
      "name": "FinesBounties_Add",
      "description": "Add Bonds, Bounties & Fines to memory store"
    },
    "FinesBounties_CheckContacts": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_ContactsCheck}\r\n{_ Function to report Bonds/Bounties or Fines/Bounties to collect or pay}\r\n\r\n{if len(state.eddi_context_bounties_type) > 0 && state.eddi_context_bounties_type != null:\r\n   {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n   {set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n   {set bounties_system_array to split(state.eddi_context_bounties_system, \"+=\")}\r\n\r\n   {set position to 0}\r\n   {for factions in bounties_faction_array:\r\n\r\n      {if factions = station.faction || factions = system.allegiance || system.name = bounties_system_array[position]:\r\n\r\n         {if bounties_type_array[position] = \"Bond\":\r\n            {set bond to 1}\r\n         |elif bounties_type_array[position] = \"BountyAwd\":\r\n            {set bountyawd to 1}\r\n         |elif bounties_type_array[position] = \"BountyInc\":\r\n            {set bountyinc to 1}\r\n         |elif bounties_type_array[position] = \"Fine\":\r\n            {set fine to 1}\r\n         }\r\n      }\r\n   {set position to position + 1}\r\n   }\r\n}\r\n\r\n{if bountyawd = 1 || bond = 1:\r\n   Lembretes: Você tem\r\n   {if bond = 1: pagamentos de combate}\r\n   {if bountyawd = 1:\r\n      {if bond = 1: and}\r\n      recompensas\r\n   }\r\n   a coletar.\r\n}\r\n\r\n{if fine = 1 || bountyinc = 1:\r\n   {if bountyawd = 1 || bond = 1:\r\n      Você também\r\n   |else:\r\n      Lembrete: Vocẽ\r\n   }\r\n   tem\r\n   {if fine = 1: multas}\r\n   {if bountyinc = 1:\r\n      {if fine = 1: e}\r\n      recompensas\r\n   }\r\n   a serem pagas.\r\n}\r\n",
      "default": true,
      "name": "FinesBounties_CheckContacts",
      "description": "Function to report Bonds/Bounties or Fines/Bounties to collect or pay in the local system."
    },
    "FinesBounties_CheckShip": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_CheckShip}\r\n{_ Checks current ship for any crimes}\r\n\r\n{if status.vehicle = \"VRS\" || status.vehicle = \"Caça\":\r\n    {set v_type to \"Sua nave atual\"}\r\n|else:\r\n    {set v_type to cat(OneOf(\"Esta\", \"Sua\"), \" nave\")}\r\n}\r\n\r\n{if len(state.eddi_context_bounties_type) > 0 && state.eddi_context_bounties_type != null && (find(state.eddi_context_bounties_type, \"Fine\") > -1 || find(state.eddi_context_bounties_type, \"BountyInc\") > -1):\r\n\r\n    {set shipid to cast(state.eddi_context_currentshipid, \"s\")}\r\n    {set shipname to ShipName(shipid)}\r\n\r\n    {set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n    {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n    {set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n\r\n    {_ Set up temp arrays of items that match \"Fine\" or \"BountyInc\"}\r\n\r\n    {_ Set up variables}\r\n    {set ship_fines_count to 0}\r\n    {set ship_bounties_count to 0}\r\n    {set ship_fines_total to 0}\r\n    {set ship_bounties_total to 0}\r\n    {set crime_array to []}\r\n\r\n    {_ run loop from 0 to number of entries}\r\n    {set cur to 0}\r\n    {while cur < len(bounties_type_array):\r\n        {if bounties_shipid_array[cur] = shipid:\r\n            {if bounties_type_array[cur] = \"Fine\"\r\n                {set ship_fines_count to ship_fines_count + 1}\r\n                {set ship_fines_total to ship_fines_total + bounties_amount_array[cur]}\r\n            |elif bounties_type_array[cur] = \"BountyInc\":\r\n                {set ship_bounties_count to ship_bounties_count + 1}\r\n                {set ship_bounties_total to ship_bounties_total + bounties_amount_array[cur]}\r\n            }\r\n        |else:\r\n            {if bounties_type_array[cur] = \"Fine\" || bounties_type_array[cur] = \"BountyInc\":\r\n                {set pos to find(crime_array, bounties_shipid_array[cur])}\r\n                {if pos > -1:\r\n                    {set pos to bounties_shipid_array[cur]}\r\n                    {set amount to crime_array[pos] + bounties_amount_array[cur]}\r\n                    {set crime_array to union(crime_array, [pos:amount])}\r\n                |else:\r\n                    {set pos to bounties_shipid_array[cur]}\r\n                    {set amount to bounties_amount_array[cur]}\r\n                    {set crime_array to union(crime_array, [pos:amount])}\r\n                }\r\n           }\r\n       }\r\n       {set cur to cur + 1}\r\n    }\r\n\r\n    {_ Report info}\r\n\r\n    {if ship_bounties_count > 0: Cuidado: {vehicle} está procurado!}\r\n\r\n    {if ship_fines_count = 1: {set N to:uma}\r\n    |else: {set N to ship_fines_count}\r\n    }\r\n\r\n    {if ship_fines_count > 0:\r\n        {if ship_bounties_count > 0: Ela |else: {v_type}}\r\n        tem {N} multa{if ship_fines_count > 1:s} a pagar,\r\n        num total de {ship_fines_total} créditos.\r\n    }\r\n\r\n    {if ship_bounties_count = 1: {set N to:uma}\r\n    |else: {set N to ship_fines_count}\r\n    }\r\n\r\n    {if ship_bounties_count > 0:\r\n        {if ship_fines_count > 0: Ela também |else: Ela}\r\n        tem {N} recompensa{if ship_fines_count > 1:s |else:y} a pagar,\r\n        num total de {ship_bounties_total} créditos.\r\n    }\r\n\r\n    {if len(crime_array) > 0:\r\n        {if ship_fines_count = 0 && ship_bounties_count = 0:\r\n            {v_type}\r\n            {OneOf(\"está limpa. Entretanto, você tem mandados pendentes\",\r\n                   \"não tem mandados pendentes. Entretanto, há alguns\")}\r\n            nas suas outras naves.\r\n        |else:\r\n            Você também tem mandados pendentes em\r\n            {if len(crime_array) = 1: outra nave\r\n            |else: suas outras naves\r\n            }.\r\n        }\r\n\r\n        {set cur to 0}\r\n        {set length to len(crime_array) - 1}\r\n        {for id, amount in crime_array:\r\n            {amount} credits on \r\n            {if ShipName(id) != \"your ship\": {ShipName(id)}\r\n            |else: {ShipCallsign(id)}\r\n            }\r\n            {set cur to cur + 1}\r\n            {if cur = length: and\r\n            |elif cur < length:,\r\n            }\r\n        }\r\n    }.\r\n\r\n|else:\r\n    {v_type} {OneOf(\"está limpa\", \"não tem mandados pendentes\")}.\r\n}\r\n",
      "default": true,
      "name": "FinesBounties_CheckShip",
      "description": "Checks current ship for any crimes."
    },
    "FinesBounties_ClearShip": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_ClearShip _}\r\n{_ Removes fines and bounties from ship, due to either death or ship sold _}\r\n\r\n{if len(state.eddi_context_bounties_type) > 0 && state.eddi_context_bounties_type != null:\r\n\r\n   {_ Use stored ident as this function can be called after a ship swap sale has changed it _}\r\n   {set shipid to cast(state.eddi_context_currentshipid, \"s\")}\r\n\r\n   {set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n   {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n\r\n   {set position to 0}\r\n   {for type in bounties_type_array:\r\n\r\n      {if (type = \"Fine\" || type = \"BountyInc\")\r\n          && bounties_shipid_array[position] = shipid\r\n          && state.eddi_context_selfdestruct != \"yes\":\r\n\r\n         {_ If Fine or Bounty Incurred, and not self destructed -> pay them all}\r\n\r\n         {set delete to \"yes\"}\r\n         {set temparray_type to token(state.eddi_context_bounties_type, \"+=\", position, \"Delete\")}\r\n         {SetState('eddi_context_bounties_type', temparray_type)}\r\n\r\n      |elif (type = \"Bond\" || type = \"BountyAwd\")\r\n            && state.eddi_context_cmdrdied = \"yes\"):\r\n         {_ If Bond or Bounty Awarded and player died -> lose them all}\r\n\r\n         {set delete to \"yes\"}\r\n         {set temparray_type to token(state.eddi_context_bounties_type, \"+=\", position, \"Delete\")}\r\n         {SetState('eddi_context_bounties_type', temparray_type)}\r\n\r\n      }\r\n      {set position to position + 1}\r\n   }\r\n}\r\n\r\n{SetState('eddi_context_cmdrdied', \"no\")}\r\n{SetState('eddi_context_selfdestruct', \"no\")}\r\n\r\n{if delete = \"yes\":\r\n\r\n   {set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n   {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n   {set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n   {set bounties_system_array to split(state.eddi_context_bounties_system, \"+=\")}\r\n   {set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n   {set position to 0}\r\n\r\n   {for type in bounties_type_array:\r\n      {if type = \"Delete\":\r\n\r\n         {_ Rebuild and modify text string from array}\r\n         {set bounties_shipid_array to join(except(bounties_shipid_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_type_array to join(except(bounties_type_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_faction_array to join(except(bounties_faction_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_system_array to join(except(bounties_system_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_amount_array to join(except(bounties_amount_array, [position:\"\"]), \"+=\")}\r\n\r\n         {_ Rewrite State variable strings}\r\n         {SetState('eddi_context_bounties_shipid', bounties_shipid_array)}\r\n         {SetState('eddi_context_bounties_type', bounties_type_array)}\r\n         {SetState('eddi_context_bounties_faction', bounties_faction_array)}\r\n         {SetState('eddi_context_bounties_system', bounties_system_array)}\r\n         {SetState('eddi_context_bounties_amount', bounties_amount_array)}\r\n\r\n         {_ Re-split data}\r\n         {set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n         {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n         {set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n         {set bounties_system_array to split(state.eddi_context_bounties_system, \"+=\")}\r\n         {set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n      |else:\r\n         {set position to position + 1}\r\n      }\r\n   }\r\n}\r\n",
      "default": true,
      "name": "FinesBounties_ClearShip",
      "description": "Removes fines and bounties from ship, due to either death or ship sold"
    },
    "FinesBounties_Delete": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_Delete}\r\n{_ Remove paid/collected item from the memory store}\r\n\r\n{set shipid to cast(state.eddi_context_currentshipid, \"s\")}\r\n\r\n{if state.eddi_context_last_subject = \"bond\":\r\n   {set type to \"Bond\"}\r\n   {_ set amount to event.amount _}\r\n|elif state.eddi_context_last_subject = \"bounty\":\r\n   {set type to \"BountyAwd\"}\r\n|elif state.eddi_context_last_subject = \"bountypaid\":\r\n   {_ This is a placeholder until it's implemented in EDDI _}\r\n   {set type to \"BountyInc\"}\r\n|elif state.eddi_context_last_subject = \"fine\":\r\n   {set type to \"Fine\"}\r\n   {set amount to event.amount}\r\n}\r\n\r\n{set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n{set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n{set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n{set bounties_system_array to split(state.eddi_context_bounties_system, \"+=\")}\r\n{set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n\r\n{if type = \"BountyAwd\" || type = \"Bond\":\r\n   {for reward in event.rewards:\r\n\r\n      {set position to 0}\r\n      {for faction in bounties_faction_array:\r\n\r\n         {_ If collecting at Interstellar Factors _}\r\n         {set IF_amount to floor(bounties_amount_array[position] * 0.75)}\r\n\r\n         {if (reward.faction = faction || reward.amount = IF_amount) && bounties_type_array[position] = type:\r\n\r\n            {_ Rebuild data}\r\n            {set bounties_shipid_array to join(except(bounties_shipid_array, [position:\"\"]), \"+=\")}\r\n            {set bounties_type_array to join(except(bounties_type_array, [position:\"\"]), \"+=\")}\r\n            {set bounties_faction_array to join(except(bounties_faction_array, [position:\"\"]), \"+=\")}\r\n            {set bounties_system_array to join(except(bounties_system_array, [position:\"\"]), \"+=\")}\r\n            {set bounties_amount_array to join(except(bounties_amount_array, [position:\"\"]), \"+=\")}\r\n\r\n            {_ Rewrite data}\r\n            {SetState('eddi_context_bounties_shipid', bounties_shipid_array)}\r\n            {SetState('eddi_context_bounties_type', bounties_type_array)}\r\n            {SetState('eddi_context_bounties_faction', bounties_faction_array)}\r\n            {SetState('eddi_context_bounties_system', bounties_system_array)}\r\n            {SetState('eddi_context_bounties_amount', bounties_amount_array)}\r\n\r\n            {_ Re-split data}\r\n            {set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n            {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n            {set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n            {set bounties_system_array to split(state.eddi_context_bounties_system, \"+=\")}\r\n            {set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n         |else:\r\n            {set position to position + 1}\r\n         }\r\n      }\r\n   }\r\n\r\n|elif type = \"Fine\" || type = \"BountyInc\":\r\n   {_ If Fine and Amount match, delete it}\r\n\r\n   {_ If paying at Interstellar Factors _}\r\n   {set IF_amount to ceil(amount * 1.25)}\r\n\r\n   {set position to 0}\r\n   {for amounts in bounties_amount_array:\r\n\r\n      {set amounts to cast(amounts, \"n\")}\r\n      {set system to SystemDetails(system.name)}\r\n\r\n      {if system.faction = bounties_faction_array[position]\r\n          && bounties_type_array[position] = type\r\n          && (amounts = amount || amounts = IF_amount):\r\n\r\n         {_ Rebuild data}\r\n         {set bounties_shipid_array to join(except(bounties_shipid_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_type_array to join(except(bounties_type_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_faction_array to join(except(bounties_faction_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_system_array to join(except(bounties_system_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_amount_array to join(except(bounties_amount_array, [position:\"\"]), \"+=\")}\r\n\r\n         {_ Rewrite data}\r\n         {SetState('eddi_context_bounties_shipid', bounties_shipid_array)}\r\n         {SetState('eddi_context_bounties_type', bounties_type_array)}\r\n         {SetState('eddi_context_bounties_faction', bounties_faction_array)}\r\n         {SetState('eddi_context_bounties_system', bounties_system_array)}\r\n         {SetState('eddi_context_bounties_amount', bounties_amount_array)}\r\n\r\n         {_ Re-split data}\r\n         {set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n         {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n         {set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n         {set bounties_system_array to split(state.eddi_context_bounties_system, \"+=\")}\r\n         {set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n      |else:\r\n         {set position to position + 1}\r\n      }\r\n   }\r\n}\r\n",
      "default": true,
      "name": "FinesBounties_Delete",
      "description": "Remove paid/collected item from the memory store"
    },
    "FinesBounties_Initialise": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_Initialise}\r\n{_ Setup Fines & Bounties 'database'}\r\n\r\n{SetState('eddi_context_bounties_shipid', \"\")}\r\n{SetState('eddi_context_bounties_type', \"\")}\r\n{SetState('eddi_context_bounties_faction', \"\")}\r\n{SetState('eddi_context_bounties_system', \"\")}\r\n{SetState('eddi_context_bounties_amount', \"\")}\r\n\r\n{SetState('eddi_context_bounties_initialised', \"yes\")}\r\n\r\nMultas e Recompensas Inicializado.\r\n\r\n",
      "default": true,
      "name": "FinesBounties_Initialise",
      "description": "Setup Fines & Bounties 'database'"
    },
    "FinesBounties_ReportBonds": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_ReportBonds}\r\n{_ Report on the Bonds you have earned}\r\n\r\n{if len(state.eddi_context_bounties_type) > 0 && state.eddi_context_bounties_type != null && find(state.eddi_context_bounties_type, \"Bond\") > -1:\r\n   {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n   {set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n   {set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n\r\n   {_ Set up temp arrays of items that match \"Bond\"}\r\n\r\n   {_ Set up blank temporary arrays}\r\n   {set temparray_faction to []}\r\n   {set temparray_amount to []}\r\n   {set total_amount to 0}\r\n\r\n   {_ run loop from 0 to number of entries}\r\n   {set cur to 0}\r\n   {while cur < len(bounties_type_array):\r\n      {if bounties_type_array[cur] = \"Bond\":\r\n         {set temparray_faction to cat(temparray_faction, [bounties_faction_array[cur]])}\r\n         {set temparray_amount to cat(temparray_amount, [bounties_amount_array[cur]])}\r\n         {set total_amount to total_amount + bounties_amount_array[cur]}\r\n      }\r\n      {set cur to cur + 1}\r\n   }\r\n\r\n   {_ Read info from temp arrays}\r\n\r\n   Pagamentos de combate concedidos:\r\n\r\n   {if len(temparray_faction) > 0:\r\n\r\n      {if len(temparray_faction) > 1:\r\n         {OneOf(\"Você tem {len(temparray_faction)} pagamento{if len(temparray_faction) != 1:s} de combate para recolher, num\",\r\n                \"{len(temparray_faction)} facç{if len(temparray_faction) != 1: ão deve|else: ões devem} a você um\")} \r\n\r\n         total de {Humanise(total_amount)} créditos.\r\n      }\r\n\r\n      Recolha\r\n      {set cur to 0}\r\n      {set length to len(temparray_faction) - 1}\r\n      {while cur < len(temparray_faction):\r\n         {Humanise(temparray_amount[cur])}\r\n         {if len(temparray_faction) = 1: créditos}\r\n         da {temparray_faction[cur]}\r\n         {set cur to cur + 1}\r\n         {if cur = length: e\r\n         |elif cur < length:,\r\n         }\r\n      }\r\n   |else:\r\n      Você não tem pagamentos de combate para  recolher {Occasionally(2, \"{OneOf('agora','neste momento')}\")}\r\n   }\r\n|else:\r\n   Você não tem pagamentos de combate para recolher {Occasionally(2, \"{OneOf('agora','neste momento')}\")}\r\n}.\r\n",
      "default": true,
      "name": "FinesBounties_ReportBonds",
      "description": "Report on the Bonds you have earned"
    },
    "FinesBounties_ReportBountiesAwarded": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_ReportBountiesAwarded}\r\n{_ Report on the Bounties you have been awarded}\r\n\r\n{if len(state.eddi_context_bounties_type) > 0 && state.eddi_context_bounties_type != null && find(state.eddi_context_bounties_type, \"BountyAwd\") > -1:\r\n   {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n   {set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n   {set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n\r\n   {_ Set up temp arrays of items that match \"Bounty\"}\r\n\r\n   {_ Set up blank temporary arrays}\r\n   {set temparray_faction to []}\r\n   {set temparray_amount to []}\r\n   {set total_amount to 0}\r\n\r\n   {_ run loop from 0 to number of entries}\r\n   {set cur to 0}\r\n   {while cur < len(bounties_type_array):\r\n      {if bounties_type_array[cur] = \"BountyAwd\":\r\n         {set temparray_faction to cat(temparray_faction, [bounties_faction_array[cur]])}\r\n         {set temparray_amount to cat(temparray_amount, [bounties_amount_array[cur]])}\r\n         {set total_amount to total_amount + bounties_amount_array[cur]}\r\n      }\r\n      {set cur to cur + 1}\r\n   }\r\n\r\n   {_ Read info from temp arrays}\r\n\r\n   Recompensas concedidas:\r\n\r\n   {if len(temparray_faction) > 1:\r\n      {OneOf(\"Você tem {len(temparray_faction)} recompens{if len(temparray_faction) = 1:a |else:as} para recolher,\",\r\n             \"{len(temparray_faction)} facç{if len(temparray_faction) = 1:ão |else:ões} estão lhe devendo\")} \r\n      num total de {Humanise(total_amount)} créditos.\r\n   }\r\n\r\n   Recolha\r\n   {set cur to 0}\r\n   {set length to len(temparray_faction) - 1}\r\n   {while cur < len(temparray_faction):\r\n      {Humanise(temparray_amount[cur])}\r\n      {if len(temparray_faction) = 1: créditos}\r\n      de\r\n      {if temparray_faction[cur] = \"Aliança\" || temparray_faction[cur] = \"Império\"\r\n          || temparray_faction[cur] = \"Federação\": PITOMBA }\r\n      {temparray_faction[cur]}\r\n      {set cur to cur + 1}\r\n      {if cur = length: e\r\n      |elif cur < length:,\r\n      }\r\n   }\r\n\r\n|else:\r\n   Você não tem recompensas para recolher {Occasionally(2, \"{OneOf('agora','neste momento')}\")}\r\n}.\r\n",
      "default": true,
      "name": "FinesBounties_ReportBountiesAwarded",
      "description": "Report on the Bounties you have earned"
    },
    "FinesBounties_ReportBountiesIncurred": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_ReportBountiesIncurred}\r\n{_ Report on the Bounties you have against you}\r\n\r\n{if len(state.eddi_context_bounties_type) > 0 && state.eddi_context_bounties_type != null && find(state.eddi_context_bounties_type, \"BountyInc\") > -1:\r\n\r\n   {set shipid to cast(state.eddi_context_currentshipid, \"s\")}\r\n\r\n   {set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n   {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n   {set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n   {set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n\r\n   {_ Set up temp arrays of items that match \"BountyInc\"}\r\n\r\n   {_ Set up blank temporary arrays}\r\n   {set temparray_shipid to []}\r\n   {set temparray_type to []}\r\n   {set temparray_faction to []}\r\n   {set temparray_amount to []}\r\n   {set total_amount to 0}\r\n   {set ship_total to 0}\r\n   {set crime_array to []}\r\n\r\n   {_ run loop from 0 to number of entries}\r\n   {set cur to 0}\r\n   {while cur < len(bounties_type_array):\r\n      {if bounties_type_array[cur] = \"BountyInc\":\r\n         {if bounties_shipid_array[cur] = shipid:\r\n            {set temparray_shipid to cat(temparray_shipid, [bounties_shipid_array[cur]])}\r\n            {set temparray_type to cat(temparray_type, [bounties_type_array[cur]])}\r\n            {set temparray_faction to cat(temparray_faction, [bounties_faction_array[cur]])}\r\n            {set temparray_amount to cat(temparray_amount, [bounties_amount_array[cur]])}\r\n            {set ship_total to ship_total + bounties_amount_array[cur]}\r\n         |else:\r\n            {set pos to find(crime_array, bounties_shipid_array[cur])}\r\n            {if pos > -1:\r\n                {set pos to bounties_shipid_array[cur]}\r\n                {set amount to crime_array[pos] + bounties_amount_array[cur]}\r\n                {set crime_array to union(crime_array, [pos:amount])}\r\n            |else:\r\n                {set pos to bounties_shipid_array[cur]}\r\n                {set amount to bounties_amount_array[cur]}\r\n                {set crime_array to union(crime_array, [pos:amount])}\r\n            }\r\n         }\r\n         {set total_amount to total_amount + bounties_amount_array[cur]}\r\n      }\r\n      {set cur to cur + 1}\r\n   }\r\n\r\n   {set diff to total_amount - ship_total}\r\n\r\n   {_ Read info from temp arrays}\r\n\r\n   Recompensas sofridas:\r\n\r\n   {if len(temparray_faction) > 0:\r\n\r\n      {if len(temparray_faction) > 1:\r\n         {OneOf(\"Você tem {len(temparray_faction)} recompensa para pagar. Você deve\",\r\n                \"{len(temparray_faction)} facções colocaram sua cabeça a prêmio por\")} \r\n         um total de {total_amount} créditos.\r\n      }\r\n\r\n      Você tem de pagar\r\n      {set cur to 0}\r\n      {set length to len(temparray_faction) - 1}\r\n      {while cur < len(temparray_faction):\r\n         {temparray_amount[cur]}\r\n         {if len(temparray_faction) = 1: créditos}\r\n         a {temparray_faction[cur]}\r\n         {set cur to cur + 1}\r\n         {if cur = length: e\r\n         |elif cur < length:,\r\n         }\r\n      }.\r\n\r\n      {if diff > 0:\r\n         Você também deve {Humanise(diff)} créditos de recompensas em\r\n      |else:\r\n         {Occasionally(2,\"{OneOf('Entretanto,','Porém,')}\")} você não tem recompensas nas suas outras naves.\r\n      }\r\n\r\n   |else:\r\n      Não colocaram nenhuma recompensa por esta nave {Occasionally(2, \"{OneOf('neste momento','desta vez')}\")}.\r\n      Porém, você tem {Humanise(diff)} créditos em recompensas na\r\n   }\r\n\r\n   {if diff > 0:\r\n      {if len(crime_array) = 1: outra nave\r\n      |else: suas outras naves\r\n      }.\r\n\r\n      {set cur to 0}\r\n      {set length to len(crime_array) - 1}\r\n      {for id, amount in crime_array:\r\n         {amount} créditos na \r\n         {if ShipName(id) != \"your ship\": {ShipName(id)}\r\n         |else: {ShipCallsign(id)}\r\n         }\r\n         {set cur to cur + 1}\r\n         {if cur = length: e\r\n         |elif cur < length:,\r\n         }\r\n      }\r\n   }.\r\n\r\n|else:\r\n   Você não levou nenhuma recompensa {Occasionally(2, \"{OneOf('desta vez','neste momento')}\")}\r\n}\r\n",
      "default": true,
      "name": "FinesBounties_ReportBountiesIncurred",
      "description": "Report on the Bounties you have incurred on your current ship"
    },
    "FinesBounties_ReportFines": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_ReportFines}\r\n{_ Report on the Fines you have against you}\r\n\r\n{if len(state.eddi_context_bounties_type) > 0 && state.eddi_context_bounties_type != null && find(state.eddi_context_bounties_type, \"Fine\") > -1:\r\n\r\n   {set shipid to cast(state.eddi_context_currentshipid, \"s\")}\r\n\r\n   {set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n   {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n   {set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n   {set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n\r\n   {_ Set up temp arrays of items that match \"Fine\"}\r\n\r\n   {_ Set up blank temporary arrays}\r\n   {set temparray_shipid to []}\r\n   {set temparray_type to []}\r\n   {set temparray_faction to []}\r\n   {set temparray_amount to []}\r\n   {set total_amount to 0}\r\n   {set ship_total to 0}\r\n   {set crime_array to []}\r\n\r\n   {_ run loop from 0 to number of entries}\r\n   {set cur to 0}\r\n   {while cur < len(bounties_type_array):\r\n\r\n      {if bounties_type_array[cur] = \"Fine\":\r\n         {if bounties_shipid_array[cur] = shipid:\r\n            {set temparray_shipid to cat(temparray_shipid, [bounties_shipid_array[cur]])}\r\n            {set temparray_type to cat(temparray_type, [bounties_type_array[cur]])}\r\n            {set temparray_faction to cat(temparray_faction, [bounties_faction_array[cur]])}\r\n            {set temparray_amount to cat(temparray_amount, [bounties_amount_array[cur]])}\r\n            {set ship_total to ship_total + bounties_amount_array[cur]}\r\n         |else:\r\n            {set pos to find(crime_array, bounties_shipid_array[cur])}\r\n            {if pos > -1:\r\n                {set pos to bounties_shipid_array[cur]}\r\n                {set amount to crime_array[pos] + bounties_amount_array[cur]}\r\n                {set crime_array to union(crime_array, [pos:amount])}\r\n            |else:\r\n                {set pos to bounties_shipid_array[cur]}\r\n                {set amount to bounties_amount_array[cur]}\r\n                {set crime_array to union(crime_array, [pos:amount])}\r\n            }\r\n         }\r\n         {set total_amount to total_amount + bounties_amount_array[cur]}\r\n      }\r\n      {set cur to cur + 1}\r\n   }\r\n\r\n   {set diff to total_amount - ship_total}\r\n\r\n   {_ Read info from temp arrays}\r\n\r\n   Multas recebidas:\r\n\r\n   {if len(temparray_faction) > 0:\r\n\r\n      {if len(temparray_faction) > 1:\r\n         {OneOf(\"Você tem {len(temparray_faction)} multas a pagar. Você deve\",\r\n                \"Você deve a {len(temparray_faction)} facções\")} \r\n         um total de {ship_total} créditos.\r\n      }\r\n\r\n      Você precisa pagar\r\n      {set cur to 0}\r\n      {set length to len(temparray_faction) - 1}\r\n      {while cur < len(temparray_faction):\r\n         {temparray_amount[cur]}\r\n         {if len(temparray_faction) = 1: créditos}\r\n         a {temparray_faction[cur]}\r\n         {set cur to cur + 1}\r\n         {if cur = length: e\r\n         |elif cur < length:,\r\n         }\r\n      }.\r\n\r\n      {if diff > 0:\r\n         Você também deve {diff} créditos em multas da\r\n      |else:\r\n         {Occasionally(2,\"{OneOf('Entreanto,','Porém,')}\")} você não tem multas em suas outras naves.\r\n      }\r\n\r\n   |else:\r\n      Você não tem multas a pagar nesta nave {Occasionally(2, \"{OneOf('desta vez','neste momento')}\")}.\r\n      Entretanto, você deve {diff} créditos em multas da \r\n   }\r\n\r\n   {if diff > 0:\r\n      {if len(crime_array) = 1: outra nave\r\n      |else: suas outras naves\r\n      }.\r\n\r\n      {set cur to 0}\r\n      {set length to len(crime_array) - 1}\r\n      {for id, amount in crime_array:\r\n         {amount} créditos na\r\n         {if ShipName(id) != \"your ship\": {ShipName(id)}\r\n         |else: {ShipCallsign(id)}\r\n         }\r\n         {set cur to cur + 1}\r\n         {if cur = length: e\r\n         |elif cur < length:,\r\n         }\r\n      }\r\n   }.\r\n|else:\r\n   Você não recebeu multas {Occasionally(2, \"{OneOf('desta vez','neste momento')}\")}\r\n}\r\n",
      "default": true,
      "name": "FinesBounties_ReportFines",
      "description": "Report on the Fines you have incurred on your current ship"
    },
    "Friends status": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Set uselist to \"white\" or \"black\", depending on which list you want to use to filter people _}\r\n{_ \"white\" will only allow notifications from people in this list (e.g. \"User1\", \"User2\", & \"User3\") _}\r\n{_ \"black\" will allow all notification EXCEPT those on this list (e.g. \"User4\", \"User5\", & \"User6\") _}\r\n{_ to allow all notifications, you may also use an empty blacklist (i.e. \"set blacklist to []\" _}\r\n\r\n{set uselist to \"black\"}\r\n\r\n{set whitelist to [\"User1\", \"User2\", \"User3\"]}\r\n{set blacklist to [\"User4\", \"User5\", \"User6\"]}\r\n\r\n{if event.name:\r\n    {if uselist = \"white\":\r\n        {if find(whitelist, event.name) > -1:\r\n            {event.name} agora está {event.status}.\r\n        }\r\n    |elif uselist = \"black\":\r\n        {if find(blacklist, event.name) = -1:\r\n            {event.name} agora está {event.status}.\r\n        }\r\n    }\r\n|else:\r\n    Não sei sobre quem você está falando.\r\n}",
      "default": true,
      "name": "Friends status",
      "description": "Triggered when a friendly commander changes status"
    },
    "FSD engaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'engage')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n{SetState('eddi_context_fsd_target', event.target)}\r\n\r\n{if event.target = 'Hyperspace':\r\n    {_ Rewrite context to represent a jump }\r\n    {SetState('eddi_context_last_subject', 'jump')}\r\n    {SetState('eddi_context_last_action', 'start')}\r\n    {SetState('eddi_context_supercruise', \"yes\")}\r\n\r\n    {F(\"GetDistance\")}\r\n\r\n    {set reportsystem to SystemDetails(event.system)}\r\n\r\n    {_ Wait for the FSD countdown and initial jump}\r\n    {Pause(5000)}\r\n\r\n    {set sys_val to cast(state.eddi_context_system_value, \"n\")}\r\n    {if sys_val > 0 && sys_val != null:\r\n        {set last to OneOf(\"anterior\", \"passado\")}\r\n        {OneOf(\"Valor estimado do scan do sistema {last} é\",\r\n               \"scans do sistema {last} valem uma estimativa de\",\r\n               \"o valor do scan do sistema {last} está estimado em\")}\r\n\r\n        {Humanise(state.eddi_context_system_value)} créditos.\r\n    |else:\r\n        {OneOf(\"Destino confirmado\",\"Salto em andamento\",\"Telemetria obtida\")}.\r\n    }\r\n\r\n    {ShipName()} está {OneOf(\"dirigindo-se para\", \"em rota para\", \"viajando para\", \"em trânsito para\")}\r\n    o sistema {join(split(reportsystem.name, \".\"), \" \")}.\r\n    {if reportsystem.name = homesystem.name:\r\n        Bem vindo ao lar, {F(\"Honorific\")}\r\n    |else:\r\n        {set scoopables to [\"O\", \"B\", \"A\", \"F\", \"G\", \"K\", \"M\"]}\r\n        {if slice(event.stellarclass, 0, 1) = \"D\":\r\n            Cuidado: anã branca detectada.\r\n        |elif event.stellarclass = \"N\":\r\n            Cuidado: estrela de nêutrons detectada.\r\n        |elif event.stellarclass = \"H\":\r\n            Cuidado: buraco negro detectado.\r\n        |elif find(scoopables, event.stellarclass) = -1:\r\n            {Occasionally(2, \"Informação:\")}\r\n            Estrela da entrada não pode ser usada para abastecimento.\r\n        }\r\n        \r\n        {if lastsystem.allegiance && lastsystem.allegiance != \"None\" && lastsystem.allegiance != \"Independent\" && (!reportsystem.allegiance || reportsystem.allegiance = \"None\" || reportsystem.allegiance = \"Independent\"):\r\n            Você {OneOf(\"are leaving\", \"deixou\", \"não está mais em\")} espaço {lastsystem.allegiance}.\r\n        |elif lastsystem.allegiance && lastsystem.allegiance != reportsystem.allegiance && system.allegiance && system.allegiance != \"None\":\r\n            \r\n      \r\n   {if reportsystem.allegiance = \"Império\": {set ALIANCA to:Imperial}}\r\n   {if reportsystem.allegiance = \"Federação\": {set ALIANCA to:Federal}}\r\n   {if reportsystem.allegiance = \"Aliança\": {set ALIANCA to:da Aliança}}\r\n   \r\n   Você {OneOf(\"está agora em\", \"entrou em\", \"está entrando em\")} espaço {ALIANCA}.\r\n            {if cmdr.title != \"Commander\":\r\n                Bem vindo de volta {F(\"Honorific\")}.\r\n            }\r\n        }\r\n\r\n        {if reportsystem.visits = 0:\r\n            Esta é sua primeira visita a este sistema\r\n        |elif reportsystem.visits = 1:\r\n            Esta é sua segunda visita a este sistema\r\n        |elif reportsystem.visits = 2:\r\n            {Occasionally(2, \"Esta é sua terceira visita a este sistema\")}\r\n        |elif reportsystem.visits = 3:\r\n            {Occasionally(2, \"Esta é sua quarta visita a este sistema\")}\r\n        |else:\r\n            {Occasionally(3, \"Você visitou este sistema {reportsystem.visits} vezes\")}\r\n        }.\r\n\r\n        {if !reportsystem.population && lastsystem.population:\r\n            {OneOf(\"Este sistema não é povoado\",\"Não há presença humana aqui\", \"Humanos ainda têm de colonizar este sistema\")}.\r\n        |elif reportsystem.population && reportsystem.visits < 6:\r\n            {if SecondsSince(reportsystem.lastVisitSeconds) > 3600:\r\n                {F(\"System report\")}\r\n            }\r\n        }\r\n\r\n        {if reportsystem.distancefromhome:\r\n            {Occasionally(7, \"{OneOf('Você está a', 'Localização atual está a', 'Você está agora a')} {Humanise(reportsystem.distancefromhome)} anos luz de {OneOf('casa', '{homesystem.name}')}.\")}\r\n        }\r\n\r\n        {if reportsystem.comment:\r\n            Você deixou um{OneOf(\"a anotação\", \" comentário\", \" registro\")} {OneOf(\"sobre \", \"para \", \"d\")}este sistema.  Que {OneOf(\"é o seguinte\", \"diz\", \"se lê\", \"é\")} {reportsystem.comment}.\r\n        }\r\n    }\r\n}",
      "default": true,
      "name": "FSD engaged",
      "description": "Triggered when your FSD has engaged"
    },
    "Fuel check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fuel Check _}\r\n{_ Report fuel level _}\r\n\r\n{if ship.name = state.eddi_fuelcheck_shipname:\r\n    {if state.eddi_context_fuel_used > state.eddi_fuelcheck_maxfuel:\r\n        {SetState('eddi_fuelcheck_maxfuel', state.eddi_context_fuel_used)}\r\n    }\r\n|else:\r\n    {SetState('eddi_fuelcheck_maxfuel', state.eddi_context_fuel_used)}\r\n    {SetState('eddi_fuelcheck_shipname', ship.name)}\r\n}\r\n\r\n{set maxfuel to state.eddi_fuelcheck_maxfuel}\r\n{set fuelremaining to state.eddi_context_fuel_remaining}\r\n{set maxjump to fuelremaining/maxfuel}\r\n{set currentfuel to round(fuelremaining / ship.fueltanktotalcapacity * 100, 0)}\r\n{set shipsfuel to:\r\n   {OneOf(\"Nìveis\", \"tanques\", \"reservas\")}\r\n   de combustível {Occasionally(2, \"da {ShipName()}\" )} \r\n   {Occasionally(2, \"estão\")} {Occasionally(2, \"agora\")}\r\n}\r\n{set currentpercent to: \r\n   em {currentfuel} porcento da {Occasionally(2, \"capacidade\")}\r\n}\r\n{set title to Occasionally(3,\"{F('Honorific')}\")}\r\n\r\n{if maxjump < 0.5:\r\n   Perigo!\r\n   {shipsfuel} esgotado!\r\n   {Pause(500)}\r\n   Funcionando na reserva. É recomendado desligar os sistemas não essenciais!\r\n   {Pause(500)}\r\n   Transponder de emergência de prontidão, {title}\r\n|elif maxjump < 1.25:\r\n   {OneOf(\"Aviso:\", \"Cuidado:\", \"Perigo:\", \"Atenção:\")}\r\n   {shipsfuel} {OneOf(\"perigosamente baixo\", \"quase esgotado\")}.\r\n   {OneOf(\"Por favor, reabasteça\", \"O reabastecimento é fortemente recomendado\")}, {title}\r\n|elif currentfuel < 25:\r\n   {OneOf(\"Aviso:\", \"Cuidado:\", \"Perigo:\", \"Atenção:\")}\r\n   {shipsfuel} {OneOf(\"abaixo de 25%\", \"{currentpercent}\" )}, {title}\r\n|elif currentfuel < 50:\r\n   {shipsfuel} {OneOf(\"abaixo de 50%\", \"{currentpercent}\" )}, {title}\r\n|elif currentfuel < 75:\r\n   {Occasionally(2, \"{shipsfuel} {currentpercent}, {title}\")}\r\n|elif currentfuel < 100:\r\n   {Occasionally(3, \"{shipsfuel} {currentpercent}, {title}\")}\r\n|else:\r\n   {shipsfuel} {OneOf(currentpercent, \"no máximo\")}, {title}\r\n}\r\n",
      "default": true,
      "name": "Fuel check",
      "description": "Report on fuel levels"
    },
    "Galnet latest news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    Não há notícias não lidas nessa categoria.\r\n|else:\r\n    {set article to articles[0]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.\r\n",
      "default": true,
      "name": "Galnet latest news",
      "description": "Read the latest unread news in a given category"
    },
    "Galnet mark read": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    Não há notícias não lidas.\r\n    {if articlecategory: 'nessa categoria' }\r\n|else:\r\n    {set item to 0}\r\n    {while item < len(articles):\r\n        {GalnetNewsMarkRead(articles[item].id)}\r\n        {set item to (item + 1)}\r\n    }\r\n    {len(articles)} news {OneOf('artigos', 'ítens')} marcados como lidos\r\n}.\r\n",
      "default": true,
      "name": "Galnet mark read",
      "description": "Mark news articles as read"
    },
    "Galnet news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch article from state }\r\n{set articleid to state.articleid}\r\n{if articleid:\r\n    {set article to GalnetNews(articleid)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'news')}\r\n    {SetState('eddi_context_galnet_news_id', articleid)}\r\n}\r\n\r\n{if !article:\r\n    {_ Fetch from context }\r\n    {set article to GalnetNews(state.eddi_context_galnet_news_id)}\r\n}\r\n\r\n{if article:\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n|else:\r\n    Não tenho qualquer informação sobre esse artigo\r\n}.",
      "default": true,
      "name": "Galnet news",
      "description": "Read a particular news article"
    },
    "Galnet news published": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set interesting to \"Article\"}\r\n\r\n{set interesting_news_title to []}\r\n{set interesting_news_content to []}\r\n{set not_interesting_news_title to []}\r\n{set not_interesting_news_content to []}\r\n\r\n{set item to 0}\r\n{while item < len(event.items):\r\n    {if match(event.items[item].category, interesting ):\r\n        {set interesting_news_title to cat(interesting_news_title, [event.items[item].title])}\r\n        {set interesting_news_content to cat(interesting_news_content, [event.items[item].content])}\r\n    |else:\r\n        {set not_interesting_news_title to cat(not_interesting_news_title, [event.items[item].title])}\r\n        {set not_interesting_news_content to cat(not_interesting_news_content, [event.items[item].content])}\r\n    }\r\n    {GalnetNewsMarkRead(event.items[item].content.id)}\r\n    {set item to (item + 1)}\r\n}\r\n{if len(event.items) = len(interesting_news_title): \r\n    {set allinteresting to 1} \r\n}\r\n\r\n{if len(interesting_news_title) > 0:\r\n    {if len(interesting_news_title) = 1:\r\n  {set remarkable to OneOf('notável', 'interessante', 'intrigante', 'incomum')}\r\n  Um novo artigo {remarkable} da Galnet foi publicado, com o título de {interesting_news_title[0]}.\r\n    |elif len(event.items) > 1:\r\n        {len(event.items)} \r\n        novos artigos  \r\n  {if allinteresting: \r\n             {OneOf(\"notáveis\", \"interessantes\", \"intrigantes\", \"incomuns\")}\r\n        }\r\n        da Galnet foram publicados\r\n        {if !allinteresting:\r\n             , incluindo {len(interesting_news_title)} \r\n             {OneOf('de interesse.', 'a serem notados.', 'dignos de observação.')}\r\n        }.\r\n    }\r\n|elif len(event.items) != ( len(interesting_news_title) + len(not_interesting_news_title) ):\r\n    {len(event.items)} novos artigos da Galnet foram publicados, mas não pude determinar\r\n    se algum era de seu interesse, {F('Honorific')}. \r\n|elif len(interesting_news_title) = 0:\r\n    Notícias da Galnet foram publicadas, mas não há nada digno de relato, {F('Honorific')}.\r\n}\r\n\r\n{if len(interesting_news_title) > 0:\r\n    {if len(interesting_news_title) = 1:\r\n        Que está escrito: {interesting_news_content[0]}.\r\n    |elif len(interesting_news_title) > 1:\r\n        {set item to 0}\r\n        {while item < len(interesting_news_title):\r\n            {if item = 0:\r\n                O primeiro\r\n                tem o título {interesting_news_title[item]},\r\n                e está escrito: {interesting_news_content[item]}.\r\n            |elif item = 1:\r\n                O segundo\r\n                tem o título {interesting_news_title[item]},\r\n                e está escrito: {interesting_news_content[item]}.\r\n            |elif item = len(event.items) - 1:\r\n                O último\r\n                tem o título {interesting_news_title[item]},\r\n                e está escrito: {interesting_news_content[item]}.\r\n            |else:\r\n                O próximo\r\n                tem o título {interesting_news_title[item]},\r\n                e está escrito: {interesting_news_content[item]}.\r\n            }\r\n            {set item to item + 1}\r\n            {Pause(1000)}\r\n        }\r\n    }\r\n}",
      "default": true,
      "name": "Galnet news published",
      "description": "Triggered when news is published on Galnet"
    },
    "Galnet oldest news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    Não há notícias não lidas nessa categoria\r\n|else:\r\n    {set article to articles[len(articles)-1]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.\r\n",
      "default": true,
      "name": "Galnet oldest news",
      "description": "Read the oldest unread news in a given category"
    },
    "Galnet unread report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set articles to GalnetNewsArticles(\"Article\")}\r\n\r\n{if len(articles) = 0:\r\n    Você não tem notícias não lidas\r\n|elif len(articles) = 1:\r\n    Você tem uma notícia não lida\r\n|else:\r\n    Você tem {len(articles)} notícias não lidas\r\n}.",
      "default": true,
      "name": "Galnet unread report",
      "description": "Report on unread news"
    },
    "GetDistance": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ GetDistance}\r\n{_ Find distance to destination}\r\n\r\n{set dist to -1}\r\n\r\n{set fs to system.name}\r\n{set ts to state.eddi_context_system_system}\r\n\r\n{if fs && ts:\r\n    {if ts = \"\":\r\n        Origin system not designated.\r\n    |elif fs = \"\":\r\n        Destination system not designated.\r\n    |else:\r\n        {set fs to SystemDetails(fs)}\r\n        {set ts to SystemDetails(ts)}\r\n\r\n        {if !fs.name:\r\n            Your origin is not in the Pilot's Federation star charts.\r\n        |elif !ts.name:\r\n            Your destination is not in the Pilot's Federation star charts.\r\n        |else:\r\n            {set dist to round(Distance(fs.x, fs.y, fs.z, ts.x, ts.y, ts.z), 2)}\r\n            {if state.getdistance = 'true':\r\n                Distance {Occasionally(2, \"from {fs.name}\")} to\r\n                {Occasionally(2, \"{OneOf('target','destination')} system\")}\r\n                {ts.name} is {dist} light years.\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{SetState('distance', dist)}\r\n",
      "default": true,
      "name": "GetDistance",
      "description": "Find distance to destination"
    },
    "Glide": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'glide')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n\r\n{if event.gliding:\r\n    {Occasionally(2, \"Modo de\")} Planagem \r\n    {OneOf(\"ativado.\", \"iniciado.\")}\r\n\r\n    {set body to BodyDetails(event.body, event.system)}\r\n    {if !body.name || body.name = \"\" || !body.gravity:\r\n        Dados de aproximação planetária não estão disponíveis.\r\n    |else:\r\n        {if body.landable:\r\n            {set gravity to round(body.gravity,2)}\r\n            {if gravity > 4: Perigo! {set grav to \"extremamente alta\"}\r\n            |elif gravity > 2: Cuidado! {set grav to \"alta\"}\r\n            |elif gravity > 0.5: Aviso! {set grav to \"média\"}\r\n            |else: {set grav to \"baixa\"}\r\n            }\r\n            {F(\"Body Name Tidy\")}\r\n            {body} é um mundo de gravidade {grav}, a {gravity} G.\r\n        }\r\n    }\r\n|else:\r\n    Planagem finalizada.\r\n}",
      "default": true,
      "name": "Glide",
      "description": "Triggered when your ship enters or exits glide"
    },
    "Heat damage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Perigo:\")}\r\nDano por calor.",
      "default": true,
      "name": "Heat damage",
      "description": "Triggered when your ship is taking damage from excessive heat"
    },
    "Heat warning": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Aviso:\")}\r\nNíveis de calor acima da tolerância operacional.\r\n",
      "default": true,
      "name": "Heat warning",
      "description": "Triggered when your ship's heat exceeds 100%"
    },
    "Honorific": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if system.allegiance = \"Império\":\r\n    {F(\"Empire honorific\")}\r\n|elif system.allegiance = \"Federação\":\r\n    {if cmdr.federationrating.rank = 0:\r\n        Commander {Occasionally(3,\"{cmdr.name}\")}\r\n    |else:\r\n        {cmdr.federationrating.name} {Occasionally(2,\"{cmdr.name}\")}\r\n    }\r\n|else:\r\n    Commander {Occasionally(4,\"{cmdr.name}\")}\r\n}\r\n",
      "default": true,
      "name": "Honorific",
      "description": "Function to provide a suitable honorific for your commander"
    },
    "Hull damaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.vehicle = vehicle:\r\n    {if event.health < 41:\r\n        Perigo:\r\n    |elif event.health < 61:\r\n        Alerta:\r\n    |elif event.health < 81:\r\n        Cuidado:\r\n    }\r\n    {OneOf(\"Casco\", \"Integridade do casco\", \"Integridade\", \"Integridade estrutural\")} {Occasionally(3, \"está\")} a {event.health}%.\r\n}\r\n",
      "default": true,
      "name": "Hull damaged",
      "description": "Triggered when your hull is damaged to a certain extent"
    },
    "Insurance check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set covereds to floor(cmdr.credits / ship.rebuy)}\r\n\r\n{if covereds = 0:\r\n  Perigo: você não tem créditos suficientes para cobrir seu seguro.\r\n|elif covereds = 1:\r\n  Cuidado: você só tem créditos suficientes para cobrir um único seguro.\r\n|elif covereds < 4:\r\n  Lembrete: você só tem créditos suficientes para cobrir {covereds} seguros.\r\n|else:\r\n  {Occasionally(5, \"Você tem créditos suficientes para cobrir {covereds} seguros.\")}\r\n}\r\n",
      "default": true,
      "name": "Insurance check",
      "description": "Check for enough credits to cover your insurance"
    },
    "Jet cone boost": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(1000)}\r\nMotor de Distorção de Fase impulsionado em {Humanise(event.boost * 100)} porcento.",
      "default": true,
      "name": "Jet cone boost",
      "description": "Triggered when enough material has been collected from a solar jet cone (at a white dwarf or neutron star) for a jump boost"
    },
    "Jet cone damage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Jet cone damage",
      "description": "Triggered in normal space when passing through the jet cone from a white dwarf or neutron star causes damage to a ship module"
    },
    "Jumped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'jump')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n{SetState('eddi_context_fuel_remaining', event.fuelremaining)}\r\n{SetState('eddi_context_fuel_used', event.fuelused)}\r\n\r\n{_ Reset scanned body estimated total value}\r\n{SetState('eddi_context_system_value', 0)}\r\n\r\n{F(\"Fuel check\")}\r\n{Pause(500)}\r\n\r\n{F(\"System state report\")}\r\n\r\n{set dist to -1}\r\n{set thissystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if state.missionsdestination && state.missionsdestination != \"\" && state.missionsdestination != null:\r\n    {set route to split(state.missionsroute, \"_\")}\r\n    {set ds to SystemDetails(state.missionsdestination)}\r\n    {if !ds.name:\r\n        Seu destino não está nos mapas esteláres da Federação de Pilotos.\r\n    |else:\r\n        {set dist to round(Distance(ds.name, thissystem.name), 1)}\r\n        {if dist = 0:\r\n            {OneOf(\"Você\", \"{ShipName()}\")}\r\n            chegou ao seu destino {if len(route) = 1:final}.\r\n        |else:\r\n            Distância até o destino da {if missionsCount > 0:missão |else:rota}, {ds.name},\r\n            é {dist} anos luz.\r\n            {set reported to \"yes\"}\r\n        }\r\n    }\r\n    {SetState('distance', dist)}\r\n\r\n    {if len(route) = 1 && thissystem.name = route[0] && missionCount = 0:\r\n        {SetState('missionsroute', \"\")}\r\n        {SetState('missionsdestination', \"\")}\r\n    }\r\n}\r\n\r\n{if missionsCount > 0:\r\n    {set system to F(\"Mission check system\")}\r\n    {if system:\r\n        {system}\r\n    |else:\r\n        {F(\"Mission Check Near Most\")}\r\n    }\r\n}\r\n\r\n",
      "default": true,
      "name": "Jumped",
      "description": "Triggered when you complete a jump to another system"
    },
    "Killed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Killed",
      "description": "Triggered when you kill another player"
    },
    "Landing gear": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Landing gear",
      "description": "Triggered when you deploy or retract your landing gear"
    },
    "Landing pad report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set landingpad to state.eddi_context_landing_pad_pad}\r\nPlataforma de pouso {landingpad} está às\r\n{if landingpad = 1:\r\n    seis horas perto\r\n|elif landingpad = 2:\r\n    seis horas perto\r\n|elif landingpad = 3:\r\n    seis horas longe\r\n|elif landingpad = 4:\r\n    seis horas longe\r\n|elif landingpad = 5:\r\n    sete horas perto\r\n|elif landingpad = 6:\r\n    sete horas perto\r\n|elif landingpad = 7:\r\n    sete horas longe\r\n|elif landingpad = 8:\r\n    sete horas longe\r\n|elif landingpad = 9:\r\n    oito horas perto\r\n|elif landingpad = 10:\r\n    oito horas longe\r\n|elif landingpad = 11:\r\n    nove horas perto\r\n|elif landingpad = 12:\r\n    nove horas perto\r\n|elif landingpad = 13:\r\n    nove horas no meio\r\n|elif landingpad = 14:\r\n    nove horas longe\r\n|elif landingpad = 15:\r\n    nove horas longe\r\n|elif landingpad = 16:\r\n    dez horas perto\r\n|elif landingpad = 17:\r\n    dez horas perto\r\n|elif landingpad = 18:\r\n    dez horas longe\r\n|elif landingpad = 19:\r\n    dez horas longe\r\n|elif landingpad = 20:\r\n    onze horas perto\r\n|elif landingpad = 21:\r\n    onze horas perto\r\n|elif landingpad = 22:\r\n    onze horas longe\r\n|elif landingpad = 23:\r\n    onze horas longe\r\n|elif landingpad = 24:\r\n    doze horas perto\r\n|elif landingpad = 25:\r\n    doze horas longe\r\n|elif landingpad = 26:\r\n    uma hora perto\r\n|elif landingpad = 27:\r\n    uma hora perto\r\n|elif landingpad = 28:\r\n    uma hora no meio\r\n|elif landingpad = 29:\r\n    uma hora longe\r\n|elif landingpad = 30:\r\n    uma hora longe\r\n|elif landingpad = 31:\r\n    duas horas perto\r\n|elif landingpad = 32:\r\n    duas horas perto\r\n|elif landingpad = 33:\r\n    duas horas longe\r\n|elif landingpad = 34:\r\n    duas horas longe\r\n|elif landingpad = 35:\r\n    três horas perto\r\n|elif landingpad = 36:\r\n    três horas perto\r\n|elif landingpad = 37:\r\n    três horas no meio\r\n|elif landingpad = 38:\r\n    três horas longe\r\n|elif landingpad = 39:\r\n    four horas perto\r\n|elif landingpad = 40:\r\n    four horas longe\r\n|elif landingpad = 41:\r\n    cinco horas perto\r\n|elif landingpad = 42:\r\n    cinco horas perto\r\n|elif landingpad = 43:\r\n    cinco horas no meio\r\n|elif landingpad = 44:\r\n    cinco horas longe\r\n|elif landingpad = 45:\r\n    cinco horas longe\r\n}\r\n, quando você entra {Occasionally(2,\"{OneOf('na caixa de correio','pela porta de docagem','pelo bloqueio de ar')}\")} com as luzes verdes {OneOf(\"à sua direita\",\"do lado estibórdo\",\"à estibórdo\")}.\r\n",
      "default": true,
      "name": "Landing pad report",
      "description": "Report on the location of a landing pad"
    },
    "Launchbay report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{for launchbay in ship.launchbays:\r\n    Você tem um hangar de {launchbay.type} de tamanho {launchbay.size}.\r\n\r\n    {if launchbay.type = \"SRV\":\r\n        Ele tem {len(launchbay.vehicles)} V R S{if len(launchbay.vehicles) != 1:'s}\r\n        {OneOf(\"a bordo\", \"instalado{if len(launchbay.vehicles) != 1:'s}\")}.\r\n    |else:\r\n        {set cur to 0}\r\n\r\n        {for vehicle in launchbay.vehicles:\r\n            ele {if cur > 0: também} tem\r\n            um {vehicle.name}, com CATRACA {vehicle.loadout} configuração\r\n\r\n            {if type(vehicle.mount) != null:\r\n                {if vehicle.mount = 'F':\r\n                    e armas fixas\r\n                |elif vehicle.mount = 'G':\r\n                    e armas guiadas\r\n                }\r\n            }\r\n            .{_ full stop _}\r\n\r\n            {if vehicle.rebuilds != null:\r\n                Ele tem\r\n                {if vehicle.rebuilds = 0:\r\n                    nenhuma\r\n                |else:\r\n                    {vehicle.rebuilds}\r\n                }\r\n                reconstruç{if vehicle.rebuilds != 1:ões|else:ão} sobrando.\r\n            }\r\n\r\n            {set cur to cur + 1}\r\n            {Pause(500)}\r\n        }\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Launchbay report",
      "description": "Describes the contents of each launchbay in the ship"
    },
    "Liftoff": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.playercontrolled = true:\r\n   {OneOf(\"Propulsão máxima\",\"Motores no máximo\",\"Motores ligados\")},\r\n   {Pause(250)}\r\n   Decolagem {OneOf(\"concluída\",\"finalizada\",\"\")}.\r\n|else:\r\n   {ShipName()} decolou.\r\n}",
      "default": true,
      "name": "Liftoff",
      "description": "Triggered when your ship lifts off from a planet's surface"
    },
    "Lights": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Lights",
      "description": "Triggered when you activate or deactivate your lights"
    },
    "Limpet check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set  controllers to 0}\r\n{for compartment in ship.compartments:\r\n    {if find(compartment.module.name, \"Controller\") != -1:\r\n        {set controllers to controllers + 1}\r\n    }\r\n}\r\n\r\n{set limpets to 0}\r\n{for cargo in inventory:\r\n    {if cargo.edname = \"Drones\":\r\n        {set limpets to cargo.total}\r\n    }\r\n}\r\n\r\n{set tenpercent to ship.cargocapacity / 10 - 1}\r\n{if controllers > 0 && limpets = 0:\r\n    Lembrete:: você tem um controlador de drones mas não os está carregando.\r\n|elif controllers = 0 && limpets > 0:\r\n    Você está carregando drones, mas nenhum controlador.\r\n|elif controllers > 0 && limpets < tenpercent:\r\n    Você só tem {limpets} {if limpets = 1: drone |else: drones} a bordo; você deveria pensar em comprar mais.\r\n}\r\n",
      "default": true,
      "name": "Limpet check",
      "description": "Check for the presence/absence of limpets and limpet controllers"
    },
    "Limpet launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Drone {OneOf('lançado','liberado','disparado')}.",
      "default": true,
      "name": "Limpet launched",
      "description": "Triggered when a limpet is launched"
    },
    "Limpet purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState('eddi_context_last_action', \"buy_limpet\")}\r\n\r\n{event.amount} drone{if event.amount > 1:s}\r\n{Occasionally(2, \"fo{if event.amount = 1:i |else:ram}\")}\r\nadicionado{if event.amount > 1:s} {OneOf('a nossa carga', 'ao invetário da {ShipName()}', 'ao compartimento de carga')}\r\n\r\n",
      "default": true,
      "name": "Limpet purchased",
      "description": "Triggered when you buy limpets from a station"
    },
    "Limpet sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState('eddi_context_last_action', \"sell_limpet\")}\r\n\r\n{event.amount} drone{if event.amount > 1:s}\r\n{Occasionally(2, \"fo{if event.amount = 1:i|else:ram}\")} vendido{if event.amount > 1:s}.\r\n",
      "default": true,
      "name": "Limpet sold",
      "description": "Triggered when you sell limpets to a station"
    },
    "Location": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Location }\r\n{_ Triggered when the commander's location is reported, usually when they reload their game. }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'location')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n{SetState('eddi_context_docked',\"no\")}\r\n\r\n\r\n{F(\"Body Name Tidy\")}\r\n\r\nVocê está\r\n{if event.docked:\r\n    {SetState('eddi_context_docked',\"yes\")}\r\n    pousado na\r\n    {if event.station = body:\r\n        estação orbital {P(event.station)}\r\n    |else:\r\n        estação planetária {P(event.station)}, em {body},\r\n    }\r\n|elif event.body:\r\n    {if event.longitude || event.latitude:\r\n        em \r\n        {SetState('loading', true)}\r\n    |else:\r\n        perto de\r\n    }\r\n    {body},\r\n}\r\nno sistema {event.system}.\r\n",
      "default": true,
      "name": "Location",
      "description": "Triggered when the commander's location is reported, usually when they reload their game."
    },
    "Low fuel": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Low fuel",
      "description": "Triggered when your fuel level falls below 25%."
    },
    "Market information updated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Find out in advance what we have to say }\r\n{if ship.role = \"Multipurpose\" || ship.role = \"Trading\":\r\n    {set purchasecheck to F(\"Commodity purchase check\")}\r\n}\r\n{set limpetcheck to F(\"Limpet check\")}\r\n{set swapoutcheck to F(\"Swapout check\")}\r\n{set salecheck to F(\"Commodity sale check\")}\r\n\r\n{_ Pause(4500)}\r\n\r\n{if purchasecheck || salecheck || limpetcheck || swapoutcheck:\r\n    {OneOf(\"Atualizações\", \"Mudanças\")}\r\n    {OneOf(\"dos dados\", \"das informações\", \"dos preços\")}\r\n    {OneOf(\"do mercado\", \"do mercado local\", \"dos serviços da estação\")}\r\n    {OneOf(\"recebidas\", \"obtidas\")}.\r\n\r\n    {salecheck}\r\n    {purchasecheck}\r\n    {swapoutcheck}\r\n    {limpetcheck}\r\n}\r\n\r\n{F(\"FinesBounties_CheckContacts\")}\r\n",
      "default": true,
      "name": "Market information updated",
      "description": "Triggered when market information for the currently docked station has been updated"
    },
    "Material collected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'collect')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n\r\n{set matis to MaterialDetails(event.name)}\r\n\r\n{matis.name} {OneOf('Recebido','Coletado','Obtido')}.\r\n\r\n{if matis.category = \"Dados\":\r\n    {if matis.rarity.level > 3:\r\n        {Occasionally(2,\"Este é\")} {OneOf(\"um conjunto de dados\",\"uma varredura de dados\")} {matis.rarity.name}.\r\n    }\r\n\r\n|elif matis.category = \"Bruto\":\r\n\r\n|elif matis.category = \"Manufactured\":\r\n    {if matis.name = \"unknownenergysource\":\r\n        {_ Unknown Artifact Fragment}\r\n    }\r\n\r\n|elif matis.category = \"Desconhecido\":\r\n    {set type to slice(matis.name,0,7)}\r\n    {if type = \"antigo\":\r\n        {_ ancient alien data}\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Material collected",
      "description": "Triggered when you collect a material"
    },
    "Material discard report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n\r\n{if inventory:\r\n    {if inventory.maximum && inventory.maximum < inventory.amount:\r\n        {set over to inventory.amount - inventory.maximum}\r\n        Você pode descartar {over} unidade{if over != 1:s} de {inventory.material} para alcançar seu nível máximo.\r\n    |elif inventory.desired && inventory.desired < inventory.amount:\r\n        {set over to inventory.amount - inventory.desired}\r\n        você pode discartar {over} unidade{if over != 1:s} de {inventory.material} para chegar ao nível desejado.\r\n    |elif inventory.desired:\r\n        Você está abaixo do seu nível desejado de {inventory.material}.\r\n    |elif inventory.maximum:\r\n        Vocẽ está abaixo do seu nível máximo de {inventory.material}.\r\n    |else:\r\n        Você não configurou nenhum nível de {inventory.material}.\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Material discard report",
      "description": "Report on how many of a material can be discarded"
    },
    "Material discarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discard')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n",
      "default": true,
      "name": "Material discarded",
      "description": "Triggered when you discard a material"
    },
    "Material discovered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discover')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n\r\n\r\n{set matis to MaterialDetails(event.name)}\r\n\r\n{Occasionally(2,\"Você\")} Descobriu {P(matis.name)},\r\n{Occasionally(2,\"este é\")}\r\num\r\n\r\n{if matis.category = \"Manufaturado\":\r\n   manufactured {OneOf(\"ítem\",\"componente\")}\r\n|elif matis.category = \"Dados\":\r\n   conjunto de dados\r\n|elif matis.category = \"Desconhecido\":\r\n   {set type to slice(matis.name,0,7)}\r\n   {if type = \"antigo\":\r\n      antigo conjunto de dados alienígenas\r\n   |else:\r\n      {matis.name}\r\n   }\r\n|else:\r\n   elemento\r\n}\r\n{matis.rarity.name}\r\n.\r\n",
      "default": true,
      "name": "Material discovered",
      "description": "Triggered when you discover a material"
    },
    "Material donated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'donate')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n",
      "default": true,
      "name": "Material donated",
      "description": "Triggered when you donate a material"
    },
    "Material inventory": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Material inventory",
      "description": "Triggered when you obtain an inventory of your current materials"
    },
    "Material inventory report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n \r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_last_subject', 'inventory')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n{if inventory && inventory.amount > 0:\r\n    Você tem {inventory.amount} unidade{if inventory.amount != 1:s} de {inventory.material} a bordo.\r\n|else:\r\n    Você não tem {inventory.material} a bordo.\r\n}\r\n",
      "default": true,
      "name": "Material inventory report",
      "description": "Report on how many of a material are on-board"
    },
    "Material location report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{if material.name:\r\n    {if material.location:\r\n        {material.name} pode ser {material.location}\r\n    |else:\r\n        Não há informação disponível sobre onde encontrar {material.name}\r\n    }\r\n|else:\r\n    Não tenho informação sobre esse material\r\n}\r\n",
      "default": true,
      "name": "Material location report",
      "description": "Report on the where to obtain a particular material"
    },
    "Material required report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n\r\n{if inventory:\r\n    {if inventory.minimum && inventory.minimum > inventory.amount:\r\n        {set under to inventory.minimum - inventory.amount}\r\n        Você precisa de {under} unidade{if under > 1:s} de {inventory.material} para alcançar seu nível mínimo.\r\n    |elif inventory.desired && inventory.desired > inventory.amount:\r\n        {set under to inventory.desired - inventory.amount}\r\n        Você precisa de {under} unidade{if under > 1:s} de {inventory.material} para alcançar o nível desejado.\r\n    |elif inventory.desired:\r\n        Você está acima do nível desejado de {inventory.material}.\r\n    |elif inventory.minimum :\r\n        Você está acima do nível mínimo de {inventory.material}.\r\n    |else:\r\n        Você não configurou qualquer nível para {inventory.material}.\r\n    }\r\n}\r\n\r\n",
      "default": true,
      "name": "Material required report",
      "description": "Report on how many of a material are required to reach 'desired' level"
    },
    "Material threshold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.level = 'Minimum':\r\n    {_ Gone below the minimum level }\r\n    {OneOf(\"Quantidade\", \"Inventário\", \"Suprimento\")} de {event.material.name} caiu abaixo do mínimo.\r\n|elif event.level = 'Maximum':\r\n    {_ Gone above the maximum level }\r\n    {OneOf(\"Quantidade\", \"Inventário\", \"Suprimento\")} de {event.material.name} subiu acima do seu máximo.\r\n|else:\r\n    {_ Moved around the desired level }\r\n    Você\r\n    {if event.change = 'Increase': alcançou\r\n    |else: está abaixo do\r\n    }\r\n    seu nível desejado de {event.material.name}.\r\n}\r\n\r\n{OneOf(\"Quantidade atual é de {event.amount}\",\r\n       \"Atualmente carregando {event.amount}\",\r\n       \"{event.amount} a bordo\")}.",
      "default": true,
      "name": "Material threshold",
      "description": "Triggered when a material reaches a threshold"
    },
    "Material traded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Material traded",
      "description": "Triggered when materials are traded at a material trader"
    },
    "Material use report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{if material && material.name:\r\n    {set uses to len(material.blueprints)}\r\n    {if slice(material.name, len(material.name)-1) = 's':\r\n        {set plural to 'são'}\r\n        {set plural2 to 's'}\r\n    |else:\r\n        {set plural to 'é'}\r\n    }\r\n    {if uses = 0:\r\n        {material.name} não {plural} necessário{plural2} para qualquer diagrama.\r\n    |elif uses = 1:\r\n        {set name to cat(material.blueprints[0].name, \" \", material.blueprints[0].modulename, \" grade \", material.blueprints[0].grade)}\r\n        {material.name} {plural} usado{plugal2} no diagrama {name}\r\n    |elif uses = 2:\r\n        {set name0 to cat(material.blueprints[0].name, \" \", material.blueprints[0].modulename, \" grade \", material.blueprints[0].grade)}\r\n        {set name1 to cat(material.blueprints[1].name, \" \", material.blueprints[1].modulename, \" grade \", material.blueprints[1].grade)}\r\n        {material.name} {plural} usado{plugal2} nos diagramas {name0} e {name1}\r\n    |else:\r\n        {material.name} {plural} usado{plugal2} em {len(material.blueprints)} diagramas.  São estes:\r\n        {set cur to 0}\r\n        {set length to len(material.blueprints) - 1}\r\n        {while cur < len(material.blueprints):\r\n            {set name to cat(material.blueprints[cur].name, \" \", material.blueprints[cur].modulename, \" grade \", material.blueprints[cur].grade)}\r\n            {name}\r\n            {set cur to cur + 1}\r\n            {if cur = length: e\r\n            |elif cur < length:,\r\n            }\r\n        }\r\n    }\r\n|else:\r\n    Não tenho informações sobre esse material.\r\n}.\r\n",
      "default": true,
      "name": "Material use report",
      "description": "Report on the use of a material"
    },
    "Materials discard report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "\r\n{_ Find those that are above maximum, desired and minimum}\r\n{set shoulddiscardmaterials to []}\r\n{set coulddiscardmaterials to []}\r\n{set lastdiscardmaterials to []}\r\n\r\n{for material in materials:\r\n    {if material.maximum && material.amount > material.maximum:\r\n      {set shoulddiscardmaterials to cat(shoulddiscardmaterials, [material])}\r\n    |elif material.desired && material.amount > material.desired:\r\n      {set coulddiscardmaterials to cat(coulddiscardmaterials, [material])}\r\n    |elif material.minimum && material.amount > material.minimum:\r\n      {set lastdiscardmaterials to cat(lastdiscardmaterials, [material])}\r\n    }\r\n}\r\n\r\n{if len(shoulddiscardmaterials) > 0:\r\n    Você está acima do seu nível máximo de {len(shoulddiscardmaterials)} materia{if len(shoulddiscardmaterials) != 1:is|else:l}.\r\n    Você pode descartar\r\n\r\n    {set cur to 0}\r\n    {set length to len(shoulddiscardmaterials) - 1}\r\n    {while cur < len(shoulddiscardmaterials):\r\n        {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].material}\r\n        {set cur to cur + 1}\r\n        {if cur = length: e\r\n        |elif cur < length:,\r\n        }\r\n    }.\r\n|elif len(coulddiscardmaterials) > 0:\r\n    Você está acima do nível desejado de {len(coulddiscardmaterials)} materia{if len(shoulddiscardmaterials) != 1:is|else:l}.\r\n    Você pode descartar\r\n\r\n    {set cur to 0}\r\n    {set length to len(coulddiscardmaterials) - 1}\r\n    {while cur < len(coulddiscardmaterials):\r\n        {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[cur].material}\r\n        {set cur to cur + 1}\r\n        {if cur = length: e\r\n        |elif cur < length:,\r\n        }\r\n    }.\r\n|elif len(lastdiscardmaterials) > 0:\r\n    Você está acima do seu nível mínimo de {len(lastdiscardmaterials)} materia{if len(shoulddiscardmaterials) != 1:is|else:l}.\r\n    Você pode descartar\r\n\r\n    {set cur to 0}\r\n    {set length to len(lastdiscardmaterials) -1 }\r\n    {while cur < len(lastdiscardmaterials):\r\n        {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].material}\r\n        {set cur to cur + 1}\r\n        {if cur = length: e\r\n        |elif cur < length:,\r\n        }\r\n    }.\r\n|else:\r\n    Nenhum material pode ser descartado e ainda ficar nos níveis mínimos.\r\n}\r\n",
      "default": true,
      "name": "Materials discard report",
      "description": "Report on which materials can be discarded"
    },
    "Materials required report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set required to []}\r\n\r\n{for material in materials:\r\n  {if material.desired && material.amount < material.desired:\r\n    {set required to cat(required, [material])}\r\n }\r\n}\r\n\r\n{if len(required) > 0:\r\n    Você precisa de\r\n\r\n    {set cur to 0}\r\n    {set length to len(required) - 1}\r\n    {while cur < len(required):\r\n        {required[cur].desired - required[cur].amount} {required[cur].material}\r\n        {set cur to cur + 1}\r\n        {if cur = length: e\r\n        |elif cur < length:,\r\n        }\r\n    }.\r\n|else:\r\n    Você tem todos os materiais que deseja.\r\n}",
      "default": true,
      "name": "Materials required report",
      "description": "Report on how many of each material are required to reach 'desired' level"
    },
    "Message received": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'receive')}\r\n{SetState('eddi_context_message_name', event.from)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{_ Setup channel list to speak. Only messages received on these channels will be spoken _}\r\n{_ Options: direct, friend, local, multicrew, npc, player, voicechat, wing _}\r\n{set channellist to [\"direct\", \"friend\", \"multicrew\", \"npc\", \"player\", \"voicechat\", \"wing\"]}\r\n\r\n{_ Setup sender list to speak. Only messages FROM these will be spoken _}\r\n{_ Messages from Players will always be spoken _}\r\n{_ Options: Ambushed pilot, Bounty hunter, Capital ship, Cargo hunter _}\r\n{_ Civilian pilot, Commander, Cruise liner, Escort, Exploration convoy _}\r\n{_ Hitman, Messenger, Military, Miner, NPC, Passenger hunter, Passenger liner _}\r\n{_ Pirate, Police, Propagandist, Protester, Refugee, Rival power's agent _}\r\n{_ Search and rescue, Starship One, Station, Wedding convoy, Wing mate _}\r\n{set senderlist to [\"Bounty hunter\", \"Military\", \"Pirate\", \"Police\"]}\r\n\r\n\r\n{if event.player = true:\r\n    {if event.message = \"o7\":\r\n        {event.from} cumprimenta\r\n        {if event.channel = \"player\":\r\n            você\r\n        }.\r\n    |else:\r\n        {event.source} {event.from} enviou: {event.message}.\r\n    }\r\n|elif find(channellist, event.channel) > -1 && find(senderlist, event.source) > -1:\r\n\r\n    {_ List all your installed voices that you wish to use _}\r\n    {set voice to OneOf(\"Microsoft Maria Desktop\", \"Microsoft Daniel Desktop\", \"Ivona 2 Ricardo\", \"Ivona 2 Vitória\")}\r\n    {if find(voice, \"Desktop\") > -1:\r\n        {set volume to \"high\"} {_ 'Desktop' voices are a little bit quieter, so this ups the volume _}\r\n    |else:\r\n        {set volume to \"default\"}\r\n    }\r\n\r\n    {set pitch to OneOf(\"x-low\",\"low\",\"medium\",\"default\",\"high\",\"x-high\")}\r\n    {set rate to OneOf(\"slow\",\"medium\",\"default\",\"fast\")}\r\n\r\n    De {event.from}: {Transmit(event.message)}\r\n {_ Transmit(SpeechVolume(SpeechRate(SpeechPitch(Voice(event.message, voice),pitch),rate),volume)) _}\r\n}\r\n",
      "default": true,
      "name": "Message received",
      "description": "Triggered when you receive a message"
    },
    "Message sent": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'send')}\r\n{SetState('eddi_context_message_name', event.to)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{Occasionally(2,\"{OneOf('Comunicação','Mensagem')}\")} enviada.\r\n",
      "default": true,
      "name": "Message sent",
      "description": "Triggered when you send a message"
    },
    "Mission abandoned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'abandon')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n{set status to mission.status}\r\n\r\n{if event.communal:\r\n    Você abandonou o objetivo da comunidade: {mission.localisedname}\r\n|else:\r\n    {if find(mission.typeEDName, \"Passenger\") > -1:\r\n        {set type to \"Transport \"}\r\n        {set type to cat(type, mission.passengertype)}\r\n    |else:\r\n        {set type to mission.type}\r\n    }\r\n    {set type to cat(type, \" missão\")}\r\n\r\n    {type} {if mission.faction: for {mission.faction}} abandonada.\r\n}\r\n\r\n{set type to \"Abandoned\"}\r\n{F(\"Mission Route Update\")}\r\n",
      "default": true,
      "name": "Mission abandoned",
      "description": "Triggered when you abandon a mission"
    },
    "Mission accepted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState('eddi_context_last_subject', 'mission')}\n{SetState('eddi_context_last_action', 'accepted')}\n\n{set mission to MissionDetails(event.missionid)}\n\n{if mission.type = \"Donation\":\n    Missão de doação {Occasionally(2,\"generosa\")} foi {OneOf(\"escolhida\",\"aceita\")}\n    {if mission.typeEDName = \"Altruism\": {mission.commodity} |else: créditos} para\n    {OneOf(\"{P(lcase(mission.faction))} com o intúito de {OneOf('aumentar','melhorar','crescer')} sua {OneOf('reputação','moral')} com esta facção\",\n          \"{OneOf('aumentar','melhorar','crescer')} your {OneOf('reputação','moral')} com a {P(lcase(mission.faction))}\")}\n|elif event.communal:\n    Você aceitou o objetivo da comunidade: {mission.localisedname}\n|else:\n    {if find(mission.typeEDName, \"Passenger\") > -1:\n        {set type to \"Transport \"}\n        {set type to cat(type, mission.passengertype)}\n    |else:\n        {set type to mission.type}\n    }\n    {set type to cat(\"missão \", type)}\n    {OneOf(\"{type} {if mission.faction: da {mission.faction}} aceita\",\n        \"{type} aceita {if mission.faction: da {mission.faction}}\",\n        \"Você aceitou uma {type} {if mission.faction: da {mission.faction}}\")\n    }\n}\n\n{Occasionally(1,\"{F('Mission faction state')}\")}..\n\n{if event.passengerswanted:\n Alerta! Vocẽ está {OneOf(\"transportando\",\"carregando\")}\n {OneOf(\"{OneOf('passageiro','pessoal')} {OneOf('procurado','ilegal')}\",\"criminoso conhecido\")}!\n \n Você pode ser atacado por {OneOf(\"autoridades\",\"policiais\")} {Occasionally(2,\"do sistema\")}. Aconselho cuidado. Evite ser scaneado.\n|elif token(mission.name,\"_\",2)  = \"Skimmer\":\n   Esta é uma {OneOf(\"missão\",\"operação\")} de superfície.\n|elif token(mission.name,\"_\",2)  = \"Surface\":\n   Esta é uma {OneOf(\"missão\",\"operação\")} de superfície, você vai precisar de um V R S.\n}\n\n{if missionsCount = 20:\n    Vocẽ alcançou o número máximo de missões que pode aceitar.\n    Por favor, complete algumas para poder aceitar outras.\n|else:\n   {OneOf(\"{Occasionally(2,'Agora')} Você tem {missionsCount} miss{if missionsCount > 1:ões|else:ão}\",\n        \"Está é sua\n    {if missionsCount = 1: 1ª\n    |elif missionsCount = 2: 2ª\n    |elif missionsCount = 3: 3ª\n    |else: {missionsCount}ª\n    }\n    missão\")}.\n}\n\n{if mission.type = \"Delivery\" || mission.type = \"Supply\" || mission.type = \"Smuggle\":\n    {Pause(400)}\n    {SetState('eddi_context_mission_cargo', \"yes\")}\n    {event.amount} tonelada{if event.amount != 1:s} de {event.commodity}\n\n    {set cargo to CargoDetails(event.missionid)}\n    {if cargo.total > 0: \n        {OneOf(\"adicionada{if event.amount != 1:s} ao manifesto da nave\", \"carregada{if event.amount != 1:s} a bordo\", \"armazenada{if event.amount != 1:s} na área de carga\")} agora\n    |else:\n        a ser{if event.amount != 1:em} {OneOf(\"entregue{if event.amount != 1:s}\", \"transportada{if event.amount != 1:s}\")}. Por favor, colete no Depósito de Cargas\n    }.\n}\n\n{set type to \"Accepted\"}\n{F(\"Mission Route Update\")}\n\n",
      "default": true,
      "name": "Mission accepted",
      "description": "Triggered when you accept a mission"
    },
    "Mission Check Expiring": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission Check Expiring }\r\n{_ Check what missions are close to expiring }\r\n\r\n\r\n{if missionsCount > 0 && missionsCount != null:\r\n\r\n    {set mission_destination to []}\r\n    {set mission_expiration to []}\r\n    {set mission_name to []}\r\n    {set mission_id to []}\r\n    {set cur to 0}\r\n\r\n    {while cur < missionsCount:\r\n        {set destination to missions[cur].destinationsystem}\r\n        {if !destination: {set destination to missions[cur].destinationsystems} }\r\n        {set expiry to missions[cur].expiryseconds}\r\n        {set status to missions[cur].status}\r\n        {set name to missions[cur].name}\r\n        {set missionid to missions[cur].missionid}\r\n\r\n        {if expiry != \"\" && (status != \"failed\" || status != \"completed\"):\r\n\r\n            {set seconds to floor(abs(SecondsSince(expiry)))}\r\n\r\n            {if seconds / 60 < missionWarning:\r\n\r\n                {set mission_destination to cat(mission_destination, [destination])}\r\n                {set mission_expiration to cat(mission_expiration, [seconds])}\r\n                {set mission_name to cat(mission_name, [name])}\r\n                {set mission_id to cat(mission_id, [missionid])}\r\n            }\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {if len(mission_destination) > 0:\r\n        Alerta!\r\n        {set cur to 0}\r\n        {while cur < len(mission_destination):\r\n\r\n            {set mission to MissionDetails(mission_id[cur])}\r\n            {if find(mission.typeEDName, \"Passenger\") > -1:\r\n                {set type to \"Transporte \"}\r\n                {set type to cat(type, mission.passengertype)}\r\n            |else:\r\n                {set type to mission.type}\r\n            }\r\n            missão de {type}\r\n\r\n            {if find(mission_destination[cur], \"_\") > -1:\r\n                para múltiplos destinos,\r\n            |else:\r\n                {if mission_destination[cur] != state.eddi_context_system_name:\r\n                    em {mission_destination[cur]}\r\n                |else:\r\n                    n{OneOf(\"este\", \"o atual\")}\r\n                }\r\n                sistema,\r\n            }\r\n            expirando em \r\n\r\n            {set timer to split(format(mission_expiration[cur], \"dl:dd:HH:mm:ss\"), \":\")}\r\n            {set days to cast(timer[0], \"n\") - 1}\r\n            {set hours to cast(timer[1], \"n\")}\r\n            {set minutes to cast(timer[2], \"n\") - 1}\r\n\r\n            {if days > 0: {days} day{if days > 1:s}{if hours = 0: e |else:,}}\r\n            {if hours > 0: {hours} hora{if hours > 1:s} e}\r\n            {minutes} minuto{if minutes > 1:s}.\r\n\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Mission Check Expiring",
      "description": "Check what missions are close to expiring"
    },
    "Mission check galaxy": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission report }\r\n{_ Check what systems you have missions in }\r\n\r\n\r\n{_ Setup allmissions function }\r\n{set allmissions(system) to:\r\n    {set here to find(systems, system)}\r\n    {if here > -1:\r\n        {set number to systems_count[here] + 1}\r\n        {set systems_count to union(systems_count, [here:number])}\r\n    |else:\r\n        {set systems to cat(systems, [system])}\r\n        {set systems_count to cat(systems_count, [1])}\r\n    }\r\n}\r\n\r\n{if missionsCount > 0:\r\n\r\n    {set multi to 0}\r\n\r\n    Você tem {missionsCount} miss{if missionsCount != 1:ões|else:ão}.\r\n\r\n    {if missionsCount = 1:\r\n\r\n        Ela está {Occasionally(2,\"localizada\")}\r\n\r\n        {if missions[0].destinationsystem && missions[0].destinationsystem != \"\":\r\n            no sistema {Occasionally(2,\"estelar\")} {join(split(missions[0].destinationsystem, \".\"), \" \")}.\r\n        |else:\r\n            em um sistema {Occasionally(2,\"star\")} desconhecido.\r\n        }\r\n\r\n    |else:\r\n        {set systems to []}\r\n        {set systems_count to []}\r\n\r\n        {for mission in missions:\r\n            {if mission.status = \"Active\":\r\n                {if mission.destinationsystems:\r\n                    {set multi to multi + 1}\r\n                    {for destination in mission.destinationsystems:\r\n                        {allmissions(destination.name)}\r\n                    }\r\n                |elif mission.destinationsystem && mission.destinationsystem != \"\":\r\n                    {allmissions(mission.destinationsystem)}\r\n                }\r\n            }\r\n        }\r\n\r\n        {if len(systems) = 0:\r\n            Elas não têm sistemas de destino designados.\r\n        |elif len(systems) = 1:\r\n            Elas são todas {Occasionally(2,\"localizadas\")}\r\n\r\n            {if systems && systems[0] != \"\":\r\n                no sistema {Occasionally(2,\"estelar\")} {join(split(systems[0], \".\"), \" \")}.\r\n            |else:\r\n                num sistema {Occasionally(2,\"estelar\")} não designado.\r\n            }\r\n\r\n        |else:\r\n            {if multi > 0:\r\n\r\n                {if multi = missionsCount: Todas |else: {multi}}\r\n                estas\r\n                {if multi = 1: é uma |else: são}\r\n                miss{if multi != 1:ões|else:ão} com múltiplos destinos.\r\n            }\r\n            Há\r\n\r\n            {set cur to 0}\r\n            {while cur < len(systems):\r\n                {systems_count[cur]} \r\n                {if cur = 0: destino{if systems_count[0] > 1: s}}\r\n                {if systems[cur] = \"\":\r\n                    em um sistema não designado\r\n                |else:\r\n                    em {join(split(systems[cur], \".\"), \" \")}\r\n                }\r\n\r\n                {set cur to cur + 1}\r\n                {if cur = len(systems)-1: e |elif cur < len(systems):, }\r\n            }\r\n        }.\r\n    }\r\n|else:\r\n    Você não tem missões neste momento.\r\n}",
      "default": true,
      "name": "Mission check galaxy",
      "description": "Check what systems you have missions in"
    },
    "Mission Check Near Most": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission Check Near Most}\n{_ Find nearest system with missions, and system with most missions}\n\n\n{if missionsCount > 0:\n\n    {_ Setup nearest calculation function}\n    {set nearcalc(name) to:\n\n        {set distance to round(Distance(curr, name), 1)}\n\n        {if distance < nearest_distance:\n            {set nearest_distance to distance}\n            {set nearest_name to name}\n        }\n        {set mission_systems to cat(mission_systems, [name])}\n    }\n\n    {set curr to state.eddi_context_system_system}\n    {set nearest_name to \"\"}\n    {set mission_systems to []}\n    {set systems_names to []}\n    {set systems_count to []}\n\n    {_ Max scan range. 500 is large, 100 above average, 20-50 normal, 5-10 small}\n    {_ Missions closer than this will be reported}\n    {set nearest_distance to 50}\n\n    {for mission in missions:\n        {if mission.status = \"Active\":\n            {if mission.destinationsystems:\n                {set multi to multi + 1}\n                {for destination in mission.destinationsystems:\n                    {nearcalc(destination.name)}\n                }\n            |elif mission.destinationsystem && mission.destinationsystem != \"\":\n                {nearcalc(mission.destinationsystem)}\n            }\n\n            {set here to find(systems_names, mission.destinationsystem)}\n            {if here > -1:\n                {set number to systems_count[here] + 1}\n                {set systems_count to union(systems_count, [here:number])}\n            |else:\n                {set systems_names to cat(systems_names, [mission.destinationsystem])}\n                {set systems_count to cat(systems_count, [1])}\n            }\n        }\n    }\n\n\n    {_ Calculate system with most missions in _}\n    {set system_most to \"\"}\n    {set system_count to 0}\n\n    {set cur to 0}\n    {while cur < len(systems_names):\n        {if systems_count[cur] > system_count:\n            {set system_most to systems_names[cur]}\n            {set system_count to systems_count[cur]}\n        }\n        {set cur to cur + 1}\n    }\n\n    {set equal to 0}\n    {set cur to 0}\n    {while cur < len(systems_count):\n        {if systems_count[cur] = system_count:\n            {set equal to equal + 1}\n        }\n        {set cur to cur + 1}\n    }\n\n    {_ Report nearest system}\n    {if nearest_name != \"\":\n        {if missionsCount = 1:\n            {if multi = 1:\n                Você tem uma missão com múltiplos destinos. O mais próximo\n            |else:\n                Sua única missão\n            }\n        |else:\n            Sua missão mais próxima\n        }\n        está \n        {if nearest_name = curr:\n            no sistema atual\n        |else:\n            sistema {nearest_name} \n            {if reported != \"yes\":,\n                {if find(nearest_distance, \".00\") > -1: {set nearest_distance to round(nearest_distance, 0)}}\n                que fica a {nearest_distance} anos luz.\n            }\n        }.\n\n\n        {_ Report system/s with most missions}\n        {if equal = 1:\n            {if system_most = nearest_name:\n                {if missionsCount > 1:\n                    Ele também tem\n                    {OneOf(\"{OneOf('a maioria','a maior parte')} das missões\",\n                           \"a maior parte das missões para você concluir\")}.\n                }\n            |else:\n                {if system_most = curr:\n                    {set system_most to \"O sistema atual\"}\n                |else:\n                    {set system_most to cat(\"The\", system_most, \"system\")}\n                }\n                {OneOf(\"A maioria das suas missões está {Occasionally(2,'localizada')} em {system_most}\",\n                       \"em {system_most} estão {OneOf('a maioria','a maior parte')} das suas missões\",\n                       \"em {system_most} está a maior parte das suas missões por concluir\")}.\n            }\n        |else:\n            Você tem {system_count} miss{if system_count > 1:ões|else:ão} em cada\n            {set cur to 0}\n            {set length to equal - 1}\n            {while cur < equal:\n                dos {systems_names[cur]}\n                {set cur to cur + 1}\n                {if cur = length:, e\n                |elif cur < length:,\n                }\n            } sistemas.\n        }\n    }\n\n    {if !system_most && !nearest_name && missionsCount > 0:\n        Você não tem missões ativas no momento.\n    }\n|elif state.eddi_context_last_subject != \"jump\":\n    Você não tem missões {OneOf(\"no momento\",\"desta vez\")}.\n}\n\n",
      "default": true,
      "name": "Mission Check Near Most",
      "description": "Find nearest system with missions, and system with most missions"
    },
    "Mission check station": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission check station }\n{_ Check what missions you have for the current station }\n\n\n{if missionsCount > 0:\n    {set current_station to state.eddi_context_body_name}\n    {set active_missions to 0}\n    {set complete_missions to 0}\n    {set depot_missions to 0}\n\n    {if current_station && current_station != \"\":\n        {for mission in missions:\n            {if mission.destinationstation = current_station ||\n                (mission.originstation = current_station && find(mission.type, \"Delivery\") > -1):\n                {if mission.status = \"Active\":\n                    {if find(mission.type, \"Collect\") > -1 || find(mission.type, \"Delivery\") > -1:\n                        {set depot_missions to depot_missions + 1}\n                    |else:\n                        {set active_missions to active_missions + 1}\n                    }\n                |elif mission.status = \"Complete\":\n                    {set complete_missions to complete_missions + 1}\n                }\n            }\n        }\n    }\n\n    {set total to active_missions + complete_missions + depot_missions}\n    {if total > 0:\n        Vocẽ tem\n        {if depot_missions > 0:\n            {depot_missions} miss{if depot_missions > 1:ões|else:ão} do depósito\n            {if active_missions > 0 && complete_missions > 0: ,\n            |elif active_missions > 0 || complete_missions > 0: e}\n        }\n        {if active_missions > 0:\n            {active_missions} miss{if active_missions > 1:ões|else:ão} ativa{if active_missions > 1:s}\n            {if complete_missions > 0: e}\n        }\n        {if complete_missions > 0:\n            {complete_missions} miss{if complete_missions > 1:ões|else:ão} concluída{if complete_missions > 1:s}\n        }\n        {Occasionally(3,\"located\")} nesta estação.\n    }\n}\n\n",
      "default": true,
      "name": "Mission check station",
      "description": "Check what missions you have for the current station"
    },
    "Mission check system": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission check system }\n{_ Check what missions you have for the current system }\n\n\n{_ Setup addstation function }\n{set addstation(station) to:\n    {set missions_here to missions_here + 1}\n    {set station_based to station_based + 1}\n    {set here to find(stations_here, station)}\n\n    {if here > -1:\n        {if mission.status = \"Active\":\n            {if mission.type = \"Collect\" ||  mission.type= \"Delivery\":\n                {set depot to stations_depot[here] + 1}\n                {set stations_depot to union(stations_depot, [here:depot])}\n            |else:\n                {set active to stations_active[here] + 1}\n                {set stations_active to union(stations_active, [here:active])}\n            }\n        |else:\n            {set complete to stations_complete[here] + 1}\n            {set stations_complete to union(stations_complete, [here:complete])}\n        }\n    |else:\n        {set stations_here to cat(stations_here, [station])}\n        {if mission.status = \"Active\":\n            {if mission.type = \"Collect\" ||  mission.type= \"Delivery\":\n                {set stations_active to cat(stations_active, [0])}\n                {set stations_depot to cat(stations_depot, [1])}\n            |else:\n                {set stations_active to cat(stations_active, [1])}\n                {set stations_depot to cat(stations_depot, [0])}\n            }\n            {set stations_complete to cat(stations_complete, [0])}\n        |else:\n            {set stations_active to cat(stations_active, [0])}\n            {set stations_complete to cat(stations_complete, [1])}\n            {set stations_depot to cat(stations_depot, [0])}\n        }\n    }\n}\n\n\n{if missionsCount > 0:\n    {set current_system to system.name}\n    {set missions_here to 0}\n    {set station_based to 0}\n    {set stations_active to []}\n    {set stations_complete to []}\n    {set stations_depot to []}\n    {set stations_here to []}\n    {set non_stations to []}\n\n    {_ Find all missions in the current system and identify all the stations }\n    {for mission in missions:\n        {if mission.status != \"Failed\":\n            {if mission.destinationsystems:\n                {for destination in mission.destinationsystems:\n                    {if destination.name = current_system && !destination.visited:\n                        {set missions_here to missions_here + 1}\n                    }\n                }\n            |elif mission.destinationsystem = current_system:\n                {if mission.destinationstation && mission.destinationstation != \"\":\n                    {addstation(mission.destinationstation)}\n                |else:\n                    {if mission.status = \"Active\":\n                        {set missions_here to missions_here + 1}\n                        {if find(non_stations, mission.type) = -1:\n                            {set non_stations to cat(non_stations, [mission.type])}\n                        }\n                    }\n                }\n            |elif mission.originsystem = current_system && find(mission.type, \"Delivery\") > -1:\n                {if mission.originstation && mission.originstation != \"\":\n                    {addstation(mission.originstation)}\n                }\n            }\n        }\n    }\n\n    {if missions_here > 0:\n        {set NUM to missions_here}\n        {if NUM = 1: {set NUM to \"uma\"}\n        |elif NUM = 2: {set NUM to \"duas\"}\n        }\n        Você tem {NUM} miss{if missions_here > 1:ões|else:ão} {OneOf('aqui','neste sistema')}.\n\n        {if station_based > 0:\n\n            {set cur to 0}\n\n            {if missions_here = 1:\n                É uma missão\n                {if stations_depot[0] = 1: do depósito,\n                |elif stations_active[0] = 1: ativa,\n                |elif stations_complete[0] = 1: a ser concluída,\n                }\n                localizada em \n                {stations_here[0]}.\n\n            |else:\n                Há \n\n                {while cur < len(stations_here):\n\n                    {if stations_depot[cur] > 0:\n                        {stations_depot[cur]} do depósito\n                        {if stations_active[cur] && stations_active[cur] > 0 && stations_complete[cur] && stations_complete[cur] > 0: ,\n                        |elif (stations_active[cur] && stations_active[cur] > 0) || (stations_complete[cur] && stations_complete[cur] > 0): and}\n                        {set last to stations_depot[cur]}\n                    }\n\n                    {if stations_active[cur] && stations_active[cur] > 0:\n                        {stations_active[cur]} ativas\n                        {if stations_complete[cur] && stations_complete[cur] > 0: e}\n                        {set last to stations_active[cur]}\n                    }\n\n                    {if stations_complete[cur] && stations_complete[cur] > 0:\n                        {stations_complete[cur]} concluídas\n                        {set last to stations_completed[cur]}\n                    }\n\n                    miss{if last > 1:ões|else:ão} em \n                    {set model to StationDetails(stations_here[cur]).model}\n                    {set type to token(model, \" \", 1)}\n                    {if find(model, \"Unknown\") = -1 && find(model, stations_here[cur]) = -1:\n                        {if type != \"\": {type} |else: {model} },\n                    }\n                    {stations_here[cur]}\n\n                    {set cur to cur + 1}\n                    {if cur = len(stations_here)-1:, e |elif cur < len(stations_here): ,}\n                }.\n            }\n        }\n\n        {if missions_here > station_based:\n\n            {if missions_here = 1:\n                É uma missão \n                {if stations_depot[0] = 1: do depósito\n                |elif stations_active[0] = 1: ativa\n                |elif stations_complete[0] = 1: a ser concluída\n                }\n                que precisa ser {OneOf(\"procurada\",\"localizada\",\"encontrada\")}.\n\n            |else:\n                {Pause(500)}\n                {set remaining to missions_here - station_based}\n                A{if remaining > 1:s} miss{if remaining > 1:ões|else:ão} {if station_based > 0: que sobra {remaining}}\n\n                {set cur to 0}\n                {while cur < len(non_stations):\n                    {non_stations[cur]}\n                    {set cur to cur + 1}\n                    {if cur = len(non_stations)-1: e |elif cur < len(non_stations): ,}\n                }\n                precisa{if remaining > 1:m} ser {OneOf(\"encontrada{if remaining > 1:s}\",\"procurada{if remaining > 1:s}\",\"determinada{if remaining > 1:s}\")}.\n            }\n        }\n    }\n}\n\n",
      "default": true,
      "name": "Mission check system",
      "description": "Check what missions you have for the current system"
    },
    "Mission completed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission completed }\r\n{_ Triggered when you complete a mission }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n{set status to mission.status}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(\"missão \",type)}\r\n{set ranktype to token(mission.name,\"_\",2)}\r\n\r\n{_ TESTE DE AJUSTE DE RECOMPENSA _}\r\n\r\n{set AMOUNT to split(Humanise(event.reward), \" \")}\r\n{set POSITION to find(AMOUNT, \"milhões\")}\r\n{if POSITION > -1:\r\n    {set AMOUNT to union(AMOUNT, [POSITION:\"milhões de\"])}\r\n    {set POSITION to POSITION - 1}\r\n    {set NUM to format(AMOUNT[POSITION], \"n\")}\r\n    {if NUM = \"1\":\r\n        {set POSITION to POSITION + 1}\r\n        {set AMOUNT to union(AMOUNT, [POSITION:\"milhão de\"])}\r\n    }\r\n}\r\n\r\n{set AMOUNT to join(AMOUNT, \" \")}\r\n\r\n{_                               _}\r\n\r\n{if mission.type = \"Donation\":\r\n    {if mission.typeEDName = \"Altruism\": {set donate to cat(event.amount, \" toneladas de \",event.commodity)}\r\n    |else: {set donate to cat(Humanise(event.donation),\" créditos\")}\r\n    }\r\n    {OneOf(\"Doou {Occasionally(2, '{donate}')} para {P(event.faction)}\",\r\n           \"{P(lcase(event.faction))} {Occasionally(2, 'agredecidamente')} recebeu sua doação {Occasionally(2, 'de {donate}')}\",\r\n           \"{P(lcase(event.faction))} lhe agradece por sua doação {Occasionally(2, 'de {donate}')}\")}\r\n    {F(\"Mission faction state\")}.\r\n    Sua {OneOf(\"reputação\",\"moral\")} {OneOf(\"melhorou\",\"cresceu\")}\r\n|elif ranktype = \"RANKEMP\" || ranktype = \"RankEmp\" || ranktype = \"RANKFED\" || ranktype = \"RankFed\":\r\n    Você {OneOf(\"completou a {type} com sucesso\",\"completou com sucesso a {type}\")}\r\n|elif mission.communal:\r\n    Você completou o objetivo da comunidade: {mission.name}. Você {OneOf('recebeu','foi agraciado com')}\r\n    {Humanise(mission.reward)} créditos por {OneOf(\"sua contribuição\",\"sua participação\",\"ter participado\")}\r\n|else:\r\n    {if event.reward > 0:\r\n        {OneOf(\r\n         \"{type} concluída. Você {OneOf('recebeu','foi agraciado com')} {AMOUNT} créditos\",\r\n         \"Você {OneOf('recebeu','foi agraciado com')} {AMOUNT)} créditos por {OneOf('concluir {type} com sucesso','concluir a {type}','ter concluído a {type}')}\"\r\n      )}\r\n   |else:\r\n      {OneOf(\"{type} concoluída\",\"Você completou a {type} com sucesso\",\"Você completou a {type}\")}\r\n   }\r\n}\r\n\r\n{if mission.type != \"Donation\": {F(\"Mission faction state\")}}.\r\n\r\n{if cargo = \"yes\" || cargo = \"return\":\r\n    {Pause(100)}\r\n    {SetState('eddi_context_mission_cargo', \"yes\")}\r\n    {if part1 = \"Smuggle\":\r\n        {event.amount} tonelada{if event.amount != 1:s} de {event.commodity}\r\n        {OneOf(\"entregues\", \"transportadas\")} com sucesso.\r\n    }\r\n}\r\n\r\n{if event.commodityrewards:\r\n\r\n    {Pause(100)}\r\n    {if event.commodityrewards[0].amount = 0:\r\n       {if event.reward > 0:\r\n          {OneOf(\"Entretanto, \",\"Porém, \")}\r\n       }\r\n       você não pode aceitar a carga como recompensa, {Occasionally(2,\"já que\")}\r\n       {if ship.cargocapacity = 0:\r\n          você não tem estantes de carga.\r\n       |else:\r\n          seu espaço de carga está lotado.\r\n       }\r\n    |else:         \r\n       {if event.reward > 0:\r\n          {OneOf(\"Adicionalmente, \",\"Também, \")}\r\n       }\r\n\r\n       {set missionreward to \"yes\"}\r\n       {for commodityreward in event.commodityrewards:\r\n          {commodityreward.amount} tonelada{if commodityreward.amount > 1:s} de {commodityreward.commodity}\r\n          {set cur to cur + 1}\r\n          {if cur = len(event.commodityrewards) - 1:, }\r\n       }\r\n       {OneOf(\"agora a bordo\",\"confirmada{if commodityreward.amount > 1:s} a bordo\",\"fo{if commodityreward.amount > 1:ram|else:i} recebida{if commodityreward.amount > 1:s}\")}.\r\n    }\r\n}\r\n\r\n{set type to \"Completed\"}\r\n{F(\"Mission Route Update\")}",
      "default": true,
      "name": "Mission completed",
      "description": "Triggered when you complete a mission"
    },
    "Mission expired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission expired }\r\n{_ Triggered when a mission has expired }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'expired')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(type, \" missão\")}\r\n\r\n{type} {if mission.faction: for {mission.faction}} expirou.\r\n{if mission.commodity:\r\n    {for cargo in inventory:\r\n        {if cargo.name = mission.commodity && cargo.haulage > 0:\r\n            Toda a carga relativa à missão será marcada como roubada.\r\n        }\r\n    }\r\n}\r\n\r\n{set type to \"Expired\"}\r\n{F(\"Mission Route Update\")}\r\n",
      "default": true,
      "name": "Mission expired",
      "description": "Triggered when a mission has expired"
    },
    "Mission faction state": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "\r\n{if mission.factionstate = \"Boom\":\r\n    {OneOf(\"durante este\",\"neste\")} {OneOf(\"tempo de prosperidade\",\"auge econômico\")}\r\n|elif mission.factionstate = \"Bust\":\r\n    durante {OneOf(\"este declínio econômico\",\"esta recessão\",\"desaceleração econômica\")}\r\n|elif mission.factionstate = \"CivilUnrest\":\r\n    durante {Occasionally(2,\"este período de\")} {OneOf(\"revolta civil\",\"conflito civil\")}\r\n|elif mission.factionstate = \"CivilWar\":\r\n    durante {Occasionally(2,\"este período de\")} {OneOf(\"guerra civil\",\"conflito civil\")}\r\n|elif mission.factionstate = \"Democracy\":\r\n    {OneOf(\"em nome da\",\"pela\")} democracia\r\n|elif mission.factionstate = \"Election\":\r\n    durante esta eleição\r\n|elif mission.factionstate = \"Famine\":\r\n    {OneOf('neste','durante este')} período de fome\r\n|elif mission.factionstate = \"Industrial\":\r\n\r\n|elif mission.factionstate = \"Lockdown\":\r\n\r\n|elif mission.factionstate = \"Outbreak\"\r\n    , para ajudar {OneOf(\"na emergência médica\",\"no alívio de surtos\")}\r\n}\r\n",
      "default": true,
      "name": "Mission faction state",
      "description": "Report the faction state"
    },
    "Mission failed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'fail')}\r\n\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(type, \" missão\")}\r\n\r\n{OneOf(\"{type} {if mission.faction: para {mission.faction}} falhou\", \r\n    \"Você falhou na missão {type} {if mission.faction: para {mission.faction}}\")}.\r\n\r\n{set type to \"Failed\"}\r\n{F(\"Mission Route Update\")}\r\n",
      "default": true,
      "name": "Mission failed",
      "description": "Triggered when you fail a mission"
    },
    "Mission redirected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission redirected }\r\n{_ Triggered when a mission is redirected }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'redirected')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(\"missão \", type)}\r\n\r\n{if mission.status = \"Complete\" && mission.destinationsystem = mission.originsystem:\r\n    Requerimentos da {type} concluídos. Redirecionado para a origem da missão.\r\n|elif mission.destinations:\r\n    {type} em cadeia redirecioada para o sistema {event.newdestinationsystem}.\r\n|else:\r\n    {type} redirecionada\r\n    {if event.newdestinationstation:\r\n       para {event.newdestinationstation} no sistema {event.newdestinationsystem}.\r\n    |else:\r\n       no sistema {event.newdestinationsystem}.\r\n    }\r\n}\r\n\r\n{set type to \"Redirected\"}\r\n{F(\"Mission Route Update\")}\r\n",
      "default": true,
      "name": "Mission redirected",
      "description": "Triggered when a mission is redirected"
    },
    "Mission report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission report }\r\n{_ Report the current mission log }\r\n\r\n\r\n{F(\"Mission check galaxy\")}\r\n\r\n\r\n",
      "default": true,
      "name": "Mission report",
      "description": "Report the current mission log"
    },
    "Mission Route Clear": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{SetState('missionsdata', \"\")}\r\n{SetState('missionsrouteuseeddi', \"\")}\r\n{SetState('missionsroutetype', \"\")}\r\n{SetState('missionsdestination', \"\")}\r\n{SetState('missionsroutedistance', \"\")}\r\n{SetState('missionsroute', \"\")}",
      "default": true,
      "name": "Mission Route Clear",
      "description": "Clear a set mission route."
    },
    "Mission Route Fast": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Missions_RoutePlot }\r\r\n{_ Plot a 'nearest neighbor' route for defined systems in the mission store }\r\r\n\r\r\n\r\r\n{_ Setup 'destination array builder' function }\r\r\n{set systems_builder(system) to:\r\r\n    {if find(systems, system) = -1:\r\r\n        {set systems to cat(systems, [system])}\r\r\n    }\r\r\n}\r\r\n\r\r\n\r\r\n{if missionsCount > 0:\r\r\n\r\r\n    {set original_dest to state.missionsdestination}\r\r\n    {set origins to []}\r\r\n    {set returns to []}\r\r\n    {set failed to []}\r\r\n\r\r\n    {for mission in missions:\r\r\n        {set origins to cat(origins, [mission.originsystem])}\r\r\n        {if mission.originreturn = true:\r\r\n            {set returns to cat(return, [\"yes\"])}\r\r\n        |else:\r\r\n            {set returns to cat(return, [\"no\"])}\r\r\n        }\r\r\n        {set failed to cat(failed, [mission.status])}\r\r\n    }\r\r\n\r\r\n    {set systems to []}\r\r\n    {set system_count to 0}\r\r\n\r\r\n    {if state.missionsroute = \"\" || state.missionsroute = null:\r\r\n        {set route_end to state.eddi_context_system_name}\r\r\n    |else:\r\r\n        {set temp_route to split(state.missionsroute, \"_\")}\r\r\n        {set route_end to temp_route[len(temp_route) - 1]}\r\r\n    }\r\r\n\r\r\n    {_ Add all mission systems that have a 'return to origin' to the destination list, unless it has failed }\r\r\n    {set pos to find(returns, \"yes\")}\r\r\n    {while pos > -1:\r\r\n        {if failed[pos] != \"failed\":\r\r\n            {systems_builder(origins[pos])}\r\r\n        }\r\r\n        {set pos to find(returns, \"yes\", pos + 1)}\r\r\n    }\r\r\n\r\r\n    {_ Add all destination systems to the destination list, unless they have failed }\r\r\n    {set cur to 0}\r\r\n    {while cur < missionsCount:\r\r\n        {set destination to missions[cur].destinationsystem}\r\r\n\r\r\n        {if destination != \"\" && failed[cur] != \"failed\":\r\r\n            {if find(destination, \"_\") > -1:\r\r\n                {set dest_array to split(destination, \"::\")}\r\r\n                {for destination in dest_array: {systems_builder(destination)}}\r\r\n            |else:\r\r\n                {systems_builder(destination)}\r\r\n            }\r\r\n        }\r\r\n        {set cur to cur + 1}\r\r\n    }\r\r\n\r\r\n    {_ Now create the route _}\r\r\n    {set route to []}\r\r\n\r\r\n    {_ Remove end dest from array _}\r\r\n    {set systems to split(join(except(systems, [find(systems, route_end):\"\"]), \"_\"), \"_\")}\r\r\n    {_ Remove the current system, if it's found _}\r\r\n    {set systems to split(join(except(systems, [find(systems, state.eddi_context_system_name):\"\"]), \"_\"), \"_\")}\r\r\n\r\r\n    {set system_count to len(systems)}\r\r\n\r\r\n    {set curr to SystemDetails(state.eddi_context_system_name)}\r\r\n    {set end to SystemDetails(route_end)}\r\r\n    {set total_distance to 0}\r\r\n    {set cur to 0}\r\r\n\r\r\n    {if systems[0] && systems[0] != \"\":\r\r\n        {while cur < system_count:\r\r\n            {set near to 10000}\r\r\n            {for sys in systems:\r\r\n                {set dest to SystemDetails(sys)}\r\r\n                {set dist to round(Distance(curr.x, curr.y, curr.z, dest.x, dest.y, dest.z), 2)}\r\r\n\r\r\n                {if dist < near:\r\r\n                    {set nearest to dest.name}\r\r\n                    {set near to dist}\r\r\n                }\r\r\n            }\r\r\n            {set total_distance to total_distance + near}\r\r\n            {set route to cat(route, [nearest])}\r\r\n            {set systems to split(join(except(systems, [find(systems, nearest):\"\"]), \"_\"), \"_\")}\r\r\n            {set curr to SystemDetails(nearest)}\r\r\n            {set cur to cur + 1}\r\r\n        }\r\r\n    }\r\r\n\r\r\n    {_ Calculate total route length _}\r\r\n    {set dest to SystemDetails(route_end)}\r\r\n    {set dist to round(Distance(curr.x, curr.y, curr.z, dest.x, dest.y, dest.z), 2)}\r\r\n    {set total_distance to total_distance + dist}\r\r\n\r\r\n    {_ Join it all together _}\r\r\n    {set route to cat(route, [route_end])}\r\r\n\r\r\n    {SetState('missionsroutetype', \"route\")}\r\r\n    {SetState('missionsdestination', route[0])}\r\r\n    {SetState('missionsroutedistance', total_distance)}\r\r\n    {SetState('missionsroute', join(route, \"_\"))}\r\r\n    {set system_count to len(route)}\r\r\n\r\r\n    {if total_distance = 0:\r\r\n        Rota calculada para um sistema.\r\r\n        {OneOf(\"Você já está no sistema de destino\",\r\r\n               \"Sua{if missionsCount > 1:s} miss{if missionsCount > 1:ões estão todas |else:ão está} localizada{if missionsCount > 1:s} \r\r\n                {OneOf('neste sistema', 'no sistema atual')}\")}.\r\r\n    |else:\r\r\n        Rota das missões \r\r\n        {if original_dest != null && original_dest != \"\": re}calculadas\r\r\n        para {system_count} sistema{if system_count != 1:s}.\r\r\n        {Pause(400)}\r\r\n        {if total_distance > 0:\r\r\n            Distância total é de {round(total_distance, 1)} anos luz.\r\r\n            {Pause(400)}\r\r\n            {if original_dest != null && original_dest != \"\" && original_dest != route[0]:\r\r\n                Primeiro destino é {route[0]}.\r\r\n            }\r\r\n        |elif missionsCount > 0 && total_distance = 0:\r\r\n            {OneOf(\"Você já está no sistema destino\",\r\r\n                   \"Sua{if missionsCount > 1:s} miss{if missionsCount > 1:ões estão todas |else:ão está} localizada{if missionsCount > 1:s}\r\r\n                    {OneOf('neste sistema', 'no sistema atual')}\")}.\r\r\n        |else:\r\r\n            Incapaz de calcular a rota das missões.\r\r\n        }\r\r\n\r\r\n        {if original_dest != null && original_dest != \"\" && original_dest != route[0]:\r\r\n            Destino inicial foi atualizado.\r\r\n        }\r\r\n        {if total_distance > 0:  Aguardando ordens.}\r\r\n    }\r\r\n\r\r\n    {SetState('eddi_context_mission_destination_locked', \"no\")}\r\r\n\r\r\n|else:\r\r\n    {if autoroute != \"yes\":\r\r\n        Você não tem missão para planejar rótas.\r\r\n    }\r\r\n}\r\r\n    ",
      "default": true,
      "name": "Mission Route Fast",
      "description": "Plot a 'nearest neighbor' route for defined systems in the mission store"
    },
    "Mission Route Get Distance": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission Route Get Distance}\n{_ Find distance to destination}\n\n{set dist to -1}\n{if state.from_system && state.to_system:\n    {if state.from_system = \"\":\n        Sistema de origem não designado.\n    |elif state.to_system = \"\":\n        Sistema de destino não designado.\n    |else:\n        {set fs to SystemDetails(state.from_system)}\n        {set ts to SystemDetails(state.to_system)}\n\n        {if !fs.name:\n            Sua origem não está nos mapas estelares da Federação de Pilotos.\n        |elif !ts.name:\n            Seu destino não está nos mapas estelares da Federação de Pilotos.\n        |else:\n            {set dist to round(Distance(fs.x, fs.y, fs.z, ts.x, ts.y, ts.z), 2)}\n            {if state.getdistance = 'true':\n                Distância {Occasionally(2, \"de {fs.name}\")} até\n                {Occasionally(2, \"sistema {OneOf('alvo','de destino')}\")}\n                {ts.name} é de {dist} anos luz.\n                {SetState('getdistance', false)}\n            }\n        }\n    }\n}\n\n{SetState('distance', dist)}\n\n",
      "default": true,
      "name": "Mission Route Get Distance",
      "description": "Find distance to destination"
    },
    "Mission Route Report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission Route Report _}\r\n{_ Report the current route information _}\r\n\r\n{if system.name != state.missionsdestination && len(state.missionsroute) > 0 && state.missionsroute != \"Not set\":\r\n\r\n    {set route to split(state.missionsroute, \"_\")}\r\n\r\n    Relatório de Rota: Sistema{if len(route) > 1:s} destino:\r\n\r\n    {set cur to 0}\r\n    {set length to len(route) - 1}\r\n    {while cur < len(route):\r\n        {route[cur]}\r\n        {set cur to cur + 1}\r\n        {if cur = length: e\r\n        |elif cur < length:,\r\n        }\r\n    }.\r\n\r\n    {if len(route) > 1:\r\n        Distância Total: {round(state.missionsroutedistance, 2)} anos luz.\r\n        Destinno Inicial: {state.missionsdestination}.\r\n    |else:\r\n        Distância: {round(state.missionsroutedistance, 2)} anos luz.\r\n    }\r\n\r\n|elif system.name = state.missionsdestination:\r\n    Relatório de Rota: Você está no sistema de destino, {state.missionsdestination}.\r\n\r\n|else:\r\n    {OneOf(\"Você {OneOf('não tem', 'não tem')} rota de missão {OneOf('no momento', 'desta vez')} a reportar\",\r\n           \"{OneOf('Não há', 'você não tem')} rota a reportar {OneOf('no momento', 'desta vez')}\")}.\r\n}\r\n",
      "default": true,
      "name": "Mission Route Report",
      "description": "Report the current route information"
    },
    "Mission Route Update": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission Route Update _}\r\n{_ Updates the route if no more missions in the current system _}\r\n\r\n{set active_count to 0}\r\n{set complete_count to 0}\r\n\r\n{for mission in missions:\r\n    {if mission.destinationsystems:\r\n        {for destination in mission.destinationsystems:\r\n            {if destination.name = system.name:\r\n                {if mission.status = \"Active\":\r\n                    {set active_count to active_count + 1}\r\n                |elif mission.status = \"Complete\":\r\n                    {set complete_count to complete_count + 1}\r\n                }\r\n            }\r\n        }\r\n    |elif mission.destinationsystem = system.name:\r\n        {if mission.status = \"Active\":\r\n            {set active_count to active_count + 1}\r\n        |elif mission.status = \"Complete\":\r\n            {set complete_count to complete_count + 1}\r\n        }\r\n    }\r\n}\r\n\r\n{if type = \"Completed\" || type = \"Abandoned\" || type = \"Failed\":\r\n    {if status = \"Active\":\r\n        {set active_count to active_count - 1}\r\n    |elif status = \"Complete\":\r\n        {set complete_count to complete_count - 1}\r\n    }\r\n}\r\n\r\n{set total_count to active_count + complete_count}\r\n{set route to split(state.missionsroute, \"_\")}\r\n\r\n{_ Set mission types that don't have a destination _}\r\n{_ Possible mission types are _}\r\n{_ Altruism, Assassinate, Collect, Courier, Delivery, Disable, Massacre, _}\r\n{_ Mining, Passenger, Permit, Piracy, Rescue, Salvage, Scan, Smuggle _}\r\n{set type_list to \"Altruism Collect Mining Permit Piracy\"}\r\n\r\n{if total_count > 0 && type != \"Accepted\":\r\n    {if active_count > 0:\r\n        Você ainda tem {active_count} miss{if total_count > 1:ões|else:ão} ativa{if active_count > 1:s}\r\n    }\r\n    {if complete_count > 0:\r\n        {if active_count > 0:, e |else: Você ainda tem} miss{if total_count > 1:ões|else:ão}\r\n        {complete_count} concluída{if complete_count > 1:s}\r\n    }\r\n    neste sistema.\r\n\r\n|else:\r\n\r\n    {if state.missionsrouteuseeddi = \"yes\":\r\n\r\n        {if route[0] = system.name && len(route) > 0 && type != \"Accepted\":\r\n            {set route to RouteDetails(\"update\")}\r\n        |else:\r\n            {set route to RouteDetails(\"route\")}\r\n        }\r\n\r\n    |elif state.missionsrouteuseeddi = \"no\":\r\n\r\n        {if route[0] = system.name && len(route) > 0 && type != \"Accepted\":\r\n\r\n            {SetState('missionsroute', join(except(route, [0:\"\"]), \"_\"))}\r\n            {set route to split(state.missionsroute, \"_\")}\r\n            {SetState('missionsdestination', route[0])}\r\n            {SetState('missionsroutetype', \"update\")}\r\n\r\n            {if route[0] != \"\" && route[0] != null:\r\n                {set dist to round(Distance(system.name, route[0]), 2)}\r\n                {SetState('missionsroutedistance', state.missionsroutedistance - dist)}\r\n\r\n                {if route[1] != \"\" && route[1] != null: Próximo destino da |else: Destino de final da}\r\n                rota é {route[0]}, a {round(dist, 1)} anos luz.\r\n\r\n            |elif route[0] = \"\" || route[0] = null:\r\n                {SetState('missionsroutedistance', null)}\r\n                Você {OneOf(\"completou\", \"alcançou o final da\")} sua rota.\r\n            |else:\r\n                Incapaz de atualizar o próximo destino de missão.\r\n            }\r\n\r\n        |elif missionsCount > 0:\r\n            {F(\"Mission Route Fast\")}\r\n        }\r\n    }\r\n}\r\n\r\n{set dest to state.missionsdestination}\r\n\r\n{if dest != system.name && dest != \"\" && dest != null:\r\n    {SetState('eddi_context_mission_destination_locked', \"no\")}\r\n    {if state.eddi_context_mission_route_useauto = \"no\":\r\n        Por favor, trace novamente a rota no Mapa da Galácsiaa.\r\n    |elif state.eddi_context_supercruise = \"no\" && state.eddi_context_docked = \"no\":\r\n        Entre em supervelocidade para {OneOf(\"ativar\", \"habilitar\")} o sistema de autodeterminação de rota.\r\n    |elif state.eddi_context_docked = \"yes\" && state.eddi_context_mission_accepted = \"no\":\r\n        Decole para {OneOf(\"ativar\", \"habilitar\")} o sistema de autodeterminação de rota.\r\n        {SetState('eddi_context_mission_accepted', \"yes\")}\r\n    }\r\n}\r\n\r\n{_ Build string to save in Voice Attack _}\r\n{set missionsdata to cat(state.missionsrouteuseeddi, \"+=\", state.missionsroutetype, \"+=\", state.missionsdestination, \"+=\", state.missionsroutedistance, \"+=\", state.missionsroute)}\r\n{SetState('missionsdata', missionsdata)}\r\n",
      "default": true,
      "name": "Mission Route Update",
      "description": "Updates the route if no more missions in the current system"
    },
    "Mission warning": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission warning }\r\n{_ Triggered when a mission is about to expire, based on a set threshold }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'warning')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(\"missão \",type)}\r\n\r\nAlerta: {type} {if mission.faction: para {mission.faction}}\r\n{if find(mission.destinationsystems, \"_\") > -1:\r\n    para múltiplos destinos,\r\n|elif mission.destinationsystem:\r\n\r\n    {if mission.destinationsystem = state.eddi_context_system_name:\r\n        esta\r\n    |else:\r\n        a {mission.destinationsystem}\r\n    }\r\n    sistema\r\n}\r\n\r\nvai expirar em {event.remaining} minutos.\r\n\r\n",
      "default": true,
      "name": "Mission warning",
      "description": "Triggered when a mission is about to expire, based on a set threshold"
    },
    "Missions": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Missions }\r\n{_ Triggered at session start from Missions event }",
      "default": true,
      "name": "Missions",
      "description": "Triggered at session start from Missions event"
    },
    "Missions route": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Missions route }\r\n{_ Get the missions route for various mission details }\r\n\r\n\r\n{set curr to SystemDetails(system.name)}\r\n\r\n{if event.routetype = \"expiring\":\r\n    {if event.distance > 0:\r\n        {set mission to MissionDetails(event.missionids[0])}\r\n\r\n        {if find(mission.typeEDName, \"Passenger\") > -1:\r\n            {set type to \"Transport \"}\r\n            {set type to cat(type, mission.passengertype)}\r\n        |else:\r\n            {set type to mission.type}\r\n        }\r\n        {set type to cat( \"missão \",type)}\r\n\r\n        {type} {if mission.faction: for {mission.faction}}\r\n        {if mission.destinationsystem: no \r\n            {if mission.destinationsystem = curr.name:\r\n                 sistema atual\r\n            |else:\r\n                {mission.destinationsystem}\r\n            } sistema\r\n        } vai expirar.\r\n    |else:\r\n        Nenhuma missão ativa encontrada.\r\n    }\r\n|elif event.routetype = \"farthest\":\r\n    {if event.distance > 0:\r\n        Sua {if missionsCount = 1: only |else: farthest}\r\n        alvo da missão está no \r\n        {if event.system = curr.name:\r\n            sistema atual\r\n        |else:\r\n            sistema {event.system}, a {round(event.distance, 1)} anos luz\r\n        }.\r\n    |else:\r\n        Missão com um sistema designado não encontrada.\r\n    }\r\n|elif event.routetype = \"most\":\r\n    {if missionsCount = 1:\r\n        Seu único alvo de missão está {Occasionally(2,\"localizado\")} \r\n        {if missions[0].destinationsystem = \"\":\r\n            em um sistema {Occasionally(2,\"estelar\")} desconhecido\r\n        |elif missions[0].destinationsystem = curr.name:\r\n            no sistema {Occasionally(2,\"star\")} atual\r\n        |else:\r\n            no sisetma {Occasionally(2,\"star\")} {missions[0].destinationsystem}\r\n        }\r\n        .\r\n    |else:\r\n        {set systems to split(event.systems, \"_\")}\r\n        {set system_most to event.system}\r\n        {set systems_count to len(systems)}\r\n\r\n        {if systems_count = 1:\r\n            {if system_most = curr.name:\r\n                {set system_most to \"O sistema atual\"}\r\n            |else:\r\n                {set system_most to cat(\"O sistema \", system_most)}\r\n            }\r\n            {OneOf(\"A maioria das suas missões estão {Occasionally(2,'localizadas')} em {system_most}\",\r\n                \"{system_most} tem {OneOf('a maioria','a maior parte')} das missões\",\r\n                \"{system_most} tem a maioria das missões para vocẽ concluir\")}.\r\n        |elif systems_count > 1:\r\n            Você tem {event.count} alvo{if event.count > 1:s} de missão, cada um em \r\n\r\n            {set cur to 0}\r\n            {while cur < len(equal):\r\n                {systems[cur]}\r\n                {set cur to cur + 1}\r\n                {if cur = systems_count-1: e |elif cur < systems_count: ,}\r\n            } sistemas.\r\n        }\r\n    }\r\n|elif event.routetype = \"nearest\":\r\n    {if event.distance > 0:\r\n        Seu{if missionsCount >1:s} {if missionsCount = 1: único |else: mais próximo}\r\n        alvo de missão está \r\n        {if event.system = curr.name:\r\n            no sistema atual\r\n        |else:\r\n            no sistema {event.system}, a {round(event.distance, 1)} anos luz\r\n        }.\r\n    |else:\r\n        Missão não encontrada com um sistema alvo designado.\r\n    }\r\n|elif event.routetype = \"route\":\r\n\r\n    Rota de missões {if missionsCount > 1: re}calculada para {event.count} sistemas.\r\n\r\n    {if event.routedistance > 0:\r\n        Distância total é de {round(event.routedistance, 1)} anos luz.\r\n        {Pause(400)}\r\n        {if event.system != original_dest: Primeiro destino é {event.system}.}\r\n    |elif missionsCount > 0 && event.routedistance = 0:\r\n        {OneOf(\"Sua{if missionsCount > 1:s} miss{if missionsCount > 1:ões estão |else:ão está} localizada neste sistema\",\r\n               \"Você já está no sistema destino\")}.\r\n    |else:\r\n        Não é possível calculcar a rota das missões.\r\n    }\r\n\r\n    {if original_dest != null && original_dest != \"\" && original_dest != route[0]:\r\n        Destino inicial foi atualizado.\r\n        {SetState('eddi_context_mission_destination_locked', \"no\")}\r\n    }\r\n    {if total_distance > 0:  Aguardando instruções.}\r\n\r\n|elif event.routetype = \"source\":\r\n    {if event.count > 0:\r\n        {set systems to split(event.route, \"_\")}\r\n\r\n        {set pos to 0}\r\n        {while pos < event.count:\r\n\r\n            {set source_cargo to []}\r\n            {for missionid in event.missionids:\r\n                {set haulage to HaulageDetails(missionid)}\r\n                {if haulage.sourcesystem = systems[pos]:\r\n                    {set cargo to CargoDetails(missionid)}\r\n                    {if find(source_cargo, cargo.name) = -1:\r\n                        {set source_cargo to cat(source_cargo, [cargo.name])}\r\n                    }\r\n                }\r\n            }\r\n\r\n            {if pos = 0:\r\n                Sua {if event.count = 1: única |else: mais próxima}\r\n            |elif pos = 1:\r\n                Adicionalmente, sua\r\n            |elif pos = event.count - 1:\r\n                Por último, sua\r\n            |else:\r\n                Sua\r\n            }\r\n\r\n            fonte de missão de transporte para\r\n            {set cur to 0}\r\n            {while cur < len(source_cargo):\r\n                {source_cargo[cur]}\r\n                {set cur to cur + 1}\r\n                {if cur = len(source_cargo) - 1: e |elif cur < len(source_cargo): ,}\r\n            }\r\n\r\n            está no \r\n            {if systems[pos] = system.name:\r\n                sistema atual\r\n            |else:\r\n                sistema {systems[pos]},\r\n                {set distance to Distance(system.name, systems[pos])}\r\n                a {round(distance, 1)} anos luz\r\n            }.\r\n            {set pos to pos + 1}\r\n        }\r\n        {SetState('eddi_context_cargo_source', event.route)}\r\n    |else:\r\n        Fonte da carga não encontrada com um sistema alvo designado.\r\n    }\r\n\r\n|elif event.routetype = \"update\":\r\n    {set route to split(event.route, \"_\")}\r\n    {if event.system:\r\n        Destino da {if route[1] != \"\" && route[1] != null: Próxima missão |else: Rota final }\r\n        está a{event.system}, {round(event.distance, 1)} anos luz.\r\n    |elif route[0] = \"\" || route[0] = null:\r\n        {SetState('missionsroutedistance', null)}\r\n        Vocẽ {OneOf(\"concluiu\", \"chegou no final da\")} sua róta.\r\n    |else:\r\n        Não foi possível atualizar o próximo destino de missão.\r\n    }\r\n    {if event.system != system.name:\r\n        {SetState('eddi_context_mission_destination_locked', \"no\")}\r\n    }\r\n}\r\n\r\n{SetState('missionsroutetype', event.routetype)}\r\n{SetState('missionsid', event.missionids[0])}\r\n{SetState('missionsdestination', event.system)}\r\n{SetState('missionsdestinations', event.systems)}\r\n{SetState('missionsdistance', event.distance)}\r\n{SetState('missionsroutedistance', event.routedistance)}\r\n{SetState('missionsroute', event.route)}\r\n{SetState('missionscount', event.count)}\r\n",
      "default": true,
      "name": "Missions route",
      "description": "Get the missions route for various mission details"
    },
    "Missions variable report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": " Use Eddi -   {state.missionsrouteuseeddi}.\r\n Route type -   {state.missionsroutetype}.\r\n Destination -   {state.missionsdestination}.\r\n Current -   {system.name}.\r\n Locked -    {state.eddi_context_mission_destination_locked}.\r\n Route -    {state.missionsroute}.\r\n Distance: - {state.missionsroutedistance}",
      "default": true,
      "name": "Missions variable report",
      "description": "Check EDDI state variables for routing testing purposes."
    },
    "Modification crafted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Modification crafted",
      "description": "Triggered when you craft a modification to a module"
    },
    "Module arrived": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"{F('Honorific')}, \")}\r\nSeu {event.module.name} \r\n\r\n{OneOf(\"chegou {if station.name != event.station && event.station: em}\", \r\n       \"teve a transferência concluída {if station.name != event.station && event.station: para}\")}\r\n\r\n{if station.name != event.station && event.station:\r\n   {event.station}\r\n   {if system.name != event.system && event.system:\r\n      no sistema {event.system}\r\n   }\r\n}.",
      "default": true,
      "name": "Module arrived",
      "description": "Triggered when you complete a module transfer"
    },
    "Module info": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ This event updates `ship` module information: position, power, & priority _}",
      "default": true,
      "name": "Module info",
      "description": "Triggered when a ModulesInfo.json file is generated/updated"
    },
    "Module purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Você comprou um {event.buymodule.class}-{event.buymodule.grade}\r\n\r\n{event.buymodule.name} \r\n{if type(event.buymodule.mount) != \"void\":\r\n    {for index, value in event.buymodule.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixo\r\n    |elif mount = 1:\r\n        guiado\r\n    |elif mount = 2:\r\n        torreta\r\n    }\r\n}\r\npor {event.buyprice} créditos\r\n\r\n{if type(event.sellmodule) != \"void\":\r\n    , e vendeu um {event.sellmodule.class}-{event.sellmodule.grade}\r\n\r\n    {event.sellmodule.name}\r\n    {if type(event.sellmodule.mount) != \"void\":\r\n        {for index, value in event.sellmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixo\r\n        |elif mount = 1:\r\n            guiado\r\n       |elif mount = 2:\r\n            torreta\r\n        }\r\n    }   \r\n    por {event.sellprice} créditos\r\n\r\n|elif type(event.storedmodule) != \"void\":\r\n    , e armazenou um {event.storedmodule.class}-{event.storedmodule.grade}\r\n\r\n    {event.storedmodule.name}\r\n    {if type(event.storedmodule.mount) != \"void\":\r\n        {for index, value in event.storedmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixo\r\n        |elif mount = 1:\r\n            guiado\r\n       |elif mount = 2:\r\n            torreta\r\n        }\r\n    }    \r\n}\r\n\r\n",
      "default": true,
      "name": "Module purchased",
      "description": "Triggered when you purchase a module in outfitting"
    },
    "Module retrieved": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vocẽ recuperou um {event.module.class}-{event.module.grade}\r\n\r\n{event.module.name}\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixo\r\n    |elif mount = 1:\r\n        guiado\r\n    |elif mount = 2:\r\n        torreta\r\n    }\r\n}\r\n do armazenamento.\r\n\r\n{if type(event.swapoutmodule) != \"void\":\r\n    e guardou um {event.swapoutmodule.class}-{event.swapoutmodule.grade}\r\n\r\n    {event.swapoutmodule.name}\r\n    {if type(event.swapoutmodule.mount) != \"void\":\r\n        {for index, value in event.swapoutmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixo\r\n        |elif mount = 1:\r\n            guiado\r\n       |elif mount = 2:\r\n            torreta\r\n        }\r\n    }    \r\n}\r\n\r\n{if type(event.cost) != \"void\": pelo custo de {event.cost} créditos}\r\n",
      "default": true,
      "name": "Module retrieved",
      "description": "Triggered when you fetch a previously stored module"
    },
    "Module sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Você vendeu um {event.module.class}-{event.module.grade}\r\n\r\n{event.module.name}\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixo\r\n    |elif mount = 1:\r\n        guiado\r\n    |elif mount = 2:\r\n        torreta\r\n    }\r\n}\r\n por {event.price} créditos.",
      "default": true,
      "name": "Module sold",
      "description": "Triggered when selling a module to outfitting"
    },
    "Module sold from storage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Você vendeu um {event.module.class}-{event.module.grade}\r\n\r\n{event.module.name}\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixo\r\n    |elif mount = 1:\r\n        guiado\r\n    |elif mount = 2:\r\n        torreta\r\n    }\r\n}\r\n do seu armazenamento por {event.price} créditos.",
      "default": true,
      "name": "Module sold from storage",
      "description": "Triggered when selling a module from storage"
    },
    "Module sold remote": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vocẽ vendeu um {event.module.class}-{event.module.grade}\r\n\r\n{event.module.name}\r\n{if event.module.mount:\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixo\r\n    |elif mount = 1:\r\n        guiado\r\n    |elif mount = 2:\r\n        torreta\r\n    }\r\n}\r\n do seu armazenamento por {event.price} créditos.\r\n",
      "default": true,
      "name": "Module sold remote",
      "description": "Triggered when selling a module in storage at another station"
    },
    "Module stored": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Você guardou um {event.module.class}-{event.module.grade}\r\n\r\n{event.module.name}\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixo\r\n    |elif mount = 1:\r\n        guiado\r\n    |elif mount = 2:\r\n        torreta\r\n    }\r\n}\r\n\r\n{if type(event.cost) != \"void\": por um custo de {event.cost} créditos}.",
      "default": true,
      "name": "Module stored",
      "description": "Triggered when you store a module"
    },
    "Module swapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Você trocou a posição de um {event.frommodule.class}-{event.frommodule.grade}\r\n\r\n{event.frommodule.name}\r\n\r\n{if type(event.frommodule.mount) != \"void\":\r\n    {for index, value in event.frommodule.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixo\r\n    |elif mount = 1:\r\n        guiado\r\n    |elif mount = 2:\r\n        torreta\r\n    }\r\n}\r\n e\r\n\r\n{if event.tomodule:\r\n    um {event.tomodule.class}-{event.tomodule.grade}\r\n\r\n    {event.tomodule.name}\r\n    {if type(event.tomodule.mount) != \"void\":\r\n        {for index, value in event.tomodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixo\r\n        |elif mount = 1:\r\n            guiado\r\n        |elif mount = 2:\r\n            torreta\r\n        }\r\n    }.\r\n|else: \r\n    um espaço vazio.\r\n}\r\n",
      "default": true,
      "name": "Module swapped",
      "description": "Triggered when modules are swapped between slots on the ship"
    },
    "Module transfer": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vocẽ transferiu um {event.module.class}-{event.module.grade}\r\n\r\n{event.module.name} \r\n\r\n{if event.module.mount:\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixo\r\n    |elif mount = 1:\r\n        guiado\r\n    |elif mount = 2:\r\n        torreta\r\n    }\r\n}\r\n\r\n{if event.transfercost: pelo custo de {event.transfercost} créditos}.\r\n\r\n{set t_remaining to event.transfertime}\r\n\r\n{if t_remaining:\r\n\r\n   {Pause(1000)}\r\n   Chegada esperada em:\r\n\r\n   {if t_remaining > (60*60*24):\r\n      {set t_days to floor(t_remaining/(60*60*24))}\r\n      {t_days} dias,\r\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\r\n   }\r\n\r\n   {if t_remaining > 3600:\r\n      {set t_hours to floor(t_remaining/3600)}\r\n      {t_hours} horas,\r\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\r\n   }\r\n\r\n   {if t_remaining > 60:\r\n      {if t_days || t_hours: and}\r\n      {set t_minutes to round(t_remaining/(60),0)}\r\n      {t_minutes} minutos.\r\n   }\r\n}",
      "default": true,
      "name": "Module transfer",
      "description": "Triggered when you transfer a module from storage at another station"
    },
    "Modules stored": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Você armazenou os seguintes módulos:\r\n\r\n{for module in event.modules:\r\n\r\n    {module.class}-{module.grade}\r\n\r\n    {if type(module.mount) != \"void\":\r\n        {for index, value in module.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixo\r\n        |elif mount = 1:\r\n            guiado\r\n        |elif mount = 2:\r\n            torreta\r\n        }\r\n    }\r\n    {module.name}.\r\n}\r\n\r\n\r\n",
      "default": true,
      "name": "Modules stored",
      "description": "Triggered when you store multiple modules"
    },
    "Music": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n\r\n{if event.musictrack = \"GalaxyMap\":\r\n    {if state.lastmusic = \"SystemMap\":\r\n        Retornando ao\r\n    |else:\r\n        {OneOf(\"Ativando\", \"Iniciando\", \"Carregando\", \"Inicializando\")}\r\n    }\r\n    Mápa da Galácsiaa.\r\n|elif event.musictrack = \"SystemMap\":\r\n    {OneOf(\"Ativando\", \"Inicializando\", \"Carregando\", \"Iniciando\")} Mápa do Sistema.\r\n}\r\n\r\n{SetState('lastmusic', event.musictrack)}",
      "default": true,
      "name": "Music",
      "description": "Triggered when the game music 'mood' changes"
    },
    "Nav beacon scan": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context _}\r\n{SetState('eddi_context_last_subject', 'nav beacon')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', system.name)}\r\n{SetState('eddi_context_nav_scans', event.numbodies)}\r\n\r\n{set nav to \"de navegação\"}\r\n{set beacon to \"sinalizador\"}\r\n{OneOf(\"Este {beacon} {nav} transferiu detalhes de {event.numbodies} corpos deste sistema.\",\r\n \"Detalhes recebidos {Occasionally(3, 'do {beacon} {nav}')} sobre {event.numbodies} corpos neste sistema.\")}\r\n\r\n{Pause(500)}",
      "default": true,
      "name": "Nav beacon scan",
      "description": "Triggered when you scan a nav beacon, before the scan data for all the bodies in the system is written into the journal"
    },
    "Near surface": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Near surface",
      "description": "Triggered when you enter or depart orbit around a surface"
    },
    "Next jump": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Next jump",
      "description": "Triggered when selecting a star system to jump to"
    },
    "NPC attack commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Alerta: ataque \r\n{if event.by:\r\n   por {event.by} \r\n}\r\ndetectado.\r\n\r\n",
      "default": true,
      "name": "NPC attack commenced",
      "description": "Triggered when an attack on your ship by an NPC is detected"
    },
    "NPC cargo scan commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ See if we are carrying non-limpet cargo}\r\n{set carryingvaluablecargo to 0}\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity != 'Limpet':\r\n        {set carryingvaluablecargo to 1}\r\n    }\r\n}\r\n\r\n{if carryingvaluablecargo = 1:\r\n  Cuidado: escaneamento de carga\r\n  {if event.by:\r\n    por {event.by} \r\n  }\r\n  detectado.\r\n}\r\n",
      "default": true,
      "name": "NPC cargo scan commenced",
      "description": "Triggered when a cargo scan on your ship by an NPC is detected"
    },
    "NPC interdiction commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Alerta: tentativa de interdição\r\n{if event.by:\r\n   por {event.by} \r\n}\r\ndetectada.\r\n\r\n{Occasionally(3, \"Zére a aceleração para se submeter, ou siga o vetor de escape para evadir.\")}\r\n",
      "default": true,
      "name": "NPC interdiction commenced",
      "description": "Triggered when an interdiction attempt on your ship by an NPC is detected"
    },
    "Passengers": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ Passengers }\r\n{_ Triggered at session start from Passengers event }",
      "default": true,
      "name": "Passengers",
      "description": "Triggered at session start from Passengers event"
    },
    "Power commodity delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set NUM to event.amount}\r\n{if NUM = 1: {set NUM to \"uma\"}\r\n|elif NUM = 2: {set NUM to \"duas\"}\r\n}\r\n{NUM} unidades de {event.commodity} entregue{if event.amount > 1:s} {Occasionally(2, \"por {P(event.power)}\")}.\r\n",
      "default": true,
      "name": "Power commodity delivered",
      "description": "Triggered when a commander delivers a commodity to a power"
    },
    "Power commodity fast tracked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Humanise(event.amount)} créditos foram gastos acelerando a liberação de mercadorias {Occasionally(2, \"de {P(event.power)}\")}.",
      "default": true,
      "name": "Power commodity fast tracked",
      "description": "Triggered when a commander fast tracks a commodity of a power"
    },
    "Power commodity obtained": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set NUM to event.amount}\r\n{if NUM = 1: {set NUM to \"uma\"}\r\n|elif NUM = 2: {set NUM to \"duas\"}\r\n}\r\n{NUM} unidades de {event.commodity} obtida{if event.amount > 1:s} {Occasionally(2, \"de {P(event.power)}\")}.\r\n",
      "default": true,
      "name": "Power commodity obtained",
      "description": "Triggered when a commander obtains a commodity from a power"
    },
    "Power defected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Você desertou de {P(event.frompower)} para {P(event.topower)}.",
      "default": true,
      "name": "Power defected",
      "description": "Triggered when you defect from one power to another"
    },
    "Power expansion vote cast": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Voto\r\n{OneOf(\"dado\", \"registrado\")}",
      "default": true,
      "name": "Power expansion vote cast",
      "description": "Triggered when a commander votes for system expansion"
    },
    "Power joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Você se aliou com {P(event.power)}",
      "default": true,
      "name": "Power joined",
      "description": "Triggered when you join a power"
    },
    "Power left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Você não é mais aliado de {P(event.power)}",
      "default": true,
      "name": "Power left",
      "description": "Triggered when you leave a power"
    },
    "Power preparation vote cast": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Voto\r\n{OneOf(\"dado\", \"registrado\")}",
      "default": true,
      "name": "Power preparation vote cast",
      "description": "Triggered when a commander votes for system preparation"
    },
    "Power salary claimed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Salário de {Humanise(event.amount)}  créditos recebido {Occasionally(2, \"de {P(event.power)}\")}.",
      "default": true,
      "name": "Power salary claimed",
      "description": "Triggered when a commander claims salary from a power"
    },
    "Power voucher received": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Power voucher received",
      "description": "Triggered when a commander turns in combat vouchers against an opposing power"
    },
    "Powerplay": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You are pledged to {P(event.power)}. \r\nYou have served for \r\n{if event.timepledgedweeks > 1:\r\n    {Humanise(event.timepledgedweeks)} weeks \r\n|elif event.timepledgedweeks = 1:\r\n    one week \r\n|elif event.timepledgeddays > 1:\r\n    {Humanise(event.timepledgeddays)} days\r\n|elif event.timepledgeddays = 1:\r\n    one day\r\n|else:\r\n    less than one day\r\n}\r\nand are at rank {event.rank} with \r\n{if event.merits > 0:\r\n    {Humanise(event.merits)}\r\n|else:\r\n    no\r\n}\r\naccumulated merits.\r\n",
      "default": true,
      "name": "Powerplay",
      "description": "Triggered periodically when pledged to a power"
    },
    "RandomizeVoice": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "\r\n{_ Set a global variable SpeakerID in calling script, before calling this script. }\r\n\r\n{_ This script will return a Voice name }\r\n{_ For a given SpeakerID, it will always return the same voice }\r\n\r\n{_ get list of voices }\r\n{_ We exclude the voice you have chosen for the EDDI speech responder, to it won't be used for NPCs }\r\n{_ Set that name here: }\r\n{declare MY_SHIP_VOICE as \"Microsoft Zira Desktop\"}\r\n\r\n{declare VOICES as []}\r\n{for voice in VoiceDetails():\r\n  {if voice.name != MY_SHIP_VOICE:\r\n    {set VOICES to cat(VOICES,[voice])}\r\n  }\r\n}\r\n\r\n{if len(VOICES) > 1:\r\n\r\n  {declare THISVOICE as 0}\r\n\r\n  {_ Create a hash code from the SpeakerID (if any) }\r\n  {if SpeakerID:\r\n    {declare i as 0}\r\n    {while i < len(SpeakerID):\r\n      {declare ch as slice(SpeakerID,i,1)}    \r\n      {set THISVOICE to THISVOICE+ord(ch)} \r\n      {set i to i+1}\r\n    }\r\n    {set THISVOICE to mod(THISVOICE,len(VOICES))}\r\n  |else:\r\n    {_ if no SpeakerID, use a random voice }\r\n    {set THISVOICE to rand(0,len(VOICES))} \r\n  }\r\n\r\n  {echo VOICES[THISVOICE].name}\r\n}",
      "default": true,
      "name": "RandomizeVoice",
      "description": null
    },
    "Repair drone": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set systemsrepaired to []}\r\n\r\n{if event.hull:\r\n   {set systemsrepaired to cat(systemsrepaired, [OneOf(\"do casco\",\"da fuselagem\")])} \r\n}\r\n{if event.cockpit:\r\n   {set systemsrepaired to cat(systemsrepaired, [\"a cabine\"])} \r\n}\r\n{if event.corrosion:\r\n   {set systemsrepaired to cat(systemsrepaired, [OneOf(\"sistemas corroídos\", \"sistemas afetados por corrosão\")])} \r\n}\r\n\r\n{if len(systemsrepaired) > 0:\r\n\r\n    {set sequence to OneOf(\"sequência\", \"ciclo\")}\r\n    {set remote to Occasionally(2, \"remot{if sequence = 'ciclo':o|else:a}\")}    \r\n    {OneOf(\r\n        \"O drone concluiu o reparo {remote} \", \r\n        \"{sequence} {remote} concluíd{if sequence = 'ciclo':o|else:a}, reparos \"\r\n    )}\r\n\r\n    {set cur to 0}\r\n    {set length to len(systemsrepaired) - 1}\r\n    {while cur < len(systemsrepaired):\r\n        {systemsrepaired[cur]}\r\n        {set cur to cur + 1}\r\n        {if cur = length: e\r\n        |elif cur < length:,\r\n        }\r\n    }\r\n    feitos\r\n}.\r\n",
      "default": true,
      "name": "Repair drone",
      "description": "Triggered when your ship is repaired via a repair limpet controller"
    },
    "Repeat last speech": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{state.eddi_context_last_speech}",
      "default": true,
      "name": "Repeat last speech",
      "description": "Repeat the last thing said"
    },
    "Report last scan value": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences }\r\n{set minScanValue to 5000} {_ Set the minimum credit value that should be voiced _}\r\n\r\n{_ Context }\r\n{set scanValue to state.eddi_context_last_scan_estimated_value}\r\n\r\n{if scanValue > minScanValue:\r\n   {OneOf(\"Este\", \"Esta informação\", \"Este scan\")} \r\n   {OneOf(\"pode\", \"deve\", \"poderá\", \"deverá\") } \r\n   {OneOf(\"conseguir\", \"valer\", \"lhe trazer\", \"ser vendido por\")}\r\n   {Humanise(scanValue)} créditos.\r\n}\r\n",
      "default": true,
      "name": "Report last scan value",
      "description": "Report the estimated value of the last body scanned"
    },
    "Ring hotspots detected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if ship.Role.invariantName = \"Miner\" || ship.Role.invariantName = \"Multipurpose\":\r\n    {set hotspots to []}\r\n    {for hotspot in event.hotspots: \r\n        {set hotspot_desc to: \r\n            {hotspot.amount} of {hotspot.commodity}\r\n        }\r\n        {set hotspots to cat(hotspots, [hotspot_desc])}\r\n    }\r\n\r\n    Hotspots detected.\r\n    {List(hotspots)}\r\n}",
      "default": true,
      "name": "Ring hotspots detected",
      "description": "Triggered when hotspots are detected in a ring"
    },
    "Ring mapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_last_subject', 'ring')}\r\n{SetState('eddi_context_body_system', system.name)}\r\n{SetState('eddi_context_ring_name', event.ringname)}\r\n\r\n{_ Process the event _}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n\r\n    {Pause(3000)}\r\n\r\n    {OneOf(\"mapping\", \"probing\", \"scanning\")}\r\n    of {event.reserves} {event.composition} ring\r\n    {OneOf(\"is\", \"is now\")}\r\n    {OneOf(\"complete\", \"finished\")}.\r\n}",
      "default": true,
      "name": "Ring mapped",
      "description": "Triggered after mapping a ring with the Surface Area Analysis scanner"
    },
    "Route details": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Route details }\r\n{_ Triggered when a route has been generated or updated }\r\n\r\n\r\n{if event.routetype = \"expiring\":\r\n     {if event.distance > 0:\r\n         {set mission to MissionDetails(event.missionids[0])}\r\n\r\n         {if find(mission.typeEDName, \"Passenger\") > -1:\r\n             {set type to \"Transport \"}\r\n             {set type to cat(type, mission.passengertype)}\r\n         |else:\r\n             {set type to mission.type}\r\n         }\r\n         {set type to cat(type, \" mission\")}\r\n\r\n         {type} {if mission.faction: for {mission.faction}}\r\n         {if mission.destinationsystem: in the\r\n             {if mission.destinationsystem = system.name:\r\n                 current\r\n             |else:\r\n                 {mission.destinationsystem}\r\n             } system\r\n         } is expiring next.\r\n     |else:\r\n         No active missions found.\r\n     }\r\n|elif event.routetype = \"facilitator\":\r\n    {if event.distance > 0:\r\n        The nearest interstellar factors contact is at\r\n        {destinationstation.name} station, in the\r\n        {if event.system = system.name:\r\n            current system\r\n        |else:\r\n            {event.system} system, {round(event.distance, 1)} lightyears away\r\n        }.\r\n     |else:\r\n         Interstellar factors contact not found within sensor range.\r\n     }\r\n|elif event.routetype = \"farthest\":\r\n     {if event.distance > 0:\r\n         Your {if missionsCount = 1: only |else: farthest}\r\n         mission target is in the\r\n         {if event.system = system.name:\r\n             current system\r\n         |else:\r\n             {event.system} system, {round(event.distance, 1)} lightyears away\r\n         }.\r\n     |else:\r\n         Mission not found with a designated target system.\r\n     }\r\n|elif event.routetype = \"most\":\r\n     {if missionsCount = 1:\r\n         Your only mission target is {Occasionally(2,\"located\")} in\r\n         {if missions[0].destinationsystem = \"\":\r\n             an unknown\r\n         |elif missions[0].destinationsystem = system.name:\r\n             the current\r\n         |else:\r\n             the {missions[0].destinationsystem}\r\n         }\r\n         {Occasionally(2,\"star\")} system.\r\n     |else:\r\n         {set systems to split(event.systems, \"_\")}\r\n         {set system_most to event.system}\r\n         {set systems_count to len(systems)}\r\n\r\n         {if systems_count = 1:\r\n             {if system_most = system.name:\r\n                 {set system_most to \"The current system\"}\r\n             |else:\r\n                 {set system_most to cat(\"The \", system_most, \" system\")}\r\n             }\r\n             {OneOf(\"Most of your missions are {Occasionally(2,'located')} in {system_most}\",\r\n                 \"{system_most} has {OneOf('the most','most of your')} missions\",\r\n                 \"{system_most} has the most missions for you to complete\")}.\r\n         |elif systems_count > 1:\r\n             You have {event.count} mission target{if event.count > 1:s} each, in the\r\n\r\n             {set cur to 0}\r\n             {while cur < len(equal):\r\n                 {systems[cur]}\r\n                 {set cur to cur + 1}\r\n                 {if cur = systems_count-1: and |elif cur < systems_count: ,}\r\n             } systems.\r\n         }\r\n     }\r\n|elif event.routetype = \"nearest\":\r\n     {if event.distance > 0:\r\n         Your {if missionsCount = 1: only |else: nearest}\r\n         mission target is in the\r\n         {if event.system = system.name:\r\n             current system\r\n         |else:\r\n             {event.system} system, {round(event.distance, 1)} lightyears away\r\n         }.\r\n     |else:\r\n         Mission not found with a designated target system.\r\n     }\r\n|elif event.routetype = \"route\":\r\n     {if event.routedistance > 0:\r\n         Missions route calculated for {event.count} systems.\r\n         Total route distance is {round(event.routedistance, 1)} lightyears.\r\n         First mission destination is {event.system}, {round(event.distance, 1)} lightyears away.\r\n     |else:\r\n         Unable to calculate missions route.\r\n     }\r\n|elif event.routetype = \"source\":\r\n     {if event.count > 0:\r\n         {set systems to split(event.route, \"_\")}\r\n\r\n         {set pos to 0}\r\n         {while pos < event.count:\r\n\r\n             {set source_cargo to []}\r\n             {for missionid in event.missionids:\r\n                 {set haulage to HaulageDetails(missionid)}\r\n                 {if haulage.sourcesystem = systems[pos]:\r\n                     {set cargo to CargoDetails(missionid)}\r\n                     {if find(source_cargo, cargo.name) = -1:\r\n                         {set source_cargo to cat(source_cargo, [cargo.name])}\r\n                     }\r\n                 }\r\n             }\r\n\r\n             {if pos = 0:\r\n                 Your {if event.count = 1: only |else: nearest}\r\n             |elif pos = 1:\r\n                 Additionally, your\r\n             |elif pos = event.count - 1:\r\n                 Lastly, your\r\n             |else:\r\n                 Your\r\n             }\r\n\r\n             mission cargo source for\r\n             {set cur to 0}\r\n             {while cur < len(source_cargo):\r\n                 {source_cargo[cur]}\r\n                 {set cur to cur + 1}\r\n                 {if cur = len(source_cargo) - 1: and |elif cur < len(source_cargo): ,}\r\n             }\r\n\r\n             is in the\r\n             {if systems[pos] = system.name:\r\n                 current system\r\n             |else:\r\n                 {systems[pos]} system,\r\n                 {set distance to Distance(system.name, systems[pos])}\r\n                 {round(distance, 1)} light years away\r\n             }.\r\n             {set pos to pos + 1}\r\n         }\r\n         {SetState('eddi_context_cargo_source', event.route)}\r\n     |else:\r\n         Cargo source not found with a designated target system.\r\n     }\r\n|elif event.routetype = \"update\":\r\n     {if event.system && event.system != \"\":\r\n         Next mission destination is {event.system}, {round(event.distance, 1)} lightyears away.\r\n     }\r\n}\r\n\r\n",
      "default": true,
      "name": "Route details",
      "description": "Triggered when a route has been generated or updated"
    },
    "Screenshot": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Screenshot",
      "description": "Triggered when you take a screenshot"
    },
    "Search and rescue": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} \r\n\r\n{if event.commodity.rare: rare}\r\n\r\n{if event.commodity.name = \"Caixa Preta\":\r\n   {if event.amount > 1:\r\n      {OneOf(\"registros de vôo\", \"caixas pretas\")}\r\n   |else: \r\n      {OneOf(\"registro de vôo\", \"caixa preta\")}\r\n   }\r\n\r\n|elif event.commodity.name = \"Cápsula de Escape Danificada\":\r\n   {OneOf(\"criocápsula{if event.amount > 1:s} danificada\", \"cápsula{if event.amount > 1:s} de escape danificada\")}{if event.amount > 1:s}\r\n\r\n|elif event.commodity.name = \"Cápsula de Escape Ocupada\":\r\n   {OneOf(\"cápsula{if event.amount > 1:s} de escape ocupada\", \"criocápsula{if event.amount > 1:s} ocupada\")}{if event.amount > 1:s}\r\n\r\n|elif event.commodity.name = \"Ítens Pessoais\":\r\n   {OneOf(\"conjunto\", \"coleção\")}{if event.amount > 1:s} de\r\n   {OneOf(\"ítens pessoais\", \"objetos pessoais\")}\r\n\r\n|elif event.commodity.name = \"Destroço Recuperável\":\r\n   {set wreckage to OneOf(\"destroços\", \"restos\")}\r\n   {set fragment to OneOf(\"fragmento\", \"pedaço\", \"parte\")}\r\n   {fragment}{if event.amount > 1:s} de {wreckage}\r\n\r\n|elif event.commodity.name = \"Refém\":\r\n   refé{if event.amount > 1:ns|else:m}\r\n\r\n|else:\r\n   {event.commodity.name}{if event.amount > 1:s}\r\n}\r\n\r\n{OneOf(\"recuperado\", \"retornado\", \"entregue\")}{if event.amount > 1:s},\r\n{Occasionally(2, \"trocado\")}\r\npor {Humanise(event.reward)} créditos.\r\n",
      "default": true,
      "name": "Search and rescue",
      "description": "Triggered when delivering items to a Search and Rescue contact"
    },
    "Security presence report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if system.population > 0:\r\n    {if system.security = \"None\":\r\n        {OneOf(\"Nenhuma {OneOf('segurança','aplicação da lei')}\",\"Nenhum policiamento\")}\r\n    |elif system.security = \"Baixa\":\r\n        {OneOf(\"Baixa {OneOf('segurança','aplicação da lei')}\",\"Baixo policiamento\")}\r\n    |elif system.security = \"Média\":\r\n        {OneOf(\"Média {OneOf('segurança','aplicação da lei')}\",\"Médio policiamento\")}\r\n    |elif system.security = \"Alta\":\r\n        {OneOf(\"{OneOf('Alta','Forte')} {OneOf('segurança','aplicação da lei')}\",\"{OneOf('Alto','Forte')} policiamento\")}\r\n    |else:\r\n        Segurança {system.security}\r\n    }\r\n    presente {OneOf(\"aqui\", \"neste sistema\", \"na localidade\")}.\r\n}",
      "default": true,
      "name": "Security presence report",
      "description": "Function to report on the details of system security"
    },
    "Self destruct": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Sequẽncia de Auto-Destruição iniciada. Fechando saídas de calor.\r\n\r\n{SetState('eddi_context_selfdestruct', \"yes\")}",
      "default": true,
      "name": "Self destruct",
      "description": "Triggered when you start the self destruct sequence"
    },
    "Session Scan Value": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Session Scan Value}\r\n{_ Total estimated value of exploration scans for this gaming session}\r\n\r\n{set value to state.eddi_context_session_scan_value}\r\n\r\n{if (value = 0 || value = null) && logout != \"true\":\r\n    {OneOf(\"Scan de valor não foi\",\"Nenhum scan valioso foi\")}\r\n    {OneOf(\"executado\", \"feito\")}\r\n    {OneOf(\"n\", \"durante \")}esta sessão.\r\n\r\n|elif value && value > 0:\r\n    {if logout = true: \r\n        Nesta sessão\r\n    |else:\r\n        Valor atual\r\n    }\r\n    de scans o valor de\r\n    {OneOf(\"corpos e estrelas\", \"exploração\")}    \r\n    foi de {state.eddi_context_session_scan_value} créditos.\r\n}\r\n",
      "default": true,
      "name": "Session Scan Value",
      "description": "Total estimated value of exploration scans for this gaming session"
    },
    "Settlement approached": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Settlement approached }\r\n{_ Triggered when you approach a settlement }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'settlement')}\r\n{SetState('eddi_context_last_action', 'approach')}\r\n{SetState('eddi_context_approach_time', SecondsSince(0))}\r\n\r\n{set settlement to event.name}\r\n\r\n{_ Remove + signs from settlement name _}\r\n{while slice(settlement, len(settlement)-1) = \"+\" || slice(settlement, len(settlement)-1) = \" \":\r\n    {set settlement to slice(settlement, 0, len(settlement)-1)}\r\n}\r\n\r\n{SetState('eddi_context_last_settlement', settlement)}\r\n\r\n{_ Added by Kenjiro _}\r\n{SetState('settlement_approached', event.name)}",
      "default": true,
      "name": "Settlement approached",
      "description": "Triggered when you approach a settlement"
    },
    "Shields down": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\r\n\r\nOs escudos {OneOf(\"caíram\",\"foram derrubados\")},\r\n\r\n{set ALVO to OneOf(\"a nave\",\"o casco\",\"a fuselagem\")}\r\n{ALVO} está\r\n{Occasionally(2,\"agora\")}\r\n{OneOf(\"vulnerável\",\"expost{if ALVO = 'o casco':o|else:a}\")}\r\na danos {Occasionally(2,\"permanentes\")}.\r\n",
      "default": true,
      "name": "Shields down",
      "description": "Triggered when your ship's shields go offline"
    },
    "Shields up": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\r\n\r\n{OneOf(\"Escudos {OneOf('restabelecidos','regenerados')}\",\"Defesas {OneOf('restabelecidas','regeneradas')}\")}\r\n\r\n{Occasionally(2,\"a 50%\")}.\r\n",
      "default": true,
      "name": "Shields up",
      "description": "Triggered when your ship's shields come online"
    },
    "Ship arrived": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"{F('Honorific')}, \")}                                                                                                                              \r\nSua nave {event.ship} \r\n\r\n{OneOf(\"chegou {if station.name != event.station && event.station: em}\", \r\n       \"completou sua transferência {if station.name != event.station && event.station: para}\")}\r\n\r\n{if station.name != event.station && event.station:\r\n   {event.station}\r\n   {if system.name != event.system && event.system:\r\n      no sistema {event.system}\r\n   }\r\n}.",
      "default": true,
      "name": "Ship arrived",
      "description": "Triggered when you complete a ship transfer"
    },
    "Ship delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState('eddi_context_currentshipid', event.shipid)}\r\n\r\nTransferência de comando da {ShipCallsign()} finalizada. \r\n",
      "default": true,
      "name": "Ship delivered",
      "description": "Triggered when your newly-purchased ship is delivered to you"
    },
    "Ship fsd": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship fsd",
      "description": "Triggered when there is a change to the status of your ship's fsd"
    },
    "Ship interdicted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(1000)}\r\n\r\n{if event.submitted:\r\n   Você se submeteu à interdição\r\n|elif event.succeeded:\r\n   A evasão falhou, sistemas foram danificados.\r\n   Você sofreu a interdição.\r\n}\r\n\r\n{set shiptype to event.interdictor}\r\n{F(\"TargetType\")}\r\n\r\n{if !event.succeeded:\r\n   {OneOf(\"Sucesso ao evadir a\",\"Sucesso ao evitar a \")} interdição\r\n|else:\r\n   {SetState('eddi_context_interdicted', 'yes')}\r\n   pela {shiptype}\r\n\r\n   {if event.iscommander:\r\n      Este é um piloto humano, de nível {event.rating}!\r\n   |else:\r\n      , {OneOf(\"um piloto\", \"uma nave\")} de nível {event.rating} \r\n   }\r\n\r\n   {if event.faction = null:\r\n      que {OneOf(\"não tem aliança\",\"não é aliado a ninguém\")}\r\n   |else:\r\n      {Occasionally(2,\"que é\")} aliado de {P(event.faction)},\r\n   }\r\n\r\n   {if event.power = \"Indpendent\":\r\n      {Occasionally(2,\"é um membro da Aliança\")}\r\n   |elif event.power = \"Pirate\":\r\n      e é um criminoso dos clãs piratas\r\n   |elif event.power = \"Empire\":\r\n      {Occasionally(2,\"e é um servidor do Império\")}\r\n   |elif event.power = \"Federation\":\r\n      {Occasionally(2,\"e é um recruta da Federação\")}\r\n   }\r\n}\r\n.\r\n",
      "default": true,
      "name": "Ship interdicted",
      "description": "Triggered when your ship is interdicted by another ship"
    },
    "Ship interdiction": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(1000)}\r\n\r\n{if !event.succeeded:\r\n   A interdição {OneOf(\"foi evitada\",\"falhou\")}.\r\n|else:\r\n   Interdição {OneOf(\"foi um sucesso\",\"finalizada\")}. Sistemas foram danificados.\r\n   O alvo é {event.interdictee}\r\n\r\n   {if event.iscommander:\r\n      . Este é o um piloto humano, de nível {event.rating}!\r\n   |else:\r\n      , {OneOf(\"um piloto\", \"uma nave\")}\r\n   }\r\n\r\n   {if event.faction = null:\r\n      que não tem alianças\r\n   |else:\r\n      {Occasionally(2,\"que é\")} aliado a {P(event.faction)}\r\n   }\r\n\r\n   {if event.power = \"Indpendent\":\r\n      {Occasionally(2,\"e é um membro da Aliança\")}\r\n   |elif event.power = \"Pirate\":\r\n      e é um criminoso dos clãs piratas\r\n   |elif event.power = \"Empire\":\r\n      {Occasionally(2,\"e é um servidor do Império\")}\r\n   |elif event.power = \"Federation\":\r\n      {Occasionally(2,\"e é um recruta da Federação\")}\r\n   }\r\n}\r\n.\r\n",
      "default": true,
      "name": "Ship interdiction",
      "description": "Triggered when you interdict another ship"
    },
    "Ship loadout": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship loadout",
      "description": "Triggered when you obtain the loadout of your ship"
    },
    "Ship purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{P(event.ship)} comprada.\r\n",
      "default": true,
      "name": "Ship purchased",
      "description": "Triggered when you purchase a ship"
    },
    "Ship rebooted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{Pause(5000)}\r\n\r\n{if len(event.modules) > 0:\r\n    Reparos finalizados {F(\"Honorific\")}.\r\n    Os seguintes módulos foram consertados:\r\n\r\n    {set cur to 0}\r\n    {set length to len(event.modules) - 1}\r\n    {for mods in event.modules:\r\n        {if slice(mods,0,4) = \"Slot\":\r\n            {set mod to ord(slice(mods,4,1))-48}\r\n            {set mod1 to ord(slice(mods,5,1))-49}\r\n            {set mod to mod * 10 + mod1}\r\n            {ship.compartments[mod].module.name}\r\n        |else:\r\n            {mods}\r\n        }\r\n        {set cur to cur + 1}\r\n        {if cur = length: e\r\n        |elif cur < length:,\r\n        }\r\n    }\r\n|else:\r\n    {OneOf(\"Nenhum sistema pôde ser reparado\",\"Incapaz de consertar quaisquer sistemas\")} com o reparo de reinicialização.\r\n}\r\n.\r\n",
      "default": true,
      "name": "Ship rebooted",
      "description": "Triggered when you run reboot/repair on your ship"
    },
    "Ship refuelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context}\n{SetState('eddi_context_last_subject', 'refuelling')}\n{SetState('eddi_context_last_action', 'complete')}\n{SetState('eddi_context_fuel_remaining', event.total)}\n\n\n{set fuelscooped to state.eddi_fuel_scooped}\n{set fueltotal to ship.fueltanktotalcapacity}\n\n{if event.source = \"Market\":\n   {OneOf(\"tanques de combustível lotados\",\"tanques completados\")} {Occasionally(2,\"{OneOf(' da {ShipName()}','da Nave')}\")}\n   {if event.total != ship.fueltanktotalcapacity: com {Humanise(event.amount)} toneladas\n   |else: {Occasionally(3,\"com {Humanise(event.amount)} toneladas\")} }.\n|else:\n   {SetState('eddi_fuel_scooped',(state.eddi_fuel_scooped + event.amount))}\n\n   {if event.amount <= 5.0000:\n      {set total to (100/fueltotal)*event.total}\n\n      {set percent to round((100/fueltotal)*state.eddi_fuel_scooped, 0)}\n      {set tonnes to round(state.eddi_fuel_scooped, 0)}\n\n      {SetState('eddi_fuel_scooped', 0)}\n      {Pause(3000)}\n\n      {if tonnes = 1:\n         {set tons to \"tonelada\"}\n      |else:\n         {set tons to \"toneladas\"}\n      }\n\n      {OneOf(\"{percent}% reabastecidos\",\n             \"Reabastecido com {OneOf('{percent}%','{tonnes} {tons}')}\",\n             \"{OneOf('{percent}%','{tonnes} {tons}')} injetados a bordo\")},\n\n      {if total = 100:\n         Tanque\n         {Occasionally(2,\"{OneOf('Principal','Primário')}\")}\n         {Occasionally(2,\"de combustível \")}\n         {OneOf(\"no máximo\",\"a 100%\")}\n         {Occasionally(2,\"da capacidade\")}\n      |else:\n         {F(\"Fuel check\")}\n      }\n   }\n}\n\n",
      "default": true,
      "name": "Ship refuelled",
      "description": "Triggered when you refuel your ship"
    },
    "Ship renamed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName()} registrada agora com {P(system.faction)}. \r\n\r\n{set ICAO_ID to ICAO(event.ident)}\r\n{if len(ICAO_ID) > 0:\r\n    Identificação é {ICAO_ID}.\r\n|else:\r\n    Aviso: você escolheu uma identificação de anve que não é pronunciável no alfabeto padrão de radio.\r\n}\r\n",
      "default": true,
      "name": "Ship renamed",
      "description": "Triggered when you rename a ship"
    },
    "Ship repaired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{if event.item = \"Wear\" || event.item = \"Ship Integrity\":\r\n   {OneOf(\"General\",\"Normal\")} {Occasionally(2,\"ship\")} {OneOf(\"maintenance {OneOf('Completed','Performed')}\",\"wear Repaired\")}\r\n|elif event.item = \"Hull\":\r\n   {Occasionally(2,\"{OneOf('Blindagem do ','Revestimento do')}\")} Casco: {OneOf(\"reparado\",\"consertado\")}\r\n|elif event.item = \"Paint\":\r\n   {OneOf(\"Pintura {OneOf('reaplicada','renovada')}\",\"Trabalho de pintura {OneOf('reaplicado','renovado')}\")} \r\n|elif event.item = \"$modularcargobaydoor_name\":\r\n   {OneOf(\"Sistema\",\"Componente\",\"Módulo\")} da\r\n   {OneOf(\"Escotilha\",\"Porta\")} {Occasionally(\"do compartimento\")} de Carga: {OneOf(\"reparado\",\"consertado\")}\r\n|elif event.item = null || event.item = \"All\":\r\n   {OneOf(\"danos reparados na\",\"reparos finalizados na\")} {Occasionally(2,ShipName())}\r\n|else:\r\n   {if find(event.item, \"Cockpit\") > -1:\r\n      {OneOf(\"Cabine\",\"Canópla\")}: {OneOf(\"reparada\",\"consertada\")}\r\n   |else:\r\n      {event.item}\r\n      {OneOf(\"Sistema\",\"Componente\",\"Módulo\")}: {OneOf(\"reparado\",\"consertado\")}\r\n   }\r\n}.\r\n",
      "default": true,
      "name": "Ship repaired",
      "description": "Triggered when you repair your ship"
    },
    "Ship repurchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship repurchased",
      "description": "Triggered when you repurchase your ship"
    },
    "Ship restocked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2,ShipName())} {OneOf(\"munição reestocada\",\"rearmada\",\"remuniciada\")}.",
      "default": true,
      "name": "Ship restocked",
      "description": "Triggered when you restock your ship's ammunition"
    },
    "Ship shutdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship shutdown",
      "description": "Triggered when your ship's system are shutdown"
    },
    "Ship sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set solds to ShipName(event.shipid, event.ship)}\r\n\r\n{OneOf(\"{solds} aposentada do serviço ativo\",\"{solds} descomissionada\",\"{solds} vendida\")}\r\n\r\n{if event.system != system.name:\r\n   em {event.system}\r\n}.\r\n\r\n{_ Remove Fines & Bounties from sold ship _}\r\n{set tempshipid to state.eddi_context_currentshipid}\r\n{SetState('eddi_context_currentshipid', event.shipid)}\r\n{F(\"FinesBounties_ClearShip\")}\r\n{SetState('eddi_context_currentshipid', tempshipid)}\r\n",
      "default": true,
      "name": "Ship sold",
      "description": "Triggered when you sell a ship"
    },
    "Ship sold on rebuy": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.ship}, identificação {event.shipid}, vendida em {event.system} por {Humanise(event.price)} créditos.\r\n\r\n{_ Remove Fines & Bounties from sold ship _}\r\n{set tempshipid to state.eddi_context_currentshipid}\r\n{SetState('eddi_context_currentshipid', event.shipid)}\r\n{F(\"FinesBounties_ClearShip\")}\r\n{SetState('eddi_context_currentshipid', tempshipid)}",
      "default": true,
      "name": "Ship sold on rebuy",
      "description": "Triggered when you sell a ship to raise funds on the insurance / rebuy screen"
    },
    "Ship swapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.storedship:\r\n    {OneOf(\"Guardando\", \"Estocando\", \"Estacionando\")} {ShipName(event.storedshipid, event.storedship)} e\r\n|elif event.soldship:\r\n    {F(\"FinesBounties_ClearShip\")}\r\n    Vendendo {ShipName(event.soldshipid, event.soldship)} e\r\n}\r\n\r\n{OneOf(\"trocando\",\"mudando\",\"transferindo\")} para {ShipName(event.shipid, event.ship)}.\r\n{SetState('eddi_context_currentshipid', event.shipid)}\r\n\r\n{F(\"Limpet check\")}\r\n{F(\"List launchbays\")}\r\n\r\n{set fighterhangar to false}\r\n{for compartment in ship.compartments:\r\n    {if find(compartment.module.name, \"Fighter Hangar\") != -1:\r\n        {set fighterhangar to true}\r\n    }\r\n}\r\n{if fighterhangar = true:\r\n    Lembrete: você precisa designar um membro da tripulação para entrar em serviço.\r\n}\r\n\r\n{F(\"FinesBounties_CheckShip\")}",
      "default": true,
      "name": "Ship swapped",
      "description": "Triggered when you swap a ship"
    },
    "Ship targeted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Ship targeted }\n{_ Triggered when the player selects a target }\n\n{_ event Parameters:   targetlocked - bool (ie false when losing target) }\n{_ If target locked:   name (of ship), scanstage (ie 0, 1, 2, 3) }\n{_ If scan stage >= 1: name (of pilot), rank (of pilot) }\n{_ If scan stage >= 2: shieldhealth, hullhealth (both 0-100) }\n{_ If scan stage >= 3: faction, legalstatus (ie clean, wanted, etc), bounty (if appicable), }\n{_                     subsystem (ie FSD, power plant, etc), subsystemhealth (0-100) }\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'ship')}\n{SetState('eddi_context_last_action', 'targeted')}\n\n{if event.targetlocked:\n    {if event.scanstage = 0:\n        {SetState('legal_status_reported', false)}\n    |elif event.scanstage = 1:\n        {OneOf(\"Escaneando\", \"Analisando\")} {Occasionally(2, OneOf(\"nave\", \"alvo\"))}\n    |elif event.scanstage = 3 && state.legal_status_reported = false && !event.subsystem:\n        {set legalstatus to event.legalstatus}\n        {if legalstatus = \"Procurado\" || legalstatus = \"Inimigo Procurado\" || legalstatus = \"Mandado\":\n            {event.name}\n            {OneOf(\"tem uma recompensa\", \"é jogo limpo\", \"é um alvo legítimo\",\"recebeu uma recompensa\")}.\n        |else:\n            {Occasionally(2,\"Seu\")} alvo está\n            {if find(event.name, \"Autoridade\") = -1 && find(event.name, \"Segurança\") = -1 && find(event.name, \"Defesa\") = -1:            \n                limpo.\n            |else:\n                um {event.name}                \n                {if find(event.name, \"Vessel\") = -1: vessel}\n                .\n            }\n        }\n        {SetState('legal_status_reported', true)}\n    }\n}\n\n",
      "default": true,
      "name": "Ship targeted",
      "description": "Triggered when the player selects a target"
    },
    "Ship transfer initiated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName(event.shipid, event.ship)} {OneOf(\"está a caminho\",\"está sendo transferida\", \"transferência iniicada\", \"está sendo transportada\")} de {P(event.system)}\r\n\r\n{if event.transfercost: por um custo de {event.price} créditos}.\r\n\r\n{set t_remaining to event.time}\r\n\r\n{if t_remaining:\r\n\r\n   Chegada esperada em:\r\n\r\n   {if t_remaining > (60*60*24):\r\n      {set t_days to floor(t_remaining/(60*60*24))}\r\n      {t_days} dias,\r\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\r\n   }\r\n\r\n   {if t_remaining > 3600:\r\n      {set t_hours to floor(t_remaining/3600)}\r\n      {t_hours} horas,\r\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\r\n   }\r\n\r\n   {if t_remaining > 60:\r\n      {if t_days || t_hours: and}\r\n      {set t_minutes to round(t_remaining/(60),0)}\r\n      {t_minutes} minutos.\r\n   }\r\n}",
      "default": true,
      "name": "Ship transfer initiated",
      "description": "Triggered when you initiate a ship transfer"
    },
    "Shutdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{set logout to \"true\"}\r\n{F(\"Session Scan Value\")}",
      "default": true,
      "name": "Shutdown",
      "description": "Triggered on a clean shutdown of the game"
    },
    "Signal detected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Edit the true/false values of `spokenSources` to identify signal types that should be announced whenever they are first detected within a system (otherwise, only signal sources detected while in fss or saa mode will be taken into account. _}\r\n\r\n{set spokenSources to [\r\n    \"Anomaly\": true,\r\n    \"AX Conflict Zone\": true,\r\n    \"Capitol Ship\": false,\r\n    \"Ceremonial Comms\": false,\r\n    \"Combat Aftermath\": false,\r\n    \"Compromised Nav Beacon\": false,\r\n    \"Convoy Dispersal Pattern Detected\": false,\r\n    \"Degraded Emissions\": false,\r\n    \"Distress Call\": true,\r\n    \"Encoded Emissions\": false,\r\n    \"Hazardous Resource Extraction Site\": false,\r\n    \"High Grade Emissions\": false,\r\n    \"High Intensity Combat Zone\": false,\r\n    \"High Intensity Resource Extraction Site\": false,\r\n    \"Listening Post\": true,\r\n    \"Low Intensity Combat Zone\": false,\r\n    \"Low Intensity Resource Extraction Site\": false,\r\n    \"Medium Intensity Combat Zone\": false,\r\n    \"Mission Target\": true,\r\n    \"Nav Beacon\": false,\r\n    \"Non-Human Signal Source\": false,\r\n    \"Notable Stellar Phenomena\": true,\r\n    \"Resource Extraction Site\": false,\r\n    \"Trading Beacon\": false,\r\n    \"Unidentified Signal Source\": false,\r\n    \"Unregistered Comms Beacon\": true,\r\n    \"Weapons Fire\": false,\r\n]}\r\n\r\n{if status.guifocus = \"fss mode\" || status.gui_focus = \"saa mode\" || \r\n(spokenSources[event.source] = true && find(system.signalsources, event.source) = -1):\r\n    {if event.source && !event.stationsignal:\r\n        {if event.threatlevel > 0:\r\n            Class {event.threatlevel} \r\n        }\r\n        {event.source} \r\n        {if event.faction != \"None\":\r\n            for {event.faction}\r\n        }\r\n        detected.\r\n    }\r\n}",
      "default": true,
      "name": "Signal detected",
      "description": "Triggered when a signal source is detected"
    },
    "Silent running": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Silent running",
      "description": "Triggered when you activate or deactivate silent running"
    },
    "Squadron rank": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Squadron rank }\r\n{_ Triggered when your rank with a squadron has changed }\r\n\r\n\r\nVocê foi\r\n{if event.newrank > event.oldrank:\r\n    promovido \r\n|else:\r\n    rebaixado\r\n}\r\na {cmdr.squadronrank.name} na esquadra {event.name}.\r\n",
      "default": true,
      "name": "Squadron rank",
      "description": "Triggered when your rank with a squadron has changed"
    },
    "Squadron status": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Squadron status }\r\n{_ Triggered when your status with a squadron changes }\r\n\r\n\r\n{if event.status = \"applied\":\r\n    Você se inscreveu para admissão na esquadra {event.name}.\r\n|elif event.status = \"created\":\r\n    Você criou a esquadra {event.name}.\r\n|elif event.status = \"disbanded\":\r\n    A esquadra {event.name} foi dissolvida.\r\n|elif event.status = \"invited\":\r\n    Você recebeu convite para se juntar à esquadra {event.name}.\r\n|elif event.status = \"joined\":\r\n    Você entrou na esquadra {event.name}.\r\n|elif event.status = \"kicked\":\r\n    Você foi sofreu expulsão da esquadra {event.name}.\r\n|elif event.status = \"left\":\r\n    Você deixou a esquadra {event.name}.\r\n}\r\n",
      "default": true,
      "name": "Squadron status",
      "description": "Triggered when your status with a squadron has changed"
    },
    "SRV docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Búgui\", \"V-R-S\")} {OneOf(\"atracado\",\"em segurança {Occasionally(2,'a bordo')}\")}.\r\n",
      "default": true,
      "name": "SRV docked",
      "description": "Triggered when you dock an SRV with your ship"
    },
    "SRV launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Búgui\", \"V-R-S\")} {OneOf(\"liberado\",\"lançado\",\"ativado\")}.\r\n",
      "default": true,
      "name": "SRV launched",
      "description": "Triggered when you launch an SRV from your ship"
    },
    "SRV turret": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "SRV turret",
      "description": "Triggered when you deploy or retract your SRV's turret"
    },
    "SRV turret deployable": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if !event.deployable:\r\n   {OneOf(\"Búgui\", \"V-R-S\")} em espera para recuperação.\r\n}",
      "default": true,
      "name": "SRV turret deployable",
      "description": "Triggered when your SRV enters or leaves the restriction zone around a ship."
    },
    "SRV under ship": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Búgui\", \"V-R-S\")} aguardando recuperação.",
      "default": true,
      "name": "SRV under ship",
      "description": "Triggered when your SRV enters the recovery zone under your ship"
    },
    "Star habitable zone": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{if event: {set reportbody to event} }\r\n{if !event: {set reportbody to BodyDetails(state.eddi_context_star_star, state.eddi_context_star_system)}}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    Não estou certo sobre qual estrêla você está se referindo.\r\n|else:\r\n    {if reportbody.estimatedhabzoneinner && reportbody.estimatedhabzoneouter:\r\n        Zona habitável {Occasionally(2, OneOf(\"calculada a\", \"calculada a partir de\"))}\r\n\r\n        {if reportbody.estimatedhabzoneinner > 0 && reportbody.estimatedhabzoneouter > 0:\r\n            {Humanise(reportbody.estimatedhabzoneinner)} \r\n            {Humanise(reportbody.estimatedhabzoneouter)} \r\n            segundos luz.\r\n        |elif reportbody.estimatedhabzoneouter && reportbody.estimatedhabzoneouter > 0:\r\n            {Humanise(reportbody.estimatedhabzoneouter)} \r\n            segundos luz no máximo.\r\n        }\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Star habitable zone",
      "description": "Report on the habitable zone around a star"
    },
    "Star report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{set reportAge to 0}              {_ Set to 1 to report the star's age. _}\r\n{set reportChromaticity to 0}     {_ Set to 1 to report the star's colour. _}\r\n{set reportNotables to 1}         {_ Set to 1 to report noteworthy main sequence star features. _}\r\n{set reportScanValue to 0}        {_ Set to 1 to report the scan value. _}\r\n{set reportHabZone to 0}          {_ Set to 1 to report habitable zone details for the primary star. _}\r\n{set reportLuminosity to 1}       {_ Set to 1 to report the star's luminosity class. _}\r\n{set mainSequenceFrequency to 2}  {_ Set to determine the frequency (1 chance in n) for describing stars as \"main sequence\" _}\r\n\r\n{_ Fetch from context }\r\n{if event:\r\n    {set reportbody to BodyDetails(event.name, system.name)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    {_ If it's still not possible to get the body name...  _}\r\n    Não\r\n    {OneOf(\"estou certo\",\"tenho certeza\")}\r\n    sobre qual estrêla você está \r\n    {OneOf(\"perguntando\",\"se referindo\")}.\r\n|else:\r\n    {set class_check(body) to:\r\n        {set class to \"\"}\r\n        {set pos to 0}\r\n        {set char to slice(body, 0, 1)}\r\n        {while pos < len(body):\r\n            {if char != \"a\" && char != \"b\":\r\n                {set class to cat(class, char)}\r\n            |else:\r\n                {set subclass to cat(subclass, \"-\", char)}\r\n            }\r\n            {set pos to pos + 1}\r\n            {set char to slice(body, pos, 1)}\r\n        }\r\n        {_ Fix roman numerals being spoken as letters _}\r\n        {if class = \"I\":\r\n            {set class to \"1\"}\r\n        |elif class = \"II\":\r\n            {set class to \"2\"}\r\n        |elif class = \"III\":\r\n            {set class to \"3\"}\r\n        |elif class = \"IV\":\r\n            {set class to \"4\"}\r\n        |elif class = \"V\":\r\n            {set class to \"5\"}\r\n        |elif class = \"VI\":\r\n            {set class to \"6\"}\r\n        }\r\n\r\n        {cat(class, ucase(subclass))}\r\n    }\r\n    {set mainsequence to 0}\r\n    {if len(reportbody.rings) > 0 && ord(reportbody.rings) != 0: {set ringed to \"anelada\"}}\r\n    {F(\"Body Name Tidy\")}\r\n    {body} é\r\n    {if reportbody.stellarclass = \"O\":\r\n        uma incrívelmente rara estrêla {ringed} de sequência principal\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"B\":\r\n        uma estrêla {ringed} de sequência principal muito rara\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"A\":\r\n        uma estrêla {ringed} de sequência principal rara\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"F\":\r\n        uma estrêla {ringed} de sequência principal incomum\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"G\":\r\n        uma estrêla {ringed} de sequência principal comum\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"K\":\r\n        uma estrêla {ringed} de sequência principal comum\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"M\":\r\n        uma estrêla {ringed} de sequência principal muito comum\r\n        {set mainsequence to 1}\r\n    |elif find([\"L\", \"T\", \"Y\"], reportbody.stellarclass) > -1:\r\n        uma anã marrom {ringed}\r\n    |elif reportbody.stellarclass = \"TTS\":\r\n        uma estrêla T Tauri {ringed} em processo de contração gravitacional\r\n    |elif reportbody.stellarclass = \"AEBE\":\r\n        uma próto-estrêla {ringed} muito nova que ainda não entrou em sequência principal \r\n        {Occasionally(4, \"mas a caminho de se tornar uma estrêla classe A ou B\")}\r\n    |elif reportbody.stellarclass = \"WC\":\r\n        uma estrêla Uôlf-Rêiet {ringed} de carbono {Occasionally(2, \"em queima rápida\")} \r\n        {Occasionally(2, \", derramando massa considerável e expondo carbono ionizado em seu núcleo, \")}\r\n    |elif reportbody.stellarclass = \"WN\":\r\n        uma estrêla Uôlf-Rêiet de hélio e nitrogênio {ringed} {Occasionally(2, \"em queima rápida\")}\r\n        {Occasionally(2, \", derramando massa considerável e expondo hélio e nitrogênio ionizado em seu núcleo, \")}\r\n    |elif reportbody.stellarclass = \"WO\":\r\n        uma estrêla Uôlf-Rêiet {ringed} rica em oxigênio {Occasionally(2, \"em queima rápida\")}\r\n        {Occasionally(2, \", derramando massa considerável e expondo oxigênio ionizado em seu núcleo, \")}\r\n    |elif reportbody.stellarclass = \"WNC\":\r\n       uma estrêla Uôlf-Rêiet {ringed} {Occasionally(2, \"em queima rápida\")}\r\n           {Occasionally(2, \", derramando massa considerável e expondo nitrogênio, carbono, oxigênio e hélio ionizado em seu núcleo, \")}\r\n    |elif reportbody.stellarclass = \"W\":\r\n       uma estrêla Uôlf-Rêiet {ringed} {Occasionally(2, \"em queima rápida\")}\r\n           {Occasionally(2, \", derramando massa considerável e expondo elementos mais pesados em seu núcleo, \")}\r\n    |elif reportbody.stellarclass = \"CS\":\r\n        uma estrêla de carbono {ringed}\r\n    |elif find([\"C\", \"CN\", \"CH\", \"CHd\"], reportbody.stellarclass) > -1:\r\n                uma estrêla de carbono {ringed}\r\n        a {ringed} {Occasionally(2, \"late-sequence\")} carbon star\r\n        {Occasionally(4, \"com uma atmosféra dominada por carbono\")}\r\n    |elif reportbody.stellarclass = \"CJ\":\r\n        a {ringed} {Occasionally(2, \"late-sequence\")} carbon star\r\n        {Occasionally(2, \"com altos níveis de carbono 13 em sua atmosféra\")}\r\n    |elif reportbody.stellarclass = \"MS\":\r\n        a {ringed} late sequence star\r\n        {Occasionally(4, \"que uma vez foi uma estrêla classe M e está a caminho de se tornar uma estrêla de carbono\")}\r\n    |elif reportbody.stellarclass = \"S\":\r\n        a {ringed} late sequence star\r\n        {Occasionally(4, \"que uma vez foi uma estrêla classe M e está se tornando uma estrêla de carbono\")}\r\n    |elif reportbody.stellarclass = \"D\":\r\n        uma anã branca {ringed}\r\n    |elif reportbody.stellarclass = \"DA\":\r\n        uma anã branca {ringed}\r\n        {Occasionally(4, \"com uma atmosféra rica em hidrogênio\")}\r\n    |elif reportbody.stellarclass = \"DAB\":\r\n        uma anã branca {ringed}\r\n        {Occasionally(4, \"com uma atmosféra rica em hidrogênio e hélio\")}\r\n    |elif slice(reportbody.stellarclass, 0, 1) = \"D\":\r\n        uma anã branca {ringed}\r\n    |elif slice(reportbody.stellarclass, 0, 1) = \"N\":\r\n        uma estrêla de nêutrons {ringed}\r\n        {Occasionally(4, \"que tem um núcleo de densidade perigosamente alta\")}\r\n    |elif reportbody.stellarclass = \"H\":\r\n        um buraco negro\r\n    |elif reportbody.stellarclass = \"X\":\r\n        uma exótica entidade estelar\r\n    |elif reportbody.stellarclass = \"SuperMassiveBlackHole\":\r\n        um buraco negro super massívo\r\n    |elif reportbody.stellarclass = \"A_BlueWhiteSuperGiant\":\r\n        uma super gigante branca-azulàda {ringed}\r\n        {Occasionally(4, \"que está expandindo para se tornar uma super gigante vermelha\")}\r\n    |elif reportbody.stellarclass = \"F_WhiteSuperGiant\":\r\n        uma supergigante branca-amareláda {ringed}\r\n        {Occasionally(4, \"que está expandindo para se tornar uma super gigante vermelha\")}\r\n    |elif reportbody.stellarclass = \"M_RedSuperGiant\":\r\n        uma super gigante vermelha {ringed} {Occasionally(4, \"na sua fase de queima de hélio\")}\r\n    |elif reportbody.stellarclass = \"M_RedGiant\":\r\n        uma gigante vermelha {ringed}\r\n        {Occasionally(4, \"que está expandindo para se tornar uma super gigante vermelha\")}\r\n    |elif reportbody.stellarclass = \"K_OrangeGiant\":\r\n        uma gigante laranja {ringed}\r\n        {Occasionally(4, \"que está se expandindo para o fim de sua vida\")}\r\n    |elif reportbody.stellarclass = \"RoguePlanet\":\r\n        um planeta órfão {ringed}\r\n    |elif reportbody.stellarclass = \"Nebula\":\r\n        uma nebulosa\r\n    |elif reportbody.stellarclass = \"StellarRemnantNebula\":\r\n        uma nebulosa remanescente\r\n    |else:\r\n        uma estrêla classe {Spacialise(reportbody.stellarclass)}\r\n    }\r\n\r\n    {if reportLuminosity = 1 && reportbody.luminosityclass:\r\n        com uma classe de luminosidade de {class_check(reportbody.luminosityclass)},\r\n    }\r\n    {if reportAge = 1 && reportbody.age:\r\n        {set ageInYears to reportbody.age * 1000000}\r\n        {if reportbody.age > 0:\r\n            {OneOf(\"que existe por {Humanise(ageInYears)} anos\",\r\n                   \"que tem {Humanise(ageInYears)} anos\",\r\n                   \"de {Humanise(ageInYears)} anos\",\r\n            )}\r\n        |else:\r\n            que\r\n            {OneOf(\"tem menos de um milhão de anos\",\r\n                   \"existe a menos de um milhão de anos\")},\r\n        }\r\n        {if ageInYears < 1000000:\r\n           que faz dela uma das mais novas estrelhas na galácsiaa\r\n        |elif ageInYears >14000000000:\r\n           que faz dela uma das mais antigas estrêlas da galácsiaa\r\n        }.\r\n    }\r\n    {if reportChromaticity = 1 && reportbody.chromaticity && mainsequence = 1:\r\n            {Occasionally(2,\"Como você pode ver, ela emite uma luz {reportbody.chromaticity}.\")}\r\n    }\r\n    {if reportNotables = 1:\r\n        {set notables to []}\r\n\r\n        {if reportbody.massporbability:\r\n            {if reportbody.massprobability < 0.01:\r\n                {set notables to cat(notables, [cat(\"uma massa solar incrivelmente pequena de  \", Humanise(reportbody.solarmass))])}\r\n            |elif reportbody.massprobability < 0.1:\r\n                {set notables to cat(notables, [cat(\"uma massa solar extremamente pequena de \", Humanise(reportbody.solarmass))])}\r\n            |elif reportbody.massprobability < 1:\r\n                {set notables to cat(notables, [\"uma massa solar extraordinariamente baixa\"])}\r\n            |elif reportbody.massprobability < 10:\r\n                {set notables to cat(notables, [\"uma massa solar menor que a média\"])}\r\n            |elif reportbody.massprobability > 99.99:\r\n                {set notables to cat(notables, [cat(\"uma massa solar incrivelmente alta de \", Humanise(reportbody.solarmass))])}\r\n            |elif reportbody.massprobability > 99.9:\r\n                {set notables to cat(notables, [cat(\"uma massa solar extremamente alta de \", Humanise(reportbody.solarmass))])}\r\n            |elif reportbody.massprobability > 99:\r\n                {set notables to cat(notables, [\"uma massa solar extraordinariamente alta\"])}\r\n            |elif reportbody.massprobability > 90:\r\n                {set notables to cat(notables, [\"uma massa solar mais alta que a média\"])}\r\n            }\r\n        }\r\n        {if reportbody.radiusprobability:\r\n            {if reportbody.radiusprobability < 0.01:\r\n                {set notables to cat(notables, [cat(\"um raio solar incrivelmente pequeno de \", Humanise(reportbody.solarradius))])}\r\n            |elif reportbody.radiusprobability < 0.1:\r\n                {set notables to cat(notables, [cat(\"um raio solar extremamente pequeno de \", Humanise(reportbody.solarradius))])}\r\n            |elif reportbody.radiusprobability < 1:\r\n                {set notables to cat(notables, [\"um raio solar extraordinariamente pequeno\"])}\r\n            |elif reportbody.radiusprobability <1 0:\r\n                {set notables to cat(notables, [\"um raio solar menor que a média\"])}\r\n            |elif reportbody.radiusprobability > 99.99:\r\n                {set notables to cat(notables, [cat(\"um raio solar extremamente grande de \", Humanise(reportbody.solarradius))])}\r\n            |elif reportbody.radiusprobability > 99.9:\r\n                {set notables to cat(notables, [cat(\"um raio solar incrivelmente grande de \", Humanise(reportbody.solarradius))])}\r\n            |elif reportbody.radiusprobability > 99:\r\n                {set notables to cat(notables, [\"um raio solar extraordinariamente grande\"])}\r\n            |elif reportbody.radiusprobability > 90:\r\n                {set notables to cat(notables, [\"um raio solar maior que a maioria\"])}\r\n            }\r\n        }\r\n        {if reportbody.tempprobability:\r\n            {if reportbody.tempprobability < 0.01:\r\n                {set notables to cat(notables, [cat(\"uma temperatura de superfície incrivelmente baixa de \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n            |elif reportbody.tempprobability < 0.1:\r\n                {set notables to cat(notables, [cat(\"uma temperatura de superfície extremamente baixa de \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n            |elif reportbody.tempprobability < 1:\r\n                {set notables to cat(notables, [\"uma temperatura de superfície extraordinariamente baixa\"])}\r\n            |elif reportbody.tempprobability < 10:\r\n                {set notables to cat(notables, [\"uma temperatura de superfície menor que a média\"])}\r\n            |elif reportbody.tempprobability > 99.99:\r\n                {set notables to cat(notables, [cat(\"uma temperatura de superfície extremamente alta de  \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n            |elif reportbody.tempprobability > 99.9:\r\n                {set notables to cat(notables, [cat(\"uma temperatura de superfície incrivelmente alta de \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n            |elif reportbody.tempprobability > 99:\r\n                {set notables to cat(notables, [\"uma temperatura de superfície extraordinariamente alta\"])}\r\n            |elif reportbody.tempprobability > 90:\r\n                {set notables to cat(notables, [\"uma temperatura de superfície maior que a média\"])}\r\n            }\r\n        }\r\n        {if len(notables) = 0:\r\n            {OneOf(\"\", \"Este é um típico exemplo de uma estrêla desta classe.\", \"Não há nada notável em particular sobre esta estrêla.\", \"É um exemplo mediano para este tipo de estrêla.\")}\r\n        |else:\r\n            {OneOf('Comparada a outras estrelhas de sua classe', 'Em comparação a outras estrêlas Classe {reportbody.stellarclass}', 'Em relação a outras estrêlas classe {reportbody.stellarclass}')}, esta estrêla é \r\n            {if len(notables) = 1:\r\n                notável por ter {notables[0]}.\r\n            |elif len(notables) = 2:\r\n                {OneOf('interessante', 'incomum')}, com {notables[0]} e {notables[1]}.\r\n            |elif len(notables) = 3:\r\n                {OneOf('excepcional', 'notável')}, com {notables[0]}, {notables[1]} e {notables[2]}.\r\n            }\r\n        }\r\n    }\r\n    {if reportScanValue = 1: {F(\"Report last scan value\")} }\r\n    {if reportHabZone = 1 && event.mainstar: {F(\"Star habitable zone\")} }\r\n}\r\n",
      "default": true,
      "name": "Star report",
      "description": "Function to report on the details of the contextual body"
    },
    "Star scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'star')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', system.name)}\r\n{SetState('eddi_context_star_star', event.name)}\r\n{SetState('eddi_context_last_scan_estimated_value', event.estimatedvalue)}\r\n\r\n\r\n{if state.lastscanbody != event.name:\r\n\r\n    {if event.estimatedvalue:\r\n        {SetState(\"eddi_context_system_value\", state.eddi_context_system_value + event.estimatedvalue)}\r\n        {SetState(\"eddi_context_session_scan_value\", state.eddi_context_session_scan_value + event.estimatedvalue)}\r\n    }\r\n\r\n    {if event.stellarclass = \"SuperMassiveBlackHole\":\r\n        {set class to \"Supermassive black hole\"}\r\n    |elif event.stellarclass = \"A_BlueWhiteSuperGiant\":\r\n        {set class to \"A-\"}\r\n    |elif event.stellarclass = \"F_WhiteSuperGiant\":\r\n        {set class to \"F-\"}\r\n    |elif event.stellarclass = \"M_RedSuperGiant\":\r\n        {set class to \"M-\"}\r\n    |elif event.stellarclass = \"M_RedGiant\":\r\n        {set class to \"M-\"}\r\n    |elif event.stellarclass = \"K_OrangeGiant\":\r\n        {set class to \"K-\"}\r\n    |elif event.stellarclass = \"RoguePlanet\":\r\n        {set class to \"Rogue planet-\"}\r\n    |elif event.stellarclass = \"Nebula\":\r\n        {set class to \"Nebula-\"}\r\n    |elif event.stellarclass = \"StellarRemnantNebula\":\r\n        {set class to \"Nebula remnant-\"}\r\n    |else:\r\n        {set class to join(split(Spacialise(event.stellarclass), \" \"), \"-\")}\r\n    }\r\n\r\n    {Pause(1000)}\r\n\r\n    Varredura da estrêla classe {class} {OneOf(\"concluída\", \"finalizada\")}.\r\n\r\n    {if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n        {F(\"Star report\")}\r\n    }\r\n    {SetState('lastscanbody', event.name)}\r\n}\r\n",
      "default": true,
      "name": "Star scanned",
      "description": "Triggered when you complete a scan of a stellar body"
    },
    "Station no fire zone entered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Station no fire zone entered",
      "description": "Triggered when your ship enters a station's no fire zone"
    },
    "Station no fire zone exited": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Station no fire zone exited",
      "description": "Triggered when your ship exits a station's no fire zone"
    },
    "Station report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "Nada de interessante aqui.",
      "default": true,
      "name": "Station report",
      "description": "Function to report on the details of the current station"
    },
    "Statistics": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Statistics",
      "description": "Statistics provided at the beginning of a game session"
    },
    "Surface signals detected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set surfacesignals to []}\r\n{for signal in event.surfacesignals: \r\n    {set surfacesignals_desc to: \r\n        {signal.amount} {signal.source}{if signal.amount > 1:s}\r\n    }\r\n    {set surfacesignals to cat(surfacesignals, [surfacesignals_desc])}\r\n}\r\n\r\n{List(surfacesignals)} detected.",
      "default": true,
      "name": "Surface signals detected",
      "description": "Triggered when surface signal sources are detected"
    },
    "Swapout check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to find a given module in outfitting}\r\n{set outfitting(module) to:\r\n    {for outfittingmodule in station.outfitting:\r\n        {if outfittingmodule.EDName = module.EDName:\r\n            {return outfittingmodule}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Function to report if a module is cheaper in outfitting that on the ship}\r\n{set reportIfCheaper(shipmodule) to:\r\n    {_ Only consider if this has no modifications}\r\n    {if !shipmodule.modified:\r\n        {set outfittingmodule to outfitting(shipmodule)}\r\n        {if outfittingmodule:\r\n            {if outfittingmodule.price < shipmodule.price:\r\n                {set saving to shipmodule.price - outfittingmodule.price}\r\n                {_ Only bother if it's a relatively good saving}\r\n                {if saving / cmdr.credits > 0.001:\r\n                    Você pode economizar {Humanise(saving)} créditos trocando seu {shipmodule.name} aqui.\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{reportIfCheaper(ship.powerplant)}\r\n{reportIfCheaper(ship.thrusters)}\r\n{reportIfCheaper(ship.frameshiftdrive)}\r\n{reportIfCheaper(ship.lifesupport)}\r\n{reportIfCheaper(ship.powerdistributor)}\r\n{reportIfCheaper(ship.sensors)}\r\n{for hardpoint in ship.hardpoints:\r\n    {if hardpoint.module:\r\n        {reportIfCheaper(hardpoint.module)}\r\n    }\r\n}\r\n{for compartment in ship.compartments:\r\n    {if compartment.module:\r\n        {reportIfCheaper(compartment.module)}\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Swapout check",
      "description": "Check to see if any fitted modules are available more cheaply here"
    },
    "Synthesised": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set TOKEN to token(event.synthesis, \" \", 0)}\r\n\r\n{if TOKEN = \"Ammo\": Síntese de munição finalizada.}",
      "default": true,
      "name": "Synthesised",
      "description": "Triggered when you synthesise something from materials"
    },
    "System distance report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n    Não estou certo sobre qual sistema você está se referindo.\r\n|else:\r\n    A distância até {P(reportsystem.name)} é de {Humanise(Distance(reportsystem.x, reportsystem.y, reportsystem.z, system.x, system.y, system.z))} anos luz.\r\n}",
      "default": true,
      "name": "System distance report",
      "description": "Function to report on the distance to the contextual system"
    },
    "System faction changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "System faction changed",
      "description": "Triggered when there is a change in the controlling faction of a watched system"
    },
    "System report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n    Não tenho certeza sobre qual sistema você está perguntando.\r\n|else:\r\n    {join(split(reportsystem.name, \".\"), \" \")} é\r\n\r\n    {if reportsystem.population && reportsystem.population > 0:\r\n        um sistema \r\n  {if reportsystem.allegiance = \"Federation\":\r\n            Federal\r\n        |elif reportsystem.allegiance = \"Empire\":\r\n            Imperial\r\n        |else:\r\n            Independente\r\n        }, \r\n        {if reportsystem.government:\r\n            {reportsystem.government}\r\n        |else:\r\n          system\r\n        }, \r\n        {OneOf(\"com\", \"com uma população de\", \"lar de\", \"suportando\")} {Humanise(reportsystem.population)} {OneOf(\"pessoas\", \"almas\")}\r\n        {if reportsystem.power:\r\n            , {OneOf(\"aliado a\", \"aliado com\", \"controlado por\")} {P(reportsystem.power)}\r\n        }.\r\n\r\n        {if reportsystem.faction:\r\n          {reportsystem.faction} é a facção {OneOf(\"controladora\", \"local\", \"imediata\")}.\r\n        }\r\n\r\n        {if len(reportsystem.stations) = 0:\r\n          Não há estações presentes\r\n        |else:\r\n            {if len(reportsystem.orbitalstations) = 0:\r\n                {if len(reportsystem.planetarystations) = 1:\r\n                    Há {OneOf(\"somente\",\"apenas\")} uma estação planetária \r\n                |else:\r\n                    Há {len(reportsystem.planetarystations)} estações planetárias\r\n                }\r\n            |elif len(reportsystem.orbitalstations) = 1:\r\n                Há {OneOf(\"somente\",\"apenas\")} estação orbital\r\n                {if len(reportsystem.planetarystations) = 1:\r\n                    e {OneOf(\"somente\",\"apenas\")} estação planetária\r\n                |elif len(reportsystem.planetarystations) > 1:\r\n                    e {len(reportsystem.planetarystations)} estações planetárias\r\n                }\r\n            |else:\r\n                Há {len(reportsystem.orbitalstations)} estações orbitais\r\n                {if len(reportsystem.planetarystations) = 1:\r\n                    e {OneOf(\"somente\",\"apenas\")} estação planetária\r\n                |elif len(reportsystem.planetarystations) > 1:\r\n                    e {len(reportsystem.planetarystations)} estações planetárias\r\n                }\r\n            }\r\n        }\r\n        neste sistema\r\n    |else:\r\n       não populado.\r\n   }.\r\n}",
      "default": true,
      "name": "System report",
      "description": "Function to report on the details of the contextual star system"
    },
    "System scan complete": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Preferences _}\r\n{set reportGreenSystems to true}  {_ if true, reports systems containing all fsd synthesis elements. _}\r\n{set reportGoldSystems to true}   {_ if true, reports systems containing all surface prospectable elements. _}\r\n{set reportBodiesToMap to true}   {_ If true, recommends bodies to map using the `Bodies to map` script. _}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n    {for compartment in ship.compartments:\r\n        {if compartment.module.invariantName = \"Planetary Vehicle Hangar\":\r\n            {set hasSRV to true}\r\n        }\r\n    }\r\n    {if hasSRV:\r\n        {if system.isgold:\r\n            {if reportGoldSystems:\r\n                This {Occasionally(2, \"star\")} system \r\n                {OneOf(\"contains\", \"holds\", \"has\")}\r\n                every element \r\n                {OneOf(\"that can be found\", \"available\")}\r\n                {OneOf(\"on planetary surfaces.\", \"from surface prospecting.\")}\r\n                Exploration class: Gold.\r\n            }\r\n        |elif system.isgreen:\r\n            {if reportGreenSystems:\r\n                This {Occasionally(2, \"star\")} system \r\n                {OneOf(\"contains\", \"holds\", \"has\")}\r\n                every element \r\n                {Occasionally(2, \"that may be\")} \r\n                required to \r\n                {OneOf(\"augment\", \"boost\")} \r\n                {OneOf(\"the {Occasionally(2, \\\"jump\\\")} range of this ship.\", \r\n                       \"an explorer's {Occasionally(2, \\\"jump\\\")} range.\", \r\n                       \"{ShipName()}'s {Occasionally(2, \\\"jump\\\")} range.\"\r\n                )}\r\n                Exploration class: Green.\r\n            }\r\n        }\r\n    }\r\n\r\n    {if reportBodiesToMap:\r\n        {set bodiesToMap to F(\"Bodies to map\")}\r\n        {if bodiesToMap:\r\n            {Pause(2000)}\r\n            {bodiesToMap}\r\n        }\r\n    }\r\n}",
      "default": true,
      "name": "System scan complete",
      "description": "Triggered after having identified all bodies in the system"
    },
    "System state changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'system')}\r\n{SetState('eddi_context_last_action', 'change_state')}\r\n{SetState('eddi_context_system', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n\r\n{_ Set up our system name}\r\n{if event.system = homesystem.name:\r\n  {set system to OneOf('{P(event.system)}',\r\n                       'seu sistema natal')}\r\n|elif event.system = system.name:\r\n  {set system to OneOf('{P{event.system)}',\r\n                       'este sistema')}\r\n|else:\r\n  {set system to OneOf('sistema {P(event.system)}'\r\n                       '{P(event.system)}'))}\r\n}\r\n\r\n{set system to join(split(system, \".\"), \" \")}\r\n\r\n{if event.newstate != 'None':\r\n  {_ System has entered a new state}\r\n  {OneOf('Transmissões locais relatam que ', 'Informação: ', 'Transmissão interceptada.  O conteúdo diz que ')}\r\n  {if event.newstate = 'Auge':\r\n    {OneOf('{system} está experimentando um auge econômico',\r\n           '{system} está entrando em um período de elevado sucesso comercial')}\r\n  |elif event.newstate = 'Recessão':\r\n    {system} está passando por um momento econômico muito ruim\r\n  |elif event.newstate = 'Revolta Civil':\r\n    {OneOf('{system} está passando por uma revolta civil',\r\n           'há uma revolta no sistema {system}')}\r\n  |elif event.newstate = 'Guerra Civil':\r\n    {OneOf('{system} está em guerra contra outra facção no mesmo sistema',\r\n           'uma guerra civil foi iniciada em {system}',\r\n           '{system} entrou em guerra civil',\r\n           'hostilidades começaram em {system}')}\r\n  |elif event.newstate = 'Eleição':\r\n    {system} está passando por eleições\r\n  |elif event.newstate = 'Expansão':\r\n    {OneOf(\"uma facção em {system} está tentando expandir para um sistema vizinho\",\r\n           \"uma facção em {system} está se preparando para expandir para um sistema vizinho\")}\r\n  |elif event.newstate = 'Fome':\r\n    {system} está sofrendo por causa da fome\r\n  |elif event.newstate = 'Investmento':\r\n    A facção que controla {system} está investindo pesado na infraestrutura local\r\n  |elif event.newstate = 'Lei Marcial':\r\n    {system} aumentou a segurança devido à lei marcial estabelecida pela facção controladora\r\n  |elif event.newstate = 'Epidemia':\r\n    {system} está sofrendo com uma epidemia de uma doença contagiosa\r\n  |elif event.newstate = 'Retirada':\r\n    A facção que controla {system} está se retirando de um sistema vizinho\r\n  |elif event.newstate = 'Guerra':\r\n    {system} está em guerra com um sistema vizinho\r\n  |else:\r\n    {OneOf('{system} entrou em {event.state}',\r\n           '{system} está agora em um estado de {event.state}')}\r\n  }.\r\n}",
      "default": true,
      "name": "System state changed",
      "description": "Triggered when there is a change in the state of a watched system"
    },
    "System state report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportsystem.name = \"\":\r\n    Não tenho certeza sobre qual sistema você está perguntando.\r\n|elif reportsystem.state && reportsystem.state != 'None':\r\n    {OneOf(\"Este sistema\", \"{reportsystem.name}\")} está\r\n    {if reportsystem.state = \"Auge\":\r\n        em auge; deve haver bons lucros comerciais a serem adquiridos aqui\r\n    |elif reportsystem.state = \"Recessão\":\r\n        em recessão financeira\r\n    |elif reportsystem.state = \"Revolta Civil\":\r\n        passando por uma revolta civil; aconselho ter cuidado\r\n    |elif reportsystem.state = \"Guerra Civil\":\r\n        {OneOf(\"enfrentando uma\",\"em\")} guerra civil; aconselho ter cuidado\r\n    |elif reportsystem.state = \"Eleição\":\r\n        elegendo novos líderes\r\n    |elif reportsystem.state = \"Expansão\":\r\n        {OneOf(\"se preparando para expandir\",\"preparinguma expansão\")} para outro sistema\r\n    |elif reportsystem.state = \"Fome\":\r\n        em um estado de fomo; recomendo cautela\r\n    |elif reportsystem.state = \"Investimento\":\r\n        investindo em sua infraestrutura\r\n    |elif reportsystem.state = \"Lei Marcial\":\r\n        em lei marcial; recomendo cautela\r\n    |elif reportsystem.state = \"Nenhum\" || reportsystem.state = null:\r\n        {OneOf(\"em nenhum estado em particular\",\"em estado nêutro\")} {OneOf(\"no presente momento\",\"atualmente\",\"no momento\")}\r\n    |elif reportsystem.state = \"Epidemia\":\r\n        tentando conter uma epidemia de doença; recomendo cautela\r\n    |elif reportsystem.state = \"Retirada\":\r\n        em retirada\r\n    |elif reportsystem.state = \"Guerra\":\r\n        em guerra; aconselho ter cuidado\r\n    }.\r\n}\r\n",
      "default": true,
      "name": "System state report",
      "description": "Report on the current state of the contextual system"
    },
    "TargetType": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Get real target name}\r\n{_ to use this function, set a variable to shiptype in the calling event}\r\n\r\n{if shiptype = \"Cobra Mk. III\":\r\n   {set shiptype to \"Cobra Mark 3\"}\r\n\r\n|elif shiptype = \"Cobra Mk. IV\":\r\n   {set shiptype to \"Cobra Mark 4\"} {_ this works}\r\n\r\n|elif shiptype = \"Krait Mk. II\":\r\n   {set shiptype to \"Krait Mark 2\"}\r\n\r\n|elif shiptype = \"Viper Mk. III\":\r\n   {set shiptype to \"Viper Mark 3\"}\r\n\r\n|elif shiptype = \"Viper Mk. IV\":\r\n   {set shiptype to \"Viper Mark 4\"} {_ this works}\r\n\r\n|elif shiptype = \"$ShipName_Military_Alliance;\":\r\n   {set shiptype to \"a Força de Defesa da Aliança\"}\r\n\r\n|elif shiptype = \"$ShipName_Military_Empire;\":\r\n   {set shiptype to \"a Marinha Imperial\"}\r\n\r\n|elif shiptype = \"$ShipName_Military_Federation;\":\r\n   {set shiptype to \"a Marinha Federal\"}\r\n\r\n|elif shiptype = \"$ShipName_Military_Independent;\":\r\n   {set shiptype to \"a Força de Defesa do Sistema\"}\r\n\r\n}\r\n",
      "default": true,
      "name": "TargetType",
      "description": "Get real target name"
    },
    "Technology broker": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Technology broker",
      "description": "Triggered when using the Technology Broker to unlock new purchasable technology"
    },
    "TextWisdom": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ TextWisdom}\r\n{_ Random wisdom of the day}\r\n{_ Choose a random option until all are used, then reset}\r\n{_ From an idea put to me by Brigetiol1. Thanks!}\r\n\r\nSabedoria diária, na rádio {ShipName()}:\r\n\r\n{Pause(300)}\r\n\r\n{_ check Wisdom string is long, else run string setup (just in case it hasn't already been setup)}\r\n{if len(state.wisdomstring) < 10:\r\n\r\n    {set wisdomstring to [\"A melhor maneira de se encontrar é se perder no serviço a outros\",\r\n         \"Você precisa ser a mudança que quer ver no mundo\",\r\n         \"Viva como se você fosse morrer amanhã. Aprenda como se fosse viver para sempre\",\r\n         \"Primeiro eles te ignoram, então eles riem de você, aí eles te enfrentam, então você vence\",\r\n         \"Os fracos nunca perdoam. Perdão é o atributo dos fortes\",\r\n         \"Felicidade é quando aquilo que você pensa, o que você diz e o que você faz estão em harmonia\",\r\n         \"Em orações, é melhor ter um coração sem palavras, do que palavras sem um coração\",\r\n         \"A verdade perdura, mesmo sem apoio público. Ela se auto sustenta\",\r\n         \"Satisfação reside no esforço, não na realização, o esforço total é a vitória completa\",\r\n         \"A verdade nunca afeta uma causa justa\",\r\n         \"O medo tem utilidade, a covardia não\",\r\n         \"Ninguém pode me ferir sem minha permissão\",\r\n         \"Minha vida é minha mensagem\",\r\n         \"Treine a si mesmo para livrar-se de tudo que você teme perder\",\r\n         \"Insanidade: fazer a mesma coisa repetidas vezes e esperar obter resultados diferentes\",\r\n         \"A diferença entre estupidez e genialidade é que a genialidade tem limites\",\r\n         \"Aprenda com ontem, viva para hoje, espere por amanhã\",\r\n         \"A pessoa que nunca cometeu um erro, nunca tentou algo novo\",\r\n         \"Se você não consegue dar uma explicação simples, você não o suficiente do assunto\",\r\n         \"Não adianta andar em qualquer lugar para pregar, a menos que nosso andar seja nossa pregação\",\r\n         \"O mistério da vida não é um problema para resolver, mas uma realidade para experimentar\",\r\n         \"A mente comanda o corpo e obedece. A mente ordena a si mesma e encontra resistência\",\r\n         \"Tente olhar para aquele lugar onde você não ousa olhar! Você vai me encontrar lá, olhando para você\",\r\n         \"Medo é o assassino da mente\",\r\n         \"Não entre em pânico\",\r\n         \"O salgueiro se submete ao vento e prospera até que um dia são muitos salgueiros - um muro contra o vento\",\r\n         \"Você não pode fazer nada a prova de idiotas porque os idiotas são muito engenhosos\",\r\n         \"Bem, o passado se foi, eu sei disso. O futuro ainda não está aqui, seja lá o que for. Então, tudo o que existe é isso. O presente. É isso aí\",\r\n         \"Veja primeiro, pense depois, depois teste. Mas sempre veja primeiro. Caso contrário, você só verá o que estava esperando\",\r\n         \"Muito pode ser aprendido no jogo, que depois será útil quando as circunstâncias o exigirem.\",\r\n         \"Sou a favor da verdade, não importa quem a diz. Sou a favor da justiça, não importa quem é a favor ou contra\",\r\n         \"Um senso de humor bem desenvolvido é o pólo que adiciona equilíbrio ao seu passo enquanto você anda na corda bamba da vida\",\r\n         \"Conhecimento que é divorciado da justiça, pode ser chamado de astúcia ao invés de sabedoria\"]\r\n    }\r\n    {SetState('wisdomstring', join(wisdomstring, \"+=\"))}\r\n}\r\n\r\n{set textstring to state.wisdomstring}\r\n\r\n{_ create array from the string, using += as the split marker}\r\n{set textarray to split(textstring, \"+=\")}\r\n\r\n{_ create array of unused quotes}\r\n{set temparray to []}\r\n{for check in textarray:\r\n   {set index to len(check)-5}\r\n   {set chk to slice(check, index, 5)}\r\n   {if chk != \" used\":\r\n       {set temparray to cat(temparray, [check])}\r\n   }\r\n}\r\n\r\n{_ if unused array is empty then rebuild and reset all items}\r\n{if len(temparray) = 0:\r\n   {set temparray to []}\r\n   {for check in textarray:\r\n      {set index to len(check)-5}\r\n      {set chk to slice(check, 0, index)}\r\n      {set temparray to cat(temparray, [chk])}\r\n   }\r\n   {set textstring to join(temparray, \"+=\")}\r\n   {set textarray to split(textstring, \"+=\")}\r\n}\r\n\r\n{_ get a random unused item and say it}\r\n{set random to rand(len(temparray))}\r\n{set used to temparray[random]}\r\n{used}\r\n\r\n{_ find position of used item in text array}\r\n{set position to find(textarray, used)}\r\n\r\n{_ mark item as used}\r\n{set useditem to cat(used, \" used\")}\r\n\r\n{_ rebuild text array with marked item}\r\n{set temparray to []}\r\n{set cur to 0}\r\n{while cur < len(textarray):\r\n  {if cur = position:\r\n     {set temparray to cat(temparray, [useditem])}\r\n  |else:\r\n     {set temparray to cat(temparray, [textarray[cur]])}\r\n  }\r\n  {set cur to cur + 1}\r\n}\r\n\r\n{_ rebuild text string ready for next use}\r\n{SetState('wisdomstring', join(temparray, \"+=\"))}\r\n",
      "default": true,
      "name": "TextWisdom",
      "description": "Random wisdom of the day"
    },
    "Timer": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Reports time between executions of this script. _}\r\n{_ Currently set to report time spent in a system _}\r\n{_ when called from FSD Engaged event. _}\r\n\r\n{_ Get and format timer }\r\n{set rawtime to abs(SecondsSince(state.timer))}\r\n{set timer to split(format(rawtime, \"dl:dd:HH:mm:ss\"), \":\")}\r\n\r\n{set days to cast(timer[0], \"n\") - 1}\r\n{set hours to cast(timer[1], \"n\")}\r\n{set minutes to cast(timer[2], \"n\")}\r\n{set seconds to cast(timer[3], \"n\")}\r\n\r\n{set timer_array to []}\r\n\r\n{if days > 0:\r\n    {set time to cat(days, \" dia\")}\r\n    {if days > 1:{set time to cat(time, \"s\")}}\r\n    {set timer_array to cat(timer_array, [time])}\r\n}\r\n\r\n{if hours > 0:\r\n    {set time to cat(hours, \" hora\")}\r\n    {if hours > 1:{set time to cat(time, \"s\")}}\r\n    {set timer_array to cat(timer_array, [time])}\r\n}\r\n\r\n{if minutes > 0:\r\n    {set time to cat(minutes, \" minuto\")}\r\n    {if minutes > 1:{set time to cat(time, \"s\")}}\r\n    {set timer_array to cat(timer_array, [time])}\r\n}\r\n\r\n{if seconds > 0:\r\n    {set time to cat(seconds, \" segundo\")}\r\n    {if seconds > 1:{set time to cat(time, \"s\")}}\r\n    {set timer_array to cat(timer_array, [time])}\r\n}\r\n\r\nVocê gastou {List(timer_array)} neste sistema.\r\n\r\n{SetState('timer', SecondsSince(0))}\r\n",
      "default": true,
      "name": "Timer",
      "description": "Reports time between executions of this script"
    },
    "Touchdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set body to BodyDetails(state.eddi_context_body_name, state.eddi_context_system_name)}\r\n\r\n{F(\"Body Name Tidy\")}\r\n\r\n{if state.loading = false:\r\n    {if event.playercontrolled = true:\r\n        Pousamos {if body: em {body} }.\r\n        {OneOf(\"Motores\",\"Propulsores\")} {OneOf(\"desligados\",\"desativados\")}.\r\n    |else:\r\n        {ShipName()} pousou\r\n        {if body: em {body} }.\r\n    }\r\n    {Pause(2000)}\r\n|else:\r\n    {SetState('loading', false)}\r\n}\r\n\r\n{if type(event.latitude) != \"void\" && type(event.longitude) != \"void\" && event.playercontrolled:\r\n    {Occasionally(2,\"Localização\")}\r\n    {Occasionally(2,\"Planetária\")}\r\n    {Occasionally(2,\"Atual\")}, \r\n\r\n    coordenadas {Occasionally(2,\"são\")}\r\n    {round(event.longitude,4)} graus de longitude,\r\n    {round(event.latitude,4)} graus de latitude.\r\n}\r\n",
      "default": true,
      "name": "Touchdown",
      "description": "Triggered when your ship touches down on a planet's surface"
    },
    "Trade data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'tradedata')}\r\n{SetState('eddi_context_last_action', 'buy')}\r\n{SetState('eddi_context_tradedata_name', event.system)}\r\n\r\n{OneOf(\"Dados de comércio comprados para {P(event.system)}\",\r\n            \"Dados de comércio de {P(event.system)} disponíveis agora\",\r\n            \"Recebemos dados de comércio de {P(event.system)} dos serviços da estação\",\r\n            \"Recibo de dados de comércio de {P(event.system)} confirmado\")}.",
      "default": true,
      "name": "Trade data purchased",
      "description": "Triggered when you purchase trade data"
    },
    "Trade promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Você teve sua habilidade de comércio reconhecida  {F(\"Honorific\")}.\r\n\r\nVocê {OneOf(\"está agora no\",\"alcançou o\",\"adquiriu o\")} rank de {cmdr.traderating.name}.\r\n",
      "default": true,
      "name": "Trade promotion",
      "description": "Triggered when your trade rank increases"
    },
    "Trade voucher redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'trade_voucher')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_trade_voucher_amount', event.amount)}\r\n\r\nRecibos de comércio trocados por {Humanise(event.amount)} créditos\r\n\r\n\r\n{Occasionally(2, \"\r\n    pela\r\n    {set cur to 0}\r\n    {set length to len(event.rewards) - 1}\r\n    {while cur < len(event.rewards):\r\n  {set FACCAO to: {P(event.rewards[cur].faction)}}\r\n  {if FACCAO = ' The Pilots Federation': {set FACCAO to: Federação de Pilotos}}\r\n  {FACCAO}\r\n        {set cur to cur + 1}\r\n        {if cur = length: e\r\n        |elif cur < length:,\r\n        }\r\n    }\r\n\")}.\r\n\r\n{if event.brokerpercentage:\r\n  {Pause(1000)}\r\n  O intermediário ficou com {event.brokerpercentage} créditos.\r\n}\r\n",
      "default": true,
      "name": "Trade voucher redeemed",
      "description": "Triggered when you redeem a trade voucher"
    },
    "Under attack": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Under attack",
      "description": "Triggered when under fire (same time as the Under Attack voice message)"
    },
    "Undocked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState('eddi_context_docked',\"no\")}\r\n{SetState('eddi_context_mission_accepted', \"no\")}\r\n\r\n{set station to token(StationDetails(event.station).model,\" \",1)}\r\n\r\n{if station = \"Posto avançado\":\r\n   {Pause(2750)}\r\n   {OneOf(\"Controle total restabelecido\", \"Travas de pouso liberadas\", \"Desconectado das redes locais\")}\r\n}\r\n\r\n{set limpetcheck to F(\"Limpet check\")}\r\n{set contactscheck to F(\"FinesBounties_ContactsCheck\")}\r\n\r\n{if limpetcheck || contactscheck:\r\n    {Pause(400)}\r\n    {limpetcheck}\r\n    {contactscheck}\r\n}\r\n\r\n{if state.eddi_context_mission_route_useauto = \"no\":\r\n    {_ Report first system in route if not using auto Galaxy Map plotter _}\r\n    {set route to split(state.missionsroute, \"_\")}\r\n    {if len(route) > 0:\r\n        {Occasionally(2, \"Rota automática\")} {OneOf(\"sugerida\", \"recomendada\")},\r\n        {OneOf(\"primeiro destino\", \"primeira parada\")} é o \r\n        sistema {route[0]}.\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Undocked",
      "description": "Triggered when your ship undocks from a station or outpost"
    },
    "VA initialized": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ VAStartup}\r\n{_ Sets some variables for use in VA, if VA started after E:D}\r\n\r\n{SetState('eddi_context_system_system', system.name)}\r\n{SetState('eddi_context_body_name', body.name)}\r\n{SetState('eddi_context_station_name', station.name)}\r\n\r\n{_ Set up Mission Route from saved data _}\r\n{set missionsdata to split(state.missionsdata, \"+=\")}\r\n{SetState('missionsrouteuseeddi', missionsdata[0])}\r\n{SetState('missionsroutetype', missionsdata[1])}\r\n{SetState('missionsdestination', missionsdata[2])}\r\n{SetState('missionsroutedistance', missionsdata[3])}\r\n{SetState('missionsroute', missionsdata[4])}\r\n\r\n{if missionsCount > 0 && state.missionsdestination != system.name:\r\n    {SetState('to_system', state.missionsdestination)}\r\n    {SetState('from_system', system.name)}\r\n\r\n    {if missionsCount > 1: {OneOf(\"Destino primário\", \"Primeiro destino\", \"Destino inicial\")} }\r\n    {Occasionally(2,\"de missão\")} {state.to_system},\r\n    {Occasionally(2, \"{OneOf('foi', 'está')}\")} {OneOf(\"travado\", \"ajustado\")}.\r\n    {F(\"Mission Route Get Distance\")}\r\n    {if state.distance > 0:\r\n        Distância {Occasionally(2,\"até {OneOf('o sistema','o alvo','{state.to_system}')}\")}\r\n        é de {state.distance)} anos luz.\r\n        {SetState('eddi_context_mission_destination_locked', \"no\")}\r\n    }\r\n}\r\n",
      "default": true,
      "name": "VA initialized",
      "description": "Triggered when the VoiceAttack plugin is initialized"
    },
    "Vehicle destroyed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\r\n{set LINK to:{OneOf(\"Link neural\", \"Link\", \"Conecsão\")}}\r\n{LINK}\r\n{OneOf(\" terminad\", \" desativad\")}{if LINK = \"Conecsão\":a |else:o}",
      "default": true,
      "name": "Vehicle destroyed",
      "description": "Triggered when your vehicle is destroyed"
    }
  }
}
