<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="desc" xml:space="preserve">
    <value>Un répondeur qui génère un grand nombre de variables dans VoiceAttack et déclenche des actions définies par l'utilisateur.</value>
  </data>
  <data name="name" xml:space="preserve">
    <value>Répondeur VoiceAttack</value>
  </data>
  <data name="p1" xml:space="preserve">
    <value>Pour intégrer EDDI avec VoiceAttack EDDI nécessite d'être installer dans le répertoire 'Apps' de 'VoiceAttack'. Le chemin par défaut de ce dossier est 'C:\Program Files (x86)\VoiceAttack\Apps', et est l'endroit ou EDDI seras installé par défaut.</value>
  </data>
  <data name="p2" xml:space="preserve">
    <value>EDDI ne fonctionnera qu'avec les versions de VoiceAttack 1.5.12.22 et ultérieur. Attention : ceci est une release beta.</value>
  </data>
  <data name="p3" xml:space="preserve">
    <value>Une fois VoiceAttack installé, vous devrez activer le support des plugins. Pour ce faire, vous devez cliquer sur l'icône Paramètres (clé à molette) dans le coin inférieur droit de la fenêtre VoiceAttack, cocher l'option «Activer la prise en charge du plug-in» et redémarrer VoiceAttack. Vous devriez voir un message dans la fenêtre VoiceAttack sur la ligne de "Plugin EDDI 2.0.0 initialized".</value>
  </data>
  <data name="p4" xml:space="preserve">
    <value>A partir de maintenant vous pouvez intégrer les variable d'EDDI avec vos propre scripts VoiceAttack. Par exemple, votre nom de commandant est stocké dans la variable texte 'Name' pour que vous puissiez y accèder en utilisant '{TXT:Name}' dans vos propre commandes. Il y a des variables pour votre commandant, vos vaisseaux, le système et la station actuelle, et d'autres. Une liste complètes des variables est disponible </value>
  </data>
  <data name="p4_link" xml:space="preserve">
    <value>sur le site d'EDDI</value>
  </data>
  <data name="p5" xml:space="preserve">
    <value>En plus d'écrire des scripts que vous déclenchez avec la voix ou le clavier vous pouvez aussi écrire des scripts qui se déclenchent lors d'évenements qui arrive dans Elite. Par example, si vous voulez déclencher un script chaque fois que l'évènement 'Docked' surviens, allors vous devriez écrire un script nommé '((EDDI Docked))' (Attention à mettre les double parenthèses autour du nom afin d'éviter qu'il ne soit appelé par accident, et aussi le 'd' en minuscule dans 'docked'). Une liste complète des évenements est aussi disponible </value>
  </data>
  <data name="p5_link" xml:space="preserve">
    <value>sur le site d'EDDI</value>
  </data>
  <data name="run_eddi_standalone" xml:space="preserve">
    <value>Veuillez fermer VoiceAttack et relancer EDDI pour lancer la mise à jour.</value>
  </data>
</root>