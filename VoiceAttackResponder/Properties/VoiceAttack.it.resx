<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="desc" xml:space="preserve">
    <value>Un risponditore che genera un elevato numero di variabili all'interno di VoiceAttack e di azioni scatenanti definite dall'utente.</value>
  </data>
  <data name="name" xml:space="preserve">
    <value>Assistente VoiceAttack</value>
  </data>
  <data name="p1" xml:space="preserve">
    <value>Per integrare EDDI con VoiceAttack, EDDI deve essere installato all'interno della Cartella 'Apps' di VoiceAttack. Il percorso standard di questa cartella è: 'C.\Programmi (x86)\VoiceAttack\Apps' ed è l'indirizzo di default a cui verrà installato EDDI.</value>
  </data>
  <data name="p2" xml:space="preserve">
    <value>EDDI funzionerà solamente con VoiceAttack di versione 1.5.12.22 o superiore. E' da notare che questa è una versione beta.</value>
  </data>
  <data name="p3" xml:space="preserve">
    <value>Una volta che VoceAttack sia installato avrai bisogno di abilitare il supporto per i plugin. Per farlo clicca sull'icona di Impostazioni (una chiave inglese) nell'angolo in basso a destra della finestra di VoiceAttack, attiva l'opzione 'Abilita supporto Plugin' e riavvia VoiceAttack. Dovresti vedere un messaggio tipo 'Plugin EDDI 2.0.0 avviato'.</value>
  </data>
  <data name="p4" xml:space="preserve">
    <value>A questo punto puoi integrare le variabili di EDDI con i tuoi script di VoiceAttack personalizzati. Per esempio, il tuo nome di comandante è contenuto nella variabile 'Nome' e per accedervi devi usare '{TXT:Name}' all'interno del tuo comando. Esistono variabili riguardanti il tuo comandante, la tua nave, il sistema stellare in cui ti trovi e la stazione a cui si attraccato e così via. Una lista completa di variabili è disponibile </value>
  </data>
  <data name="p4_link" xml:space="preserve">
    <value>sul sito di EDDI</value>
  </data>
  <data name="p5" xml:space="preserve">
    <value>Oltre a scrivere script che puoi attivare con la voce o combinazioni di tasti, potrai anche scriverne che siano attivati da eventi all'interno di Elite. Ad esempio se tu volessi attivare uno script ogni volta che l'evento 'Attraccato' occorre, dovresti scriverne uno chiamato '((EDDI docked))' (nota la doppia parentesi attorno al nome per evitare di attivarlo accidentalmente e la 'd' minuscola in docked). Una lista completa di eventi è disponibile.</value>
  </data>
  <data name="p5_link" xml:space="preserve">
    <value>sul sito di EDDI</value>
  </data>
  <data name="run_eddi_standalone" xml:space="preserve">
    <value>Per favore chiudi VoiceAttack e lancia EDDI da solo per aggiornarlo.</value>
  </data>
</root>
