<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="desc" xml:space="preserve">
    <value>Um relator que gera um grande número de variáveis no VoiceAttack, além de disparar ações definidas pelo usuário.</value>
  </data>
  <data name="name" xml:space="preserve">
    <value>Relator do VoiceAttack</value>
  </data>
  <data name="p1" xml:space="preserve">
    <value>Para integrar o EDDI com o VoiceAttack, o EDDI precisa ser instalado no diretório 'Apps' do VoiceAttack. O caminho padrão para isso é 'C:\Arquivos de Programas (x86)\VoiceAttack\Apps', e é onde o EDDI será instalado por padrão.</value>
  </data>
  <data name="p2" xml:space="preserve">
    <value>EDDI só funcionará com versões do VoiceAttack 1.5.12.22 e superiores. Note que esta é uma versão beta.</value>
  </data>
  <data name="p3" xml:space="preserve">
    <value>Depois que o VoiceAttack for instalado, você precisa ativar o suporte ao plug-in. Para fazer isso, clique no ícone Options (uma chave de boca) no canto inferior direito do VoiceAttack, marque a opção "Enable plugin support" e reinicie o VoiceAttack. Você deve ver uma mensagem na janela do VoiceAttack dizendo 'Plugin EDDI 3.0.0 initialized'.</value>
  </data>
  <data name="p4" xml:space="preserve">
    <value>Neste ponto, você pode integrar as variáveis do EDDI com seus próprios scripts do VoiceAttack. Por exemplo, o nome do seu comandante é armazenado na variável de texto 'Name', para acessá-lo basta usar '{TXT:Name}' em seus próprios comandos. Existem variáveis para o seu comandante, suas naves, o atual sistema estelar e estação em que você está, e mais. Uma lista completa de variáveis está disponível </value>
  </data>
  <data name="p4_link" xml:space="preserve">
    <value>no site do EDDI</value>
  </data>
  <data name="p5" xml:space="preserve">
    <value>Além de escrever scripts que você dispara com comandos de voz ou teclado, também é possível escrever scripts que são acionados em eventos que ocorrem no Elite. Por exemplo, se você quisesse disparar um script toda vez que o evento 'Docked' acontecer, você escreveria um script chamado '((EDDI docked))' (observe os parênteses duplos ao redor do nome para evitar que ele seja chamado acidentalmente e o 'd' minúsculo no docked). Uma lista completa de eventos também está disponível </value>
  </data>
  <data name="p5_link" xml:space="preserve">
    <value>no site principal do EDDI</value>
  </data>
  <data name="run_eddi_standalone" xml:space="preserve">
    <value>Por favor, feche o VoiceAttack e execute Eddi sozinho para atualizar.</value>
  </data>
</root>
