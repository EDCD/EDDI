<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="desc" xml:space="preserve">
    <value>Ответчик который генерирует больше количество переменных для VoiceAttack а также запускает определенные пользователем действия.</value>
  </data>
  <data name="name" xml:space="preserve">
    <value>VoiceAttack Ответчик</value>
  </data>
  <data name="p1" xml:space="preserve">
    <value>Для интеграции EDDI с VoiceAttack, EDDI должен быть установлен в каталоге «Apps» VoiceAttack. Путь по умолчанию «C:\Program Files(x86)\VoiceAttack\Apps», по умолчанию EDDI предлагает установится именно туда.</value>
  </data>
  <data name="p2" xml:space="preserve">
    <value>EDDI будет работать только с версиями VoiceAttack 1.5.12.22 и выше. Обратите внимание, что это бета-версия.</value>
  </data>
  <data name="p3" xml:space="preserve">
    <value>После установки VoiceAttack вам нужно будет включить поддержку плагинов. Для этого необходимо щелкнуть значок «Настройки» (гаечный ключ) в правом верхнем углу VoiceAttack, установить флажок «Включить поддержку плагинов» и перезапустить VoiceAttack. Вы должны увидеть сообщение в окне VoiceAttack вдоль строк 'Plugin EDDI 2.0.0 initialized'.</value>
  </data>
  <data name="p4" xml:space="preserve">
    <value>На этом этапе вы можете интегрировать переменные EDDI с вашими собственными сценариями VoiceAttack. Например, имя вашего командира хранится в текстовой переменной «Имя», поэтому для доступа к нему просто используйте '{TXT:Name}' в своих собственных командах. Есть переменные для вашего командира, ваших кораблей, текущей звездной системы и станции, на которой вы находитесь, и многое другое. Полный список переменных доступен </value>
  </data>
  <data name="p4_link" xml:space="preserve">
    <value>на главном сайте EDDI</value>
  </data>
  <data name="p5" xml:space="preserve">
    <value>В дополнение к написанию сценариев, которые вы запускаете с помощью голосовых или клавиатурных действий, вы также можете написать сценарии, которые запускаются в событиях, происходящих в Elite. Например, если вы хотите запускать сценарий каждый раз, когда происходит событие «Docked», вы должны написать сценарий с именем '((EDDI docked))' (обратите внимание на двойные скобки вокруг имени, чтобы избежать его случайного вызова, и нижний регистр 'd' в docked). Полный список событий также доступен </value>
  </data>
  <data name="p5_link" xml:space="preserve">
    <value>на главном сайте EDDI</value>
  </data>
  <data name="run_eddi_standalone" xml:space="preserve">
    <value>Пожалуйста, закройте VoiceAttack и запустите EDDI самостоятельно для его обновления.</value>
  </data>
</root>
