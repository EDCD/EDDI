<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="desc" xml:space="preserve">
    <value>在 VoiceAttack 中生成大量变量并触发用户定义操作的响应器。</value>
  </data>
  <data name="name" xml:space="preserve">
    <value>VoiceAttack 响应器</value>
  </data>
  <data name="p1" xml:space="preserve">
    <value>要将 EDDI 与 VoiceAttack 集成，需要将 EDDI 安装在 VoiceAttack 的“apps”目录中。 默认路径是“C:\Program Files (x86)\VoiceAttack\Apps”，默认安装 EDDI。</value>
  </data>
  <data name="p2" xml:space="preserve">
    <value>EDDI 仅适用于 VoiceAttack 1.5.12.22 及更高版本。 请注意，1.5.12.22是一个测试版。</value>
  </data>
  <data name="p3" xml:space="preserve">
    <value>安装 VoiceAttack 后，您需要启用插件支持。 为此，您必须单击 VoiceAttack 窗口右下角的设置图标（扳手）并选中“启用插件支持”选项并重新启动 VoiceAttack。 您应该会在 VoiceAttack 窗口中看到一条消息，内容为“已初始化插件 EDDI x.x.x”。</value>
  </data>
  <data name="p4" xml:space="preserve">
    <value>此时您可以将 EDDI 的变量与您自己的 VoiceAttack 脚本集成。 例如，您的指挥官姓名存储在“name”文本变量中，因此您只需在自己的命令中使用“{TXT:Name}”即可访问它。 您的指挥官、您的船只、当前的恒星系统和您所在的车站等等都有变量。 提供完整的变量列表</value>
  </data>
  <data name="p4_link" xml:space="preserve">
    <value>在 EDDI 主页上</value>
  </data>
  <data name="p5" xml:space="preserve">
    <value>除了编写通过语音或键盘操作触发的脚本之外，您还可以编写在 Elite 内发生的事件上触发的脚本。 例如，如果您想在每次“停靠”事件发生时触发一个脚本，那么您将编写一个名为“((EDDIdocked))”的脚本（注意在名称周围使用双括号以避免它被意外调用，且docked的"d"用小写）。 这里还提供完整的活动列表</value>
  </data>
  <data name="p5_link" xml:space="preserve">
    <value>在 EDDI 主页上</value>
  </data>
  <data name="run_eddi_standalone" xml:space="preserve">
    <value>请关闭 VoiceAttack 并独立运行 Eddi 以进行升级。</value>
  </data>
</root>